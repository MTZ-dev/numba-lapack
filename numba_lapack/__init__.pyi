# Auto-generated by tools/gen_docs_stubs_from_pxd.py — DO NOT EDIT.
from __future__ import annotations
from typing import Union, TypeVar, Generic
import numpy as np
from numpy.typing import NDArray

# =============================================================================
# Calling rules (UNSAFE wrappers):
# - Passing a machine-size UNSIGNED integer (Address = np.uintp) is interpreted
#   as a RAW POINTER to the parameter’s base dtype.
# - Passing a base scalar (e.g., np.float64, np.int32) to a pointer parameter
#   means: allocate a 1-slot temporary and pass its ADDRESS (by-ref scalar).
# - Passing a NumPy array of the right dtype means: pass its DATA POINTER.
# - Passing a typed pointer Ptr[T] (editor-only alias for Numba CPointer[T])
#   is preferred; functions also accept Address for backward-compat.
# - If you intend an integer VALUE (not a pointer), pass SIGNED int32/int64.
#   Do NOT pass np.uintp unless you really mean a pointer.
# - Flags like 'N','T','U' should be ord('N') or np.uint8(ord('N')).
# =============================================================================

# Raw pointer/address (pointer-sized UNSIGNED). Distinct from int32/int64.
Address = np.uintp

# Editor-only alias for a typed pointer (runtime uses Numba CPointer[T]).
T = TypeVar("T")
class Ptr(Generic[T]): ...  # stub-only; no runtime

# BLAS/LAPACK "int" parameters are LP64 or ILP64 depending on the backend.
BlasInt = Union[np.int32, np.int64]

# Char flags like 'N','T','U' are passed as ord(...) or np.uint8.
Char8 = Union[np.uint8, int]

# Convenience unions for pointer-like params:
#     scalar | ndarray[dtype] | Ptr[dtype] | Address
ScalarOrArray32   = Union[np.float32,    NDArray[np.float32],    Ptr[np.float32],    Address]
ScalarOrArray64   = Union[np.float64,    NDArray[np.float64],    Ptr[np.float64],    Address]
ScalarOrArrayC64  = Union[np.complex64,  NDArray[np.complex64],  Ptr[np.complex64],  Address]
ScalarOrArrayC128 = Union[np.complex128, NDArray[np.complex128], Ptr[np.complex128], Address]
ScalarOrArrayU8   = Union[np.uint8,      NDArray[np.uint8],      Ptr[np.uint8],      Address]
ScalarOrArrayBool = Union[np.bool_,      NDArray[np.bool_],      Ptr[np.bool_],      Address]

# Int pointer-like params can be 32-bit or 64-bit depending on BLAS build:
ScalarOrArrayInt  = Union[BlasInt, NDArray[np.int32], NDArray[np.int64], Ptr[np.int32], Ptr[np.int64], Address]

from typing import Any

# === Runtime helpers (manually documented) ====================================

"""Return the raw data address of a NumPy array (pointer-sized unsigned int)."""
def data_ptr(a: NDArray[Any]) -> Address: ...

"""Allocate a one-slot temporary for the scalar and return its address.
Notes:
- Passing np.uintp anywhere means *raw pointer* (unsafe).
- For integer VALUES, pass SIGNED int32/int64 (not np.uintp).
"""
def byref(x: Union[np.float32, np.float64, np.complex64, np.complex128,
                   np.int32, np.int64, np.uint8, np.bool_]) -> Address: ...

""" caxpy(n: BlasInt, ca: complex64, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt) """
def caxpy(n: ScalarOrArrayInt, ca: ScalarOrArrayC64, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" cbbcsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, m: BlasInt, p: BlasInt, q: BlasInt, theta: float32, phi: float32, u1: complex64, ldu1: BlasInt, u2: complex64, ldu2: BlasInt, v1t: complex64, ldv1t: BlasInt, v2t: complex64, ldv2t: BlasInt, b11d: float32, b11e: float32, b12d: float32, b12e: float32, b21d: float32, b21e: float32, b22d: float32, b22e: float32, rwork: float32, lrwork: BlasInt, info: BlasInt) """
def cbbcsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, theta: ScalarOrArray32, phi: ScalarOrArray32, u1: ScalarOrArrayC64, ldu1: ScalarOrArrayInt, u2: ScalarOrArrayC64, ldu2: ScalarOrArrayInt, v1t: ScalarOrArrayC64, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArrayC64, ldv2t: ScalarOrArrayInt, b11d: ScalarOrArray32, b11e: ScalarOrArray32, b12d: ScalarOrArray32, b12e: ScalarOrArray32, b21d: ScalarOrArray32, b21e: ScalarOrArray32, b22d: ScalarOrArray32, b22e: ScalarOrArray32, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cbdsqr(uplo: uint8, n: BlasInt, ncvt: BlasInt, nru: BlasInt, ncc: BlasInt, d: float32, e: float32, vt: complex64, ldvt: BlasInt, u: complex64, ldu: BlasInt, c: complex64, ldc: BlasInt, rwork: float32, info: BlasInt) """
def cbdsqr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ncvt: ScalarOrArrayInt, nru: ScalarOrArrayInt, ncc: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vt: ScalarOrArrayC64, ldvt: ScalarOrArrayInt, u: ScalarOrArrayC64, ldu: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ccopy(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt) """
def ccopy(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" cdotc(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt) """
def cdotc(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> np.complex64: ...

""" cdotu(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt) """
def cdotu(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> np.complex64: ...

""" cgbbrd(vect: uint8, m: BlasInt, n: BlasInt, ncc: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, d: float32, e: float32, q: complex64, ldq: BlasInt, pt: complex64, ldpt: BlasInt, c: complex64, ldc: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def cgbbrd(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ncc: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, pt: ScalarOrArrayC64, ldpt: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgbcon(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, ipiv: BlasInt, anorm: float32, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgbcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgbequ(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def cgbequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgbequb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def cgbequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgbmv(trans: uint8, m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def cgbmv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" cgbrfs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, afb: complex64, ldafb: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgbrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC64, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgbsv(n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cgbsv(n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgbsvx(fact: uint8, trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, afb: complex64, ldafb: BlasInt, ipiv: BlasInt, equed: uint8, r: float32, c: float32, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgbsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC64, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray32, c: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgbtf2(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def cgbtf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgbtrf(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def cgbtrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgbtrs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cgbtrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgebak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float32, m: BlasInt, v: complex64, ldv: BlasInt, info: BlasInt) """
def cgebak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray32, m: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgebal(job: uint8, n: BlasInt, a: complex64, lda: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float32, info: BlasInt) """
def cgebal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgebd2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, d: float32, e: float32, tauq: complex64, taup: complex64, work: complex64, info: BlasInt) """
def cgebd2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tauq: ScalarOrArrayC64, taup: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgebrd(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, d: float32, e: float32, tauq: complex64, taup: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgebrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tauq: ScalarOrArrayC64, taup: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgecon(norm: uint8, n: BlasInt, a: complex64, lda: BlasInt, anorm: float32, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgecon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgeequ(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def cgeequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgeequb(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def cgeequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgeev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: complex64, lda: BlasInt, w: complex64, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cgeev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, w: ScalarOrArrayC64, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgeevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: complex64, lda: BlasInt, w: complex64, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float32, abnrm: float32, rconde: float32, rcondv: float32, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cgeevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, w: ScalarOrArrayC64, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray32, abnrm: ScalarOrArray32, rconde: ScalarOrArray32, rcondv: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgehd2(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cgehd2(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgehrd(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgehrd(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgelq2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cgelq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgelqf(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgelqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgels(trans: uint8, m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgels(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgelsd(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, s: float32, rcond: float32, rank: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, iwork: BlasInt, info: BlasInt) """
def cgelsd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, s: ScalarOrArray32, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgelss(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, s: float32, rcond: float32, rank: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cgelss(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, s: ScalarOrArray32, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgelsy(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, jpvt: BlasInt, rcond: float32, rank: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cgelsy(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgemm(transa: uint8, transb: uint8, m: BlasInt, n: BlasInt, k: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, beta: complex64, c: complex64, ldc: BlasInt) """
def cgemm(transa: ScalarOrArrayU8, transb: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" cgemqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, nb: BlasInt, v: complex64, ldv: BlasInt, t: complex64, ldt: BlasInt, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cgemqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgemv(trans: uint8, m: BlasInt, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def cgemv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" cgeql2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cgeql2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgeqlf(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgeqlf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgeqp3(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, jpvt: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cgeqp3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgeqr2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cgeqr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgeqr2p(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cgeqr2p(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgeqrf(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgeqrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgeqrfp(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgeqrfp(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgeqrt(m: BlasInt, n: BlasInt, nb: BlasInt, a: complex64, lda: BlasInt, t: complex64, ldt: BlasInt, work: complex64, info: BlasInt) """
def cgeqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgeqrt2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, t: complex64, ldt: BlasInt, info: BlasInt) """
def cgeqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgeqrt3(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, t: complex64, ldt: BlasInt, info: BlasInt) """
def cgeqrt3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgerc(m: BlasInt, n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, a: complex64, lda: BlasInt) """
def cgerc(m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" cgerfs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgerfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgerq2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cgerq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgerqf(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgerqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgeru(m: BlasInt, n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, a: complex64, lda: BlasInt) """
def cgeru(m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" cgesc2(n: BlasInt, a: complex64, lda: BlasInt, rhs: complex64, ipiv: BlasInt, jpiv: BlasInt, scale: float32) """
def cgesc2(n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, rhs: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, scale: ScalarOrArray32) -> None: ...

""" cgesdd(jobz: uint8, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, s: float32, u: complex64, ldu: BlasInt, vt: complex64, ldvt: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, iwork: BlasInt, info: BlasInt) """
def cgesdd(jobz: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, u: ScalarOrArrayC64, ldu: ScalarOrArrayInt, vt: ScalarOrArrayC64, ldvt: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgesv(n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cgesv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgesvd(jobu: uint8, jobvt: uint8, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, s: float32, u: complex64, ldu: BlasInt, vt: complex64, ldvt: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cgesvd(jobu: ScalarOrArrayU8, jobvt: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, u: ScalarOrArrayC64, ldu: ScalarOrArrayInt, vt: ScalarOrArrayC64, ldvt: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgesvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, ipiv: BlasInt, equed: uint8, r: float32, c: float32, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgesvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray32, c: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgetc2(n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, jpiv: BlasInt, info: BlasInt) """
def cgetc2(n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgetf2(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def cgetf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgetrf(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def cgetrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgetri(n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgetri(n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgetrs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cgetrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cggbak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float32, rscale: float32, m: BlasInt, v: complex64, ldv: BlasInt, info: BlasInt) """
def cggbak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray32, rscale: ScalarOrArray32, m: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cggbal(job: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float32, rscale: float32, work: float32, info: BlasInt) """
def cggbal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray32, rscale: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cggev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, alpha: complex64, beta: complex64, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cggev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, alpha: ScalarOrArrayC64, beta: ScalarOrArrayC64, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cggevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, alpha: complex64, beta: complex64, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float32, rscale: float32, abnrm: float32, bbnrm: float32, rconde: float32, rcondv: float32, work: complex64, lwork: BlasInt, rwork: float32, iwork: BlasInt, bwork: bool, info: BlasInt) """
def cggevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, alpha: ScalarOrArrayC64, beta: ScalarOrArrayC64, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray32, rscale: ScalarOrArray32, abnrm: ScalarOrArray32, bbnrm: ScalarOrArray32, rconde: ScalarOrArray32, rcondv: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, bwork: ScalarOrArrayBool, info: ScalarOrArrayInt) -> None: ...

""" cggglm(n: BlasInt, m: BlasInt, p: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, d: complex64, x: complex64, y: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cggglm(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, d: ScalarOrArrayC64, x: ScalarOrArrayC64, y: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgghrd(compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, q: complex64, ldq: BlasInt, z: complex64, ldz: BlasInt, info: BlasInt) """
def cgghrd(compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgglse(m: BlasInt, n: BlasInt, p: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, c: complex64, d: complex64, x: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cgglse(m: ScalarOrArrayInt, n: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, c: ScalarOrArrayC64, d: ScalarOrArrayC64, x: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cggqrf(n: BlasInt, m: BlasInt, p: BlasInt, a: complex64, lda: BlasInt, taua: complex64, b: complex64, ldb: BlasInt, taub: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cggqrf(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, taua: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, taub: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cggrqf(m: BlasInt, p: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, taua: complex64, b: complex64, ldb: BlasInt, taub: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cggrqf(m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, taua: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, taub: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgtcon(norm: uint8, n: BlasInt, dl: complex64, d: complex64, du: complex64, du2: complex64, ipiv: BlasInt, anorm: float32, rcond: float32, work: complex64, info: BlasInt) """
def cgtcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, du2: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cgtrfs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: complex64, d: complex64, du: complex64, dlf: complex64, df: complex64, duf: complex64, du2: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgtrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, dlf: ScalarOrArrayC64, df: ScalarOrArrayC64, duf: ScalarOrArrayC64, du2: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgtsv(n: BlasInt, nrhs: BlasInt, dl: complex64, d: complex64, du: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def cgtsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgtsvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, dl: complex64, d: complex64, du: complex64, dlf: complex64, df: complex64, duf: complex64, du2: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cgtsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, dlf: ScalarOrArrayC64, df: ScalarOrArrayC64, duf: ScalarOrArrayC64, du2: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cgttrf(n: BlasInt, dl: complex64, d: complex64, du: complex64, du2: complex64, ipiv: BlasInt, info: BlasInt) """
def cgttrf(n: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, du2: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgttrs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: complex64, d: complex64, du: complex64, du2: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cgttrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, du2: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cgtts2(itrans: BlasInt, n: BlasInt, nrhs: BlasInt, dl: complex64, d: complex64, du: complex64, du2: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt) """
def cgtts2(itrans: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, du2: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" chbev(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def chbev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chbevd(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def chbevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chbevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, q: complex64, ldq: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def chbevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chbgst(vect: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex64, ldab: BlasInt, bb: complex64, ldbb: BlasInt, x: complex64, ldx: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def chbgst(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC64, ldbb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chbgv(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex64, ldab: BlasInt, bb: complex64, ldbb: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def chbgv(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC64, ldbb: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chbgvd(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex64, ldab: BlasInt, bb: complex64, ldbb: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def chbgvd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC64, ldbb: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chbgvx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex64, ldab: BlasInt, bb: complex64, ldbb: BlasInt, q: complex64, ldq: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def chbgvx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC64, ldbb: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chbmv(uplo: uint8, n: BlasInt, k: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def chbmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" chbtrd(vect: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, d: float32, e: float32, q: complex64, ldq: BlasInt, work: complex64, info: BlasInt) """
def chbtrd(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" checon(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, anorm: float32, rcond: float32, work: complex64, info: BlasInt) """
def checon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cheequb(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, s: float32, scond: float32, amax: float32, work: complex64, info: BlasInt) """
def cheequb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cheev(jobz: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, w: float32, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def cheev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cheevd(jobz: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, w: float32, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def cheevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cheevr(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, isuppz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def cheevr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cheevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def cheevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chegs2(itype: BlasInt, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def chegs2(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chegst(itype: BlasInt, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def chegst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chegv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, w: float32, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def chegv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chegvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, w: float32, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def chegvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chegvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def chegvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chemm(side: uint8, uplo: uint8, m: BlasInt, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, beta: complex64, c: complex64, ldc: BlasInt) """
def chemm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" chemv(uplo: uint8, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def chemv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" cher(uplo: uint8, n: BlasInt, alpha: float32, x: complex64, incx: BlasInt, a: complex64, lda: BlasInt) """
def cher(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" cher2(uplo: uint8, n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, a: complex64, lda: BlasInt) """
def cher2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" cher2k(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, beta: float32, c: complex64, ldc: BlasInt) """
def cher2k(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" cherfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cherfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cherk(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float32, a: complex64, lda: BlasInt, beta: float32, c: complex64, ldc: BlasInt) """
def cherk(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" chesv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def chesv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chesvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def chesvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cheswapr(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, i1: BlasInt, i2: BlasInt) """
def cheswapr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, i1: ScalarOrArrayInt, i2: ScalarOrArrayInt) -> None: ...

""" chetd2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, d: float32, e: float32, tau: complex64, info: BlasInt) """
def chetd2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tau: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chetf2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def chetf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chetrd(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, d: float32, e: float32, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def chetrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chetrf(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def chetrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chetri(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, info: BlasInt) """
def chetri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chetri2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def chetri2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chetri2x(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, nb: BlasInt, info: BlasInt) """
def chetri2x(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, nb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chetrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def chetrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chetrs2(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, work: complex64, info: BlasInt) """
def chetrs2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chfrk(transr: uint8, uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float32, a: complex64, lda: BlasInt, beta: float32, c: complex64) """
def chfrk(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArrayC64) -> None: ...

""" chgeqz(job: uint8, compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex64, ldh: BlasInt, t: complex64, ldt: BlasInt, alpha: complex64, beta: complex64, q: complex64, ldq: BlasInt, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def chgeqz(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, alpha: ScalarOrArrayC64, beta: ScalarOrArrayC64, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chla_transtype(trans: BlasInt) """
def chla_transtype(trans: ScalarOrArrayInt) -> np.uint8: ...

""" chpcon(uplo: uint8, n: BlasInt, ap: complex64, ipiv: BlasInt, anorm: float32, rcond: float32, work: complex64, info: BlasInt) """
def chpcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chpev(jobz: uint8, uplo: uint8, n: BlasInt, ap: complex64, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def chpev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chpevd(jobz: uint8, uplo: uint8, n: BlasInt, ap: complex64, w: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def chpevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chpevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: complex64, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def chpevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chpgst(itype: BlasInt, uplo: uint8, n: BlasInt, ap: complex64, bp: complex64, info: BlasInt) """
def chpgst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, bp: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chpgv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: complex64, bp: complex64, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def chpgv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, bp: ScalarOrArrayC64, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chpgvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: complex64, bp: complex64, w: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def chpgvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, bp: ScalarOrArrayC64, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chpgvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: complex64, bp: complex64, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, work: complex64, rwork: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def chpgvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, bp: ScalarOrArrayC64, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chpmv(uplo: uint8, n: BlasInt, alpha: complex64, ap: complex64, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def chpmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, ap: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" chpr(uplo: uint8, n: BlasInt, alpha: float32, x: complex64, incx: BlasInt, ap: complex64) """
def chpr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, ap: ScalarOrArrayC64) -> None: ...

""" chpr2(uplo: uint8, n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, ap: complex64) """
def chpr2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, ap: ScalarOrArrayC64) -> None: ...

""" chprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, afp: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def chprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, afp: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chpsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def chpsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chpsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, afp: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def chpsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, afp: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" chptrd(uplo: uint8, n: BlasInt, ap: complex64, d: float32, e: float32, tau: complex64, info: BlasInt) """
def chptrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, d: ScalarOrArray32, e: ScalarOrArray32, tau: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chptrf(uplo: uint8, n: BlasInt, ap: complex64, ipiv: BlasInt, info: BlasInt) """
def chptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chptri(uplo: uint8, n: BlasInt, ap: complex64, ipiv: BlasInt, work: complex64, info: BlasInt) """
def chptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" chptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def chptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chsein(side: uint8, eigsrc: uint8, initv: uint8, select: bool, n: BlasInt, h: complex64, ldh: BlasInt, w: complex64, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: complex64, rwork: float32, ifaill: BlasInt, ifailr: BlasInt, info: BlasInt) """
def chsein(side: ScalarOrArrayU8, eigsrc: ScalarOrArrayU8, initv: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, w: ScalarOrArrayC64, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, ifaill: ScalarOrArrayInt, ifailr: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" chseqr(job: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex64, ldh: BlasInt, w: complex64, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def chseqr(job: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, w: ScalarOrArrayC64, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clabrd(m: BlasInt, n: BlasInt, nb: BlasInt, a: complex64, lda: BlasInt, d: float32, e: float32, tauq: complex64, taup: complex64, x: complex64, ldx: BlasInt, y: complex64, ldy: BlasInt) """
def clabrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tauq: ScalarOrArrayC64, taup: ScalarOrArrayC64, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, y: ScalarOrArrayC64, ldy: ScalarOrArrayInt) -> None: ...

""" clacgv(n: BlasInt, x: complex64, incx: BlasInt) """
def clacgv(n: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" clacn2(n: BlasInt, v: complex64, x: complex64, est: float32, kase: BlasInt, isave: BlasInt) """
def clacn2(n: ScalarOrArrayInt, v: ScalarOrArrayC64, x: ScalarOrArrayC64, est: ScalarOrArray32, kase: ScalarOrArrayInt, isave: ScalarOrArrayInt) -> None: ...

""" clacon(n: BlasInt, v: complex64, x: complex64, est: float32, kase: BlasInt) """
def clacon(n: ScalarOrArrayInt, v: ScalarOrArrayC64, x: ScalarOrArrayC64, est: ScalarOrArray32, kase: ScalarOrArrayInt) -> None: ...

""" clacp2(uplo: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, b: complex64, ldb: BlasInt) """
def clacp2(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" clacpy(uplo: uint8, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt) """
def clacpy(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" clacrm(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, b: float32, ldb: BlasInt, c: complex64, ldc: BlasInt, rwork: float32) """
def clacrm(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, rwork: ScalarOrArray32) -> None: ...

""" clacrt(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt, c: complex64, s: complex64) """
def clacrt(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt, c: ScalarOrArrayC64, s: ScalarOrArrayC64) -> None: ...

""" cladiv(x: complex64, y: complex64) """
def cladiv(x: ScalarOrArrayC64, y: ScalarOrArrayC64) -> np.complex64: ...

""" claed0(qsiz: BlasInt, n: BlasInt, d: float32, e: float32, q: complex64, ldq: BlasInt, qstore: complex64, ldqs: BlasInt, rwork: float32, iwork: BlasInt, info: BlasInt) """
def claed0(qsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, qstore: ScalarOrArrayC64, ldqs: ScalarOrArrayInt, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" claed7(n: BlasInt, cutpnt: BlasInt, qsiz: BlasInt, tlvls: BlasInt, curlvl: BlasInt, curpbm: BlasInt, d: float32, q: complex64, ldq: BlasInt, rho: float32, indxq: BlasInt, qstore: float32, qptr: BlasInt, prmptr: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float32, work: complex64, rwork: float32, iwork: BlasInt, info: BlasInt) """
def claed7(n: ScalarOrArrayInt, cutpnt: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, tlvls: ScalarOrArrayInt, curlvl: ScalarOrArrayInt, curpbm: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, rho: ScalarOrArray32, indxq: ScalarOrArrayInt, qstore: ScalarOrArray32, qptr: ScalarOrArrayInt, prmptr: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" claed8(k: BlasInt, n: BlasInt, qsiz: BlasInt, q: complex64, ldq: BlasInt, d: float32, rho: float32, cutpnt: BlasInt, z: float32, dlamda: float32, q2: complex64, ldq2: BlasInt, w: float32, indxp: BlasInt, indx: BlasInt, indxq: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float32, info: BlasInt) """
def claed8(k: ScalarOrArrayInt, n: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, d: ScalarOrArray32, rho: ScalarOrArray32, cutpnt: ScalarOrArrayInt, z: ScalarOrArray32, dlamda: ScalarOrArray32, q2: ScalarOrArrayC64, ldq2: ScalarOrArrayInt, w: ScalarOrArray32, indxp: ScalarOrArrayInt, indx: ScalarOrArrayInt, indxq: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" claein(rightv: bool, noinit: bool, n: BlasInt, h: complex64, ldh: BlasInt, w: complex64, v: complex64, b: complex64, ldb: BlasInt, rwork: float32, eps3: float32, smlnum: float32, info: BlasInt) """
def claein(rightv: ScalarOrArrayBool, noinit: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, w: ScalarOrArrayC64, v: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, rwork: ScalarOrArray32, eps3: ScalarOrArray32, smlnum: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" claesy(a: complex64, b: complex64, c: complex64, rt1: complex64, rt2: complex64, evscal: complex64, cs1: complex64, sn1: complex64) """
def claesy(a: ScalarOrArrayC64, b: ScalarOrArrayC64, c: ScalarOrArrayC64, rt1: ScalarOrArrayC64, rt2: ScalarOrArrayC64, evscal: ScalarOrArrayC64, cs1: ScalarOrArrayC64, sn1: ScalarOrArrayC64) -> None: ...

""" claev2(a: complex64, b: complex64, c: complex64, rt1: float32, rt2: float32, cs1: float32, sn1: complex64) """
def claev2(a: ScalarOrArrayC64, b: ScalarOrArrayC64, c: ScalarOrArrayC64, rt1: ScalarOrArray32, rt2: ScalarOrArray32, cs1: ScalarOrArray32, sn1: ScalarOrArrayC64) -> None: ...

""" clag2z(m: BlasInt, n: BlasInt, sa: complex64, ldsa: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def clag2z(m: ScalarOrArrayInt, n: ScalarOrArrayInt, sa: ScalarOrArrayC64, ldsa: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clags2(upper: bool, a1: float32, a2: complex64, a3: float32, b1: float32, b2: complex64, b3: float32, csu: float32, snu: complex64, csv: float32, snv: complex64, csq: float32, snq: complex64) """
def clags2(upper: ScalarOrArrayBool, a1: ScalarOrArray32, a2: ScalarOrArrayC64, a3: ScalarOrArray32, b1: ScalarOrArray32, b2: ScalarOrArrayC64, b3: ScalarOrArray32, csu: ScalarOrArray32, snu: ScalarOrArrayC64, csv: ScalarOrArray32, snv: ScalarOrArrayC64, csq: ScalarOrArray32, snq: ScalarOrArrayC64) -> None: ...

""" clagtm(trans: uint8, n: BlasInt, nrhs: BlasInt, alpha: float32, dl: complex64, d: complex64, du: complex64, x: complex64, ldx: BlasInt, beta: float32, b: complex64, ldb: BlasInt) """
def clagtm(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, alpha: ScalarOrArray32, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, beta: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" clahef(uplo: uint8, n: BlasInt, nb: BlasInt, kb: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, w: complex64, ldw: BlasInt, info: BlasInt) """
def clahef(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, w: ScalarOrArrayC64, ldw: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clahqr(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex64, ldh: BlasInt, w: complex64, iloz: BlasInt, ihiz: BlasInt, z: complex64, ldz: BlasInt, info: BlasInt) """
def clahqr(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, w: ScalarOrArrayC64, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clahr2(n: BlasInt, k: BlasInt, nb: BlasInt, a: complex64, lda: BlasInt, tau: complex64, t: complex64, ldt: BlasInt, y: complex64, ldy: BlasInt) """
def clahr2(n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, y: ScalarOrArrayC64, ldy: ScalarOrArrayInt) -> None: ...

""" claic1(job: BlasInt, j: BlasInt, x: complex64, sest: float32, w: complex64, gamma: complex64, sestpr: float32, s: complex64, c: complex64) """
def claic1(job: ScalarOrArrayInt, j: ScalarOrArrayInt, x: ScalarOrArrayC64, sest: ScalarOrArray32, w: ScalarOrArrayC64, gamma: ScalarOrArrayC64, sestpr: ScalarOrArray32, s: ScalarOrArrayC64, c: ScalarOrArrayC64) -> None: ...

""" clals0(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, nrhs: BlasInt, b: complex64, ldb: BlasInt, bx: complex64, ldbx: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float32, ldgnum: BlasInt, poles: float32, difl: float32, difr: float32, z: float32, k: BlasInt, c: float32, s: float32, rwork: float32, info: BlasInt) """
def clals0(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, bx: ScalarOrArrayC64, ldbx: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray32, ldgnum: ScalarOrArrayInt, poles: ScalarOrArray32, difl: ScalarOrArray32, difr: ScalarOrArray32, z: ScalarOrArray32, k: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" clalsa(icompq: BlasInt, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, b: complex64, ldb: BlasInt, bx: complex64, ldbx: BlasInt, u: float32, ldu: BlasInt, vt: float32, k: BlasInt, difl: float32, difr: float32, z: float32, poles: float32, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, perm: BlasInt, givnum: float32, c: float32, s: float32, rwork: float32, iwork: BlasInt, info: BlasInt) """
def clalsa(icompq: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, bx: ScalarOrArrayC64, ldbx: ScalarOrArrayInt, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, k: ScalarOrArrayInt, difl: ScalarOrArray32, difr: ScalarOrArray32, z: ScalarOrArray32, poles: ScalarOrArray32, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, perm: ScalarOrArrayInt, givnum: ScalarOrArray32, c: ScalarOrArray32, s: ScalarOrArray32, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clalsd(uplo: uint8, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, d: float32, e: float32, b: complex64, ldb: BlasInt, rcond: float32, rank: BlasInt, work: complex64, rwork: float32, iwork: BlasInt, info: BlasInt) """
def clalsd(uplo: ScalarOrArrayU8, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clangb(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, work: float32) """
def clangb(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clange(norm: uint8, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, work: float32) """
def clange(norm: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clangt(norm: uint8, n: BlasInt, dl: complex64, d: complex64, du: complex64) """
def clangt(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArrayC64, d: ScalarOrArrayC64, du: ScalarOrArrayC64) -> np.float32: ...

""" clanhb(norm: uint8, uplo: uint8, n: BlasInt, k: BlasInt, ab: complex64, ldab: BlasInt, work: float32) """
def clanhb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clanhe(norm: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, work: float32) """
def clanhe(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clanhf(norm: uint8, transr: uint8, uplo: uint8, n: BlasInt, a: complex64, work: float32) """
def clanhf(norm: ScalarOrArrayU8, transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, work: ScalarOrArray32) -> np.float32: ...

""" clanhp(norm: uint8, uplo: uint8, n: BlasInt, ap: complex64, work: float32) """
def clanhp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, work: ScalarOrArray32) -> np.float32: ...

""" clanhs(norm: uint8, n: BlasInt, a: complex64, lda: BlasInt, work: float32) """
def clanhs(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clanht(norm: uint8, n: BlasInt, d: float32, e: complex64) """
def clanht(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64) -> np.float32: ...

""" clansb(norm: uint8, uplo: uint8, n: BlasInt, k: BlasInt, ab: complex64, ldab: BlasInt, work: float32) """
def clansb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clansp(norm: uint8, uplo: uint8, n: BlasInt, ap: complex64, work: float32) """
def clansp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, work: ScalarOrArray32) -> np.float32: ...

""" clansy(norm: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, work: float32) """
def clansy(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clantb(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, k: BlasInt, ab: complex64, ldab: BlasInt, work: float32) """
def clantb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clantp(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: complex64, work: float32) """
def clantp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, work: ScalarOrArray32) -> np.float32: ...

""" clantr(norm: uint8, uplo: uint8, diag: uint8, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, work: float32) """
def clantr(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" clapll(n: BlasInt, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, ssmin: float32) """
def clapll(n: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, ssmin: ScalarOrArray32) -> None: ...

""" clapmr(forwrd: bool, m: BlasInt, n: BlasInt, x: complex64, ldx: BlasInt, k: BlasInt) """
def clapmr(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" clapmt(forwrd: bool, m: BlasInt, n: BlasInt, x: complex64, ldx: BlasInt, k: BlasInt) """
def clapmt(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" claqgb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex64, ldab: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, equed: uint8) """
def claqgb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqge(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, equed: uint8) """
def claqge(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqhb(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, s: float32, scond: float32, amax: float32, equed: uint8) """
def claqhb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqhe(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, s: float32, scond: float32, amax: float32, equed: uint8) """
def claqhe(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqhp(uplo: uint8, n: BlasInt, ap: complex64, s: float32, scond: float32, amax: float32, equed: uint8) """
def claqhp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqp2(m: BlasInt, n: BlasInt, offset: BlasInt, a: complex64, lda: BlasInt, jpvt: BlasInt, tau: complex64, vn1: float32, vn2: float32, work: complex64) """
def claqp2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArrayC64, vn1: ScalarOrArray32, vn2: ScalarOrArray32, work: ScalarOrArrayC64) -> None: ...

""" claqps(m: BlasInt, n: BlasInt, offset: BlasInt, nb: BlasInt, kb: BlasInt, a: complex64, lda: BlasInt, jpvt: BlasInt, tau: complex64, vn1: float32, vn2: float32, auxv: complex64, f: complex64, ldf: BlasInt) """
def claqps(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArrayC64, vn1: ScalarOrArray32, vn2: ScalarOrArray32, auxv: ScalarOrArrayC64, f: ScalarOrArrayC64, ldf: ScalarOrArrayInt) -> None: ...

""" claqr0(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex64, ldh: BlasInt, w: complex64, iloz: BlasInt, ihiz: BlasInt, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def claqr0(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, w: ScalarOrArrayC64, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" claqr1(n: BlasInt, h: complex64, ldh: BlasInt, s1: complex64, s2: complex64, v: complex64) """
def claqr1(n: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, s1: ScalarOrArrayC64, s2: ScalarOrArrayC64, v: ScalarOrArrayC64) -> None: ...

""" claqr2(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: complex64, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: complex64, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sh: complex64, v: complex64, ldv: BlasInt, nh: BlasInt, t: complex64, ldt: BlasInt, nv: BlasInt, wv: complex64, ldwv: BlasInt, work: complex64, lwork: BlasInt) """
def claqr2(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sh: ScalarOrArrayC64, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArrayC64, ldwv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt) -> None: ...

""" claqr3(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: complex64, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: complex64, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sh: complex64, v: complex64, ldv: BlasInt, nh: BlasInt, t: complex64, ldt: BlasInt, nv: BlasInt, wv: complex64, ldwv: BlasInt, work: complex64, lwork: BlasInt) """
def claqr3(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sh: ScalarOrArrayC64, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArrayC64, ldwv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt) -> None: ...

""" claqr4(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex64, ldh: BlasInt, w: complex64, iloz: BlasInt, ihiz: BlasInt, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def claqr4(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, w: ScalarOrArrayC64, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" claqr5(wantt: bool, wantz: bool, kacc22: BlasInt, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nshfts: BlasInt, s: complex64, h: complex64, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: complex64, ldz: BlasInt, v: complex64, ldv: BlasInt, u: complex64, ldu: BlasInt, nv: BlasInt, wv: complex64, ldwv: BlasInt, nh: BlasInt, wh: complex64, ldwh: BlasInt) """
def claqr5(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, kacc22: ScalarOrArrayInt, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nshfts: ScalarOrArrayInt, s: ScalarOrArrayC64, h: ScalarOrArrayC64, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, u: ScalarOrArrayC64, ldu: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArrayC64, ldwv: ScalarOrArrayInt, nh: ScalarOrArrayInt, wh: ScalarOrArrayC64, ldwh: ScalarOrArrayInt) -> None: ...

""" claqsb(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, s: float32, scond: float32, amax: float32, equed: uint8) """
def claqsb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqsp(uplo: uint8, n: BlasInt, ap: complex64, s: float32, scond: float32, amax: float32, equed: uint8) """
def claqsp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" claqsy(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, s: float32, scond: float32, amax: float32, equed: uint8) """
def claqsy(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" clar1v(n: BlasInt, b1: BlasInt, bn: BlasInt, lambda_: float32, d: float32, l: float32, ld: float32, lld: float32, pivmin: float32, gaptol: float32, z: complex64, wantnc: bool, negcnt: BlasInt, ztz: float32, mingma: float32, r: BlasInt, isuppz: BlasInt, nrminv: float32, resid: float32, rqcorr: float32, work: float32) """
def clar1v(n: ScalarOrArrayInt, b1: ScalarOrArrayInt, bn: ScalarOrArrayInt, lambda_: ScalarOrArray32, d: ScalarOrArray32, l: ScalarOrArray32, ld: ScalarOrArray32, lld: ScalarOrArray32, pivmin: ScalarOrArray32, gaptol: ScalarOrArray32, z: ScalarOrArrayC64, wantnc: ScalarOrArrayBool, negcnt: ScalarOrArrayInt, ztz: ScalarOrArray32, mingma: ScalarOrArray32, r: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, nrminv: ScalarOrArray32, resid: ScalarOrArray32, rqcorr: ScalarOrArray32, work: ScalarOrArray32) -> None: ...

""" clar2v(n: BlasInt, x: complex64, y: complex64, z: complex64, incx: BlasInt, c: float32, s: complex64, incc: BlasInt) """
def clar2v(n: ScalarOrArrayInt, x: ScalarOrArrayC64, y: ScalarOrArrayC64, z: ScalarOrArrayC64, incx: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArrayC64, incc: ScalarOrArrayInt) -> None: ...

""" clarcm(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, b: complex64, ldb: BlasInt, c: complex64, ldc: BlasInt, rwork: float32) """
def clarcm(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, rwork: ScalarOrArray32) -> None: ...

""" clarf(side: uint8, m: BlasInt, n: BlasInt, v: complex64, incv: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64) """
def clarf(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArrayC64, incv: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64) -> None: ...

""" clarfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, v: complex64, ldv: BlasInt, t: complex64, ldt: BlasInt, c: complex64, ldc: BlasInt, work: complex64, ldwork: BlasInt) """
def clarfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, ldwork: ScalarOrArrayInt) -> None: ...

""" clarfg(n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, tau: complex64) """
def clarfg(n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, tau: ScalarOrArrayC64) -> None: ...

""" clarfgp(n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, tau: complex64) """
def clarfgp(n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, tau: ScalarOrArrayC64) -> None: ...

""" clarft(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: complex64, ldv: BlasInt, tau: complex64, t: complex64, ldt: BlasInt) """
def clarft(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, tau: ScalarOrArrayC64, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt) -> None: ...

""" clarfx(side: uint8, m: BlasInt, n: BlasInt, v: complex64, tau: complex64, c: complex64, ldc: BlasInt, work: complex64) """
def clarfx(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArrayC64, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64) -> None: ...

""" clargv(n: BlasInt, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, c: float32, incc: BlasInt) """
def clargv(n: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, c: ScalarOrArray32, incc: ScalarOrArrayInt) -> None: ...

""" clarnv(idist: BlasInt, iseed: BlasInt, n: BlasInt, x: complex64) """
def clarnv(idist: ScalarOrArrayInt, iseed: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArrayC64) -> None: ...

""" clarrv(n: BlasInt, vl: float32, vu: float32, d: float32, l: float32, pivmin: float32, isplit: BlasInt, m: BlasInt, dol: BlasInt, dou: BlasInt, minrgp: float32, rtol1: float32, rtol2: float32, w: float32, werr: float32, wgap: float32, iblock: BlasInt, indexw: BlasInt, gers: float32, z: complex64, ldz: BlasInt, isuppz: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def clarrv(n: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, d: ScalarOrArray32, l: ScalarOrArray32, pivmin: ScalarOrArray32, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, dol: ScalarOrArrayInt, dou: ScalarOrArrayInt, minrgp: ScalarOrArray32, rtol1: ScalarOrArray32, rtol2: ScalarOrArray32, w: ScalarOrArray32, werr: ScalarOrArray32, wgap: ScalarOrArray32, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, gers: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clartg(f: complex64, g: complex64, cs: float32, sn: complex64, r: complex64) """
def clartg(f: ScalarOrArrayC64, g: ScalarOrArrayC64, cs: ScalarOrArray32, sn: ScalarOrArrayC64, r: ScalarOrArrayC64) -> None: ...

""" clartv(n: BlasInt, x: complex64, incx: BlasInt, y: complex64, incy: BlasInt, c: float32, s: complex64, incc: BlasInt) """
def clartv(n: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, y: ScalarOrArrayC64, incy: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArrayC64, incc: ScalarOrArrayInt) -> None: ...

""" clarz(side: uint8, m: BlasInt, n: BlasInt, l: BlasInt, v: complex64, incv: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64) """
def clarz(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArrayC64, incv: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64) -> None: ...

""" clarzb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: complex64, ldv: BlasInt, t: complex64, ldt: BlasInt, c: complex64, ldc: BlasInt, work: complex64, ldwork: BlasInt) """
def clarzb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, ldwork: ScalarOrArrayInt) -> None: ...

""" clarzt(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: complex64, ldv: BlasInt, tau: complex64, t: complex64, ldt: BlasInt) """
def clarzt(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, tau: ScalarOrArrayC64, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt) -> None: ...

""" clascl(type_bn: uint8, kl: BlasInt, ku: BlasInt, cfrom: float32, cto: float32, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def clascl(type_bn: ScalarOrArrayU8, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, cfrom: ScalarOrArray32, cto: ScalarOrArray32, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" claset(uplo: uint8, m: BlasInt, n: BlasInt, alpha: complex64, beta: complex64, a: complex64, lda: BlasInt) """
def claset(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, beta: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" clasr(side: uint8, pivot: uint8, direct: uint8, m: BlasInt, n: BlasInt, c: float32, s: float32, a: complex64, lda: BlasInt) """
def clasr(side: ScalarOrArrayU8, pivot: ScalarOrArrayU8, direct: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" classq(n: BlasInt, x: complex64, incx: BlasInt, scale: float32, sumsq: float32) """
def classq(n: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, scale: ScalarOrArray32, sumsq: ScalarOrArray32) -> None: ...

""" claswp(n: BlasInt, a: complex64, lda: BlasInt, k1: BlasInt, k2: BlasInt, ipiv: BlasInt, incx: BlasInt) """
def claswp(n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, k1: ScalarOrArrayInt, k2: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, incx: ScalarOrArrayInt) -> None: ...

""" clasyf(uplo: uint8, n: BlasInt, nb: BlasInt, kb: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, w: complex64, ldw: BlasInt, info: BlasInt) """
def clasyf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, w: ScalarOrArrayC64, ldw: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clatbs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, x: complex64, scale: float32, cnorm: float32, info: BlasInt) """
def clatbs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, x: ScalarOrArrayC64, scale: ScalarOrArray32, cnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" clatdf(ijob: BlasInt, n: BlasInt, z: complex64, ldz: BlasInt, rhs: complex64, rdsum: float32, rdscal: float32, ipiv: BlasInt, jpiv: BlasInt) """
def clatdf(ijob: ScalarOrArrayInt, n: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, rhs: ScalarOrArrayC64, rdsum: ScalarOrArray32, rdscal: ScalarOrArray32, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt) -> None: ...

""" clatps(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, ap: complex64, x: complex64, scale: float32, cnorm: float32, info: BlasInt) """
def clatps(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, x: ScalarOrArrayC64, scale: ScalarOrArray32, cnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" clatrd(uplo: uint8, n: BlasInt, nb: BlasInt, a: complex64, lda: BlasInt, e: float32, tau: complex64, w: complex64, ldw: BlasInt) """
def clatrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, e: ScalarOrArray32, tau: ScalarOrArrayC64, w: ScalarOrArrayC64, ldw: ScalarOrArrayInt) -> None: ...

""" clatrs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, a: complex64, lda: BlasInt, x: complex64, scale: float32, cnorm: float32, info: BlasInt) """
def clatrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, scale: ScalarOrArray32, cnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" clatrz(m: BlasInt, n: BlasInt, l: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64) """
def clatrz(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64) -> None: ...

""" clauu2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def clauu2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" clauum(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def clauum(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpbcon(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, anorm: float32, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def cpbcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpbequ(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, s: float32, scond: float32, amax: float32, info: BlasInt) """
def cpbequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpbrfs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, afb: complex64, ldafb: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cpbrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC64, ldafb: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpbstf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, info: BlasInt) """
def cpbstf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpbsv(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cpbsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpbsvx(fact: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, afb: complex64, ldafb: BlasInt, equed: uint8, s: float32, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cpbsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC64, ldafb: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpbtf2(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, info: BlasInt) """
def cpbtf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpbtrf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, info: BlasInt) """
def cpbtrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpbtrs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cpbtrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpftrf(transr: uint8, uplo: uint8, n: BlasInt, a: complex64, info: BlasInt) """
def cpftrf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cpftri(transr: uint8, uplo: uint8, n: BlasInt, a: complex64, info: BlasInt) """
def cpftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cpftrs(transr: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def cpftrs(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpocon(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, anorm: float32, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def cpocon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpoequ(n: BlasInt, a: complex64, lda: BlasInt, s: float32, scond: float32, amax: float32, info: BlasInt) """
def cpoequ(n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpoequb(n: BlasInt, a: complex64, lda: BlasInt, s: float32, scond: float32, amax: float32, info: BlasInt) """
def cpoequb(n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cporfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cporfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cposv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cposv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cposvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, equed: uint8, s: float32, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cposvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpotf2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def cpotf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpotrf(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def cpotrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpotri(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def cpotri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpotrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cpotrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cppcon(uplo: uint8, n: BlasInt, ap: complex64, anorm: float32, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def cppcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cppequ(uplo: uint8, n: BlasInt, ap: complex64, s: float32, scond: float32, amax: float32, info: BlasInt) """
def cppequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, afp: complex64, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cpprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, afp: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cppsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def cppsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cppsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, afp: complex64, equed: uint8, s: float32, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cppsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, afp: ScalarOrArrayC64, equed: ScalarOrArrayU8, s: ScalarOrArray32, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpptrf(uplo: uint8, n: BlasInt, ap: complex64, info: BlasInt) """
def cpptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cpptri(uplo: uint8, n: BlasInt, ap: complex64, info: BlasInt) """
def cpptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cpptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def cpptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cpstf2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float32, work: float32, info: BlasInt) """
def cpstf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpstrf(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float32, work: float32, info: BlasInt) """
def cpstrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cptcon(n: BlasInt, d: float32, e: complex64, anorm: float32, rcond: float32, rwork: float32, info: BlasInt) """
def cptcon(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, anorm: ScalarOrArray32, rcond: ScalarOrArray32, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpteqr(compz: uint8, n: BlasInt, d: float32, e: float32, z: complex64, ldz: BlasInt, work: float32, info: BlasInt) """
def cpteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cptrfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, d: float32, e: complex64, df: float32, ef: complex64, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cptrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, df: ScalarOrArray32, ef: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cptsv(n: BlasInt, nrhs: BlasInt, d: float32, e: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def cptsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cptsvx(fact: uint8, n: BlasInt, nrhs: BlasInt, d: float32, e: complex64, df: float32, ef: complex64, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cptsvx(fact: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, df: ScalarOrArray32, ef: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cpttrf(n: BlasInt, d: float32, e: complex64, info: BlasInt) """
def cpttrf(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cpttrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, d: float32, e: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def cpttrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cptts2(iuplo: BlasInt, n: BlasInt, nrhs: BlasInt, d: float32, e: complex64, b: complex64, ldb: BlasInt) """
def cptts2(iuplo: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" crot(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt, c: float32, s: complex64) """
def crot(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArrayC64) -> None: ...

""" crotg(ca: complex64, cb: complex64, c: float32, s: complex64) """
def crotg(ca: ScalarOrArrayC64, cb: ScalarOrArrayC64, c: ScalarOrArray32, s: ScalarOrArrayC64) -> None: ...

""" cscal(n: BlasInt, ca: complex64, cx: complex64, incx: BlasInt) """
def cscal(n: ScalarOrArrayInt, ca: ScalarOrArrayC64, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" cspcon(uplo: uint8, n: BlasInt, ap: complex64, ipiv: BlasInt, anorm: float32, rcond: float32, work: complex64, info: BlasInt) """
def cspcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cspmv(uplo: uint8, n: BlasInt, alpha: complex64, ap: complex64, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def cspmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, ap: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" cspr(uplo: uint8, n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, ap: complex64) """
def cspr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, ap: ScalarOrArrayC64) -> None: ...

""" csprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, afp: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def csprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, afp: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cspsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def cspsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cspsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, afp: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def cspsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, afp: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" csptrf(uplo: uint8, n: BlasInt, ap: complex64, ipiv: BlasInt, info: BlasInt) """
def csptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csptri(uplo: uint8, n: BlasInt, ap: complex64, ipiv: BlasInt, work: complex64, info: BlasInt) """
def csptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" csptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def csptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csrot(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt, c: float32, s: float32) """
def csrot(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32) -> None: ...

""" csrscl(n: BlasInt, sa: float32, sx: complex64, incx: BlasInt) """
def csrscl(n: ScalarOrArrayInt, sa: ScalarOrArray32, sx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" csscal(n: BlasInt, sa: float32, cx: complex64, incx: BlasInt) """
def csscal(n: ScalarOrArrayInt, sa: ScalarOrArray32, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" cstedc(compz: uint8, n: BlasInt, d: float32, e: float32, z: complex64, ldz: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def cstedc(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cstegr(jobz: uint8, range: uint8, n: BlasInt, d: float32, e: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, isuppz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def cstegr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cstein(n: BlasInt, d: float32, e: float32, m: BlasInt, w: float32, iblock: BlasInt, isplit: BlasInt, z: complex64, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def cstein(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, iblock: ScalarOrArrayInt, isplit: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cstemr(jobz: uint8, range: uint8, n: BlasInt, d: float32, e: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, m: BlasInt, w: float32, z: complex64, ldz: BlasInt, nzc: BlasInt, isuppz: BlasInt, tryrac: bool, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def cstemr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, nzc: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, tryrac: ScalarOrArrayBool, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csteqr(compz: uint8, n: BlasInt, d: float32, e: float32, z: complex64, ldz: BlasInt, work: float32, info: BlasInt) """
def csteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" cswap(n: BlasInt, cx: complex64, incx: BlasInt, cy: complex64, incy: BlasInt) """
def cswap(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt, cy: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" csycon(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, anorm: float32, rcond: float32, work: complex64, info: BlasInt) """
def csycon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" csyconv(uplo: uint8, way: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, info: BlasInt) """
def csyconv(uplo: ScalarOrArrayU8, way: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" csyequb(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, s: float32, scond: float32, amax: float32, work: complex64, info: BlasInt) """
def csyequb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" csymm(side: uint8, uplo: uint8, m: BlasInt, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, beta: complex64, c: complex64, ldc: BlasInt) """
def csymm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" csymv(uplo: uint8, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt, beta: complex64, y: complex64, incy: BlasInt) """
def csymv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, beta: ScalarOrArrayC64, y: ScalarOrArrayC64, incy: ScalarOrArrayInt) -> None: ...

""" csyr(uplo: uint8, n: BlasInt, alpha: complex64, x: complex64, incx: BlasInt, a: complex64, lda: BlasInt) """
def csyr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> None: ...

""" csyr2k(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, beta: complex64, c: complex64, ldc: BlasInt) """
def csyr2k(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" csyrfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def csyrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" csyrk(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, beta: complex64, c: complex64, ldc: BlasInt) """
def csyrk(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, beta: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt) -> None: ...

""" csysv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def csysv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csysvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, af: complex64, ldaf: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: complex64, lwork: BlasInt, rwork: float32, info: BlasInt) """
def csysvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, af: ScalarOrArrayC64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" csyswapr(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, i1: BlasInt, i2: BlasInt) """
def csyswapr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, i1: ScalarOrArrayInt, i2: ScalarOrArrayInt) -> None: ...

""" csytf2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def csytf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csytrf(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def csytrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csytri(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, info: BlasInt) """
def csytri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" csytri2(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def csytri2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csytri2x(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, work: complex64, nb: BlasInt, info: BlasInt) """
def csytri2x(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC64, nb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csytrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def csytrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" csytrs2(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, ipiv: BlasInt, b: complex64, ldb: BlasInt, work: complex64, info: BlasInt) """
def csytrs2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctbcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, kd: BlasInt, ab: complex64, ldab: BlasInt, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def ctbcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctbmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt) """
def ctbmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" ctbrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def ctbrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctbsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt) """
def ctbsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" ctbtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex64, ldab: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def ctbtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC64, ldab: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctfsm(transr: uint8, side: uint8, uplo: uint8, trans: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: complex64, a: complex64, b: complex64, ldb: BlasInt) """
def ctfsm(transr: ScalarOrArrayU8, side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" ctftri(transr: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: complex64, info: BlasInt) """
def ctftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctfttp(transr: uint8, uplo: uint8, n: BlasInt, arf: complex64, ap: complex64, info: BlasInt) """
def ctfttp(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArrayC64, ap: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctfttr(transr: uint8, uplo: uint8, n: BlasInt, arf: complex64, a: complex64, lda: BlasInt, info: BlasInt) """
def ctfttr(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctgevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, s: complex64, lds: BlasInt, p: complex64, ldp: BlasInt, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def ctgevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, s: ScalarOrArrayC64, lds: ScalarOrArrayInt, p: ScalarOrArrayC64, ldp: ScalarOrArrayInt, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctgex2(wantq: bool, wantz: bool, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, q: complex64, ldq: BlasInt, z: complex64, ldz: BlasInt, j1: BlasInt, info: BlasInt) """
def ctgex2(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, j1: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctgexc(wantq: bool, wantz: bool, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, q: complex64, ldq: BlasInt, z: complex64, ldz: BlasInt, ifst: BlasInt, ilst: BlasInt, info: BlasInt) """
def ctgexc(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctgsen(ijob: BlasInt, wantq: bool, wantz: bool, select: bool, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, alpha: complex64, beta: complex64, q: complex64, ldq: BlasInt, z: complex64, ldz: BlasInt, m: BlasInt, pl: float32, pr: float32, dif: float32, work: complex64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ctgsen(ijob: ScalarOrArrayInt, wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, alpha: ScalarOrArrayC64, beta: ScalarOrArrayC64, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, z: ScalarOrArrayC64, ldz: ScalarOrArrayInt, m: ScalarOrArrayInt, pl: ScalarOrArray32, pr: ScalarOrArray32, dif: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctgsja(jobu: uint8, jobv: uint8, jobq: uint8, m: BlasInt, p: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, tola: float32, tolb: float32, alpha: float32, beta: float32, u: complex64, ldu: BlasInt, v: complex64, ldv: BlasInt, q: complex64, ldq: BlasInt, work: complex64, ncycle: BlasInt, info: BlasInt) """
def ctgsja(jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, jobq: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, tola: ScalarOrArray32, tolb: ScalarOrArray32, alpha: ScalarOrArray32, beta: ScalarOrArray32, u: ScalarOrArrayC64, ldu: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, work: ScalarOrArrayC64, ncycle: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctgsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, s: float32, dif: float32, mm: BlasInt, m: BlasInt, work: complex64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def ctgsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, s: ScalarOrArray32, dif: ScalarOrArray32, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctgsy2(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, c: complex64, ldc: BlasInt, d: complex64, ldd: BlasInt, e: complex64, lde: BlasInt, f: complex64, ldf: BlasInt, scale: float32, rdsum: float32, rdscal: float32, info: BlasInt) """
def ctgsy2(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, d: ScalarOrArrayC64, ldd: ScalarOrArrayInt, e: ScalarOrArrayC64, lde: ScalarOrArrayInt, f: ScalarOrArrayC64, ldf: ScalarOrArrayInt, scale: ScalarOrArray32, rdsum: ScalarOrArray32, rdscal: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctgsyl(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, c: complex64, ldc: BlasInt, d: complex64, ldd: BlasInt, e: complex64, lde: BlasInt, f: complex64, ldf: BlasInt, scale: float32, dif: float32, work: complex64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def ctgsyl(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, d: ScalarOrArrayC64, ldd: ScalarOrArrayInt, e: ScalarOrArrayC64, lde: ScalarOrArrayInt, f: ScalarOrArrayC64, ldf: ScalarOrArrayInt, scale: ScalarOrArray32, dif: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctpcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: complex64, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def ctpcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctpmqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, nb: BlasInt, v: complex64, ldv: BlasInt, t: complex64, ldt: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, work: complex64, info: BlasInt) """
def ctpmqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctpmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: complex64, x: complex64, incx: BlasInt) """
def ctpmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" ctpqrt(m: BlasInt, n: BlasInt, l: BlasInt, nb: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, t: complex64, ldt: BlasInt, work: complex64, info: BlasInt) """
def ctpqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctpqrt2(m: BlasInt, n: BlasInt, l: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, t: complex64, ldt: BlasInt, info: BlasInt) """
def ctpqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctprfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: complex64, ldv: BlasInt, t: complex64, ldt: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, work: complex64, ldwork: BlasInt) """
def ctprfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArrayC64, ldv: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, work: ScalarOrArrayC64, ldwork: ScalarOrArrayInt) -> None: ...

""" ctprfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def ctprfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctpsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: complex64, x: complex64, incx: BlasInt) """
def ctpsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" ctptri(uplo: uint8, diag: uint8, n: BlasInt, ap: complex64, info: BlasInt) """
def ctptri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctptrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: complex64, b: complex64, ldb: BlasInt, info: BlasInt) """
def ctptrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC64, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctpttf(transr: uint8, uplo: uint8, n: BlasInt, ap: complex64, arf: complex64, info: BlasInt) """
def ctpttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, arf: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctpttr(uplo: uint8, n: BlasInt, ap: complex64, a: complex64, lda: BlasInt, info: BlasInt) """
def ctpttr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctrcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: complex64, lda: BlasInt, rcond: float32, work: complex64, rwork: float32, info: BlasInt) """
def ctrcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, rcond: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctrevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, t: complex64, ldt: BlasInt, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: complex64, rwork: float32, info: BlasInt) """
def ctrevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctrexc(compq: uint8, n: BlasInt, t: complex64, ldt: BlasInt, q: complex64, ldq: BlasInt, ifst: BlasInt, ilst: BlasInt, info: BlasInt) """
def ctrexc(compq: ScalarOrArrayU8, n: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctrmm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt) """
def ctrmm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" ctrmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt) """
def ctrmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" ctrrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, x: complex64, ldx: BlasInt, ferr: float32, berr: float32, work: complex64, rwork: float32, info: BlasInt) """
def ctrrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, x: ScalarOrArrayC64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArrayC64, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctrsen(job: uint8, compq: uint8, select: bool, n: BlasInt, t: complex64, ldt: BlasInt, q: complex64, ldq: BlasInt, w: complex64, m: BlasInt, s: float32, sep: float32, work: complex64, lwork: BlasInt, info: BlasInt) """
def ctrsen(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, w: ScalarOrArrayC64, m: ScalarOrArrayInt, s: ScalarOrArray32, sep: ScalarOrArray32, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctrsm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: complex64, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt) """
def ctrsm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC64, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt) -> None: ...

""" ctrsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, t: complex64, ldt: BlasInt, vl: complex64, ldvl: BlasInt, vr: complex64, ldvr: BlasInt, s: float32, sep: float32, mm: BlasInt, m: BlasInt, work: complex64, ldwork: BlasInt, rwork: float32, info: BlasInt) """
def ctrsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArrayC64, ldt: ScalarOrArrayInt, vl: ScalarOrArrayC64, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC64, ldvr: ScalarOrArrayInt, s: ScalarOrArray32, sep: ScalarOrArray32, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC64, ldwork: ScalarOrArrayInt, rwork: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctrsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: complex64, lda: BlasInt, x: complex64, incx: BlasInt) """
def ctrsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> None: ...

""" ctrsyl(trana: uint8, tranb: uint8, isgn: BlasInt, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, c: complex64, ldc: BlasInt, scale: float32, info: BlasInt) """
def ctrsyl(trana: ScalarOrArrayU8, tranb: ScalarOrArrayU8, isgn: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, scale: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ctrti2(uplo: uint8, diag: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def ctrti2(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctrtri(uplo: uint8, diag: uint8, n: BlasInt, a: complex64, lda: BlasInt, info: BlasInt) """
def ctrtri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctrtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: complex64, lda: BlasInt, b: complex64, ldb: BlasInt, info: BlasInt) """
def ctrtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, b: ScalarOrArrayC64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ctrttf(transr: uint8, uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, arf: complex64, info: BlasInt) """
def ctrttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, arf: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctrttp(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, ap: complex64, info: BlasInt) """
def ctrttp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, ap: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" ctzrzf(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def ctzrzf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunbdb(trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: complex64, ldx11: BlasInt, x12: complex64, ldx12: BlasInt, x21: complex64, ldx21: BlasInt, x22: complex64, ldx22: BlasInt, theta: float32, phi: float32, taup1: complex64, taup2: complex64, tauq1: complex64, tauq2: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunbdb(trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArrayC64, ldx11: ScalarOrArrayInt, x12: ScalarOrArrayC64, ldx12: ScalarOrArrayInt, x21: ScalarOrArrayC64, ldx21: ScalarOrArrayInt, x22: ScalarOrArrayC64, ldx22: ScalarOrArrayInt, theta: ScalarOrArray32, phi: ScalarOrArray32, taup1: ScalarOrArrayC64, taup2: ScalarOrArrayC64, tauq1: ScalarOrArrayC64, tauq2: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cuncsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: complex64, ldx11: BlasInt, x12: complex64, ldx12: BlasInt, x21: complex64, ldx21: BlasInt, x22: complex64, ldx22: BlasInt, theta: float32, u1: complex64, ldu1: BlasInt, u2: complex64, ldu2: BlasInt, v1t: complex64, ldv1t: BlasInt, v2t: complex64, ldv2t: BlasInt, work: complex64, lwork: BlasInt, rwork: float32, lrwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def cuncsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArrayC64, ldx11: ScalarOrArrayInt, x12: ScalarOrArrayC64, ldx12: ScalarOrArrayInt, x21: ScalarOrArrayC64, ldx21: ScalarOrArrayInt, x22: ScalarOrArrayC64, ldx22: ScalarOrArrayInt, theta: ScalarOrArray32, u1: ScalarOrArrayC64, ldu1: ScalarOrArrayInt, u2: ScalarOrArrayC64, ldu2: ScalarOrArrayInt, v1t: ScalarOrArrayC64, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArrayC64, ldv2t: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, rwork: ScalarOrArray32, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cung2l(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cung2l(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cung2r(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cung2r(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cungbr(vect: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cungbr(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunghr(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunghr(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cungl2(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cungl2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cunglq(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunglq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cungql(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cungql(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cungqr(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cungqr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cungr2(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, info: BlasInt) """
def cungr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cungrq(m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cungrq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cungtr(uplo: uint8, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, work: complex64, lwork: BlasInt, info: BlasInt) """
def cungtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunm2l(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cunm2l(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cunm2r(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cunm2r(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cunmbr(vect: uint8, side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmbr(vect: ScalarOrArrayU8, side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunmhr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmhr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunml2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cunml2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cunmlq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmlq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunmql(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmql(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunmqr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmqr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunmr2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cunmr2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cunmr3(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cunmr3(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cunmrq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmrq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunmrz(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmrz(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cunmtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, lwork: BlasInt, info: BlasInt) """
def cunmtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" cupgtr(uplo: uint8, n: BlasInt, ap: complex64, tau: complex64, q: complex64, ldq: BlasInt, work: complex64, info: BlasInt) """
def cupgtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, tau: ScalarOrArrayC64, q: ScalarOrArrayC64, ldq: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" cupmtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, ap: complex64, tau: complex64, c: complex64, ldc: BlasInt, work: complex64, info: BlasInt) """
def cupmtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ap: ScalarOrArrayC64, tau: ScalarOrArrayC64, c: ScalarOrArrayC64, ldc: ScalarOrArrayInt, work: ScalarOrArrayC64, info: ScalarOrArrayInt) -> None: ...

""" dasum(n: BlasInt, dx: float64, incx: BlasInt) """
def dasum(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt) -> np.float64: ...

""" daxpy(n: BlasInt, da: float64, dx: float64, incx: BlasInt, dy: float64, incy: BlasInt) """
def daxpy(n: ScalarOrArrayInt, da: ScalarOrArray64, dx: ScalarOrArray64, incx: ScalarOrArrayInt, dy: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dbbcsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, m: BlasInt, p: BlasInt, q: BlasInt, theta: float64, phi: float64, u1: float64, ldu1: BlasInt, u2: float64, ldu2: BlasInt, v1t: float64, ldv1t: BlasInt, v2t: float64, ldv2t: BlasInt, b11d: float64, b11e: float64, b12d: float64, b12e: float64, b21d: float64, b21e: float64, b22d: float64, b22e: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dbbcsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, theta: ScalarOrArray64, phi: ScalarOrArray64, u1: ScalarOrArray64, ldu1: ScalarOrArrayInt, u2: ScalarOrArray64, ldu2: ScalarOrArrayInt, v1t: ScalarOrArray64, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArray64, ldv2t: ScalarOrArrayInt, b11d: ScalarOrArray64, b11e: ScalarOrArray64, b12d: ScalarOrArray64, b12e: ScalarOrArray64, b21d: ScalarOrArray64, b21e: ScalarOrArray64, b22d: ScalarOrArray64, b22e: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dbdsdc(uplo: uint8, compq: uint8, n: BlasInt, d: float64, e: float64, u: float64, ldu: BlasInt, vt: float64, ldvt: BlasInt, q: float64, iq: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dbdsdc(uplo: ScalarOrArrayU8, compq: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, q: ScalarOrArray64, iq: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dbdsqr(uplo: uint8, n: BlasInt, ncvt: BlasInt, nru: BlasInt, ncc: BlasInt, d: float64, e: float64, vt: float64, ldvt: BlasInt, u: float64, ldu: BlasInt, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dbdsqr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ncvt: ScalarOrArrayInt, nru: ScalarOrArrayInt, ncc: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, u: ScalarOrArray64, ldu: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dcabs1(z: complex128) """
def dcabs1(z: ScalarOrArrayC128) -> np.float64: ...

""" dcopy(n: BlasInt, dx: float64, incx: BlasInt, dy: float64, incy: BlasInt) """
def dcopy(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt, dy: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" ddisna(job: uint8, m: BlasInt, n: BlasInt, d: float64, sep: float64, info: BlasInt) """
def ddisna(job: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray64, sep: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ddot(n: BlasInt, dx: float64, incx: BlasInt, dy: float64, incy: BlasInt) """
def ddot(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt, dy: ScalarOrArray64, incy: ScalarOrArrayInt) -> np.float64: ...

""" dgbbrd(vect: uint8, m: BlasInt, n: BlasInt, ncc: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, d: float64, e: float64, q: float64, ldq: BlasInt, pt: float64, ldpt: BlasInt, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dgbbrd(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ncc: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, pt: ScalarOrArray64, ldpt: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgbcon(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, ipiv: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgbcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgbequ(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def dgbequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgbequb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def dgbequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgbmv(trans: uint8, m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, alpha: float64, a: float64, lda: BlasInt, x: float64, incx: BlasInt, beta: float64, y: float64, incy: BlasInt) """
def dgbmv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, beta: ScalarOrArray64, y: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dgbrfs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, afb: float64, ldafb: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgbrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, afb: ScalarOrArray64, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgbsv(n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dgbsv(n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgbsvx(fact: uint8, trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, afb: float64, ldafb: BlasInt, ipiv: BlasInt, equed: uint8, r: float64, c: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgbsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, afb: ScalarOrArray64, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray64, c: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgbtf2(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def dgbtf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgbtrf(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def dgbtrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgbtrs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dgbtrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgebak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float64, m: BlasInt, v: float64, ldv: BlasInt, info: BlasInt) """
def dgebak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray64, m: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgebal(job: uint8, n: BlasInt, a: float64, lda: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float64, info: BlasInt) """
def dgebal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgebd2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, d: float64, e: float64, tauq: float64, taup: float64, work: float64, info: BlasInt) """
def dgebd2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tauq: ScalarOrArray64, taup: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgebrd(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, d: float64, e: float64, tauq: float64, taup: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgebrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tauq: ScalarOrArray64, taup: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgecon(norm: uint8, n: BlasInt, a: float64, lda: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgecon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeequ(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def dgeequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgeequb(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def dgeequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgeev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: float64, lda: BlasInt, wr: float64, wi: float64, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgeev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: float64, lda: BlasInt, wr: float64, wi: float64, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float64, abnrm: float64, rconde: float64, rcondv: float64, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dgeevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray64, abnrm: ScalarOrArray64, rconde: ScalarOrArray64, rcondv: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgehd2(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dgehd2(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgehrd(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgehrd(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgejsv(joba: uint8, jobu: uint8, jobv: uint8, jobr: uint8, jobt: uint8, jobp: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, sva: float64, u: float64, ldu: BlasInt, v: float64, ldv: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dgejsv(joba: ScalarOrArrayU8, jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, jobr: ScalarOrArrayU8, jobt: ScalarOrArrayU8, jobp: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, sva: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgelq2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dgelq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgelqf(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgelqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgels(trans: uint8, m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgels(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgelsd(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, s: float64, rcond: float64, rank: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dgelsd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, s: ScalarOrArray64, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgelss(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, s: float64, rcond: float64, rank: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgelss(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, s: ScalarOrArray64, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgelsy(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, jpvt: BlasInt, rcond: float64, rank: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgelsy(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgemm(transa: uint8, transb: uint8, m: BlasInt, n: BlasInt, k: BlasInt, alpha: float64, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, beta: float64, c: float64, ldc: BlasInt) """
def dgemm(transa: ScalarOrArrayU8, transb: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt) -> None: ...

""" dgemqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, nb: BlasInt, v: float64, ldv: BlasInt, t: float64, ldt: BlasInt, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dgemqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgemv(trans: uint8, m: BlasInt, n: BlasInt, alpha: float64, a: float64, lda: BlasInt, x: float64, incx: BlasInt, beta: float64, y: float64, incy: BlasInt) """
def dgemv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, beta: ScalarOrArray64, y: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dgeql2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dgeql2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgeqlf(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgeqlf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeqp3(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, jpvt: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgeqp3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeqr2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dgeqr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgeqr2p(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dgeqr2p(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgeqrf(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgeqrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeqrfp(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgeqrfp(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeqrt(m: BlasInt, n: BlasInt, nb: BlasInt, a: float64, lda: BlasInt, t: float64, ldt: BlasInt, work: float64, info: BlasInt) """
def dgeqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgeqrt2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, t: float64, ldt: BlasInt, info: BlasInt) """
def dgeqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgeqrt3(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, t: float64, ldt: BlasInt, info: BlasInt) """
def dgeqrt3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dger(m: BlasInt, n: BlasInt, alpha: float64, x: float64, incx: BlasInt, y: float64, incy: BlasInt, a: float64, lda: BlasInt) """
def dger(m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, y: ScalarOrArray64, incy: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> None: ...

""" dgerfs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, af: float64, ldaf: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgerfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, af: ScalarOrArray64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgerq2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dgerq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dgerqf(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgerqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgesc2(n: BlasInt, a: float64, lda: BlasInt, rhs: float64, ipiv: BlasInt, jpiv: BlasInt, scale: float64) """
def dgesc2(n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, rhs: ScalarOrArray64, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, scale: ScalarOrArray64) -> None: ...

""" dgesdd(jobz: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, s: float64, u: float64, ldu: BlasInt, vt: float64, ldvt: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dgesdd(jobz: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, s: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgesv(n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dgesv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgesvd(jobu: uint8, jobvt: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, s: float64, u: float64, ldu: BlasInt, vt: float64, ldvt: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgesvd(jobu: ScalarOrArrayU8, jobvt: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, s: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgesvj(joba: uint8, jobu: uint8, jobv: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, sva: float64, mv: BlasInt, v: float64, ldv: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgesvj(joba: ScalarOrArrayU8, jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, sva: ScalarOrArray64, mv: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgesvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, af: float64, ldaf: BlasInt, ipiv: BlasInt, equed: uint8, r: float64, c: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgesvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, af: ScalarOrArray64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray64, c: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgetc2(n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, jpiv: BlasInt, info: BlasInt) """
def dgetc2(n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgetf2(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def dgetf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgetrf(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def dgetrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgetri(n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgetri(n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgetrs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dgetrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dggbak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float64, rscale: float64, m: BlasInt, v: float64, ldv: BlasInt, info: BlasInt) """
def dggbak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray64, rscale: ScalarOrArray64, m: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dggbal(job: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float64, rscale: float64, work: float64, info: BlasInt) """
def dggbal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray64, rscale: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dggev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, alphar: float64, alphai: float64, beta: float64, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dggev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, alphar: ScalarOrArray64, alphai: ScalarOrArray64, beta: ScalarOrArray64, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dggevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, alphar: float64, alphai: float64, beta: float64, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float64, rscale: float64, abnrm: float64, bbnrm: float64, rconde: float64, rcondv: float64, work: float64, lwork: BlasInt, iwork: BlasInt, bwork: bool, info: BlasInt) """
def dggevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, alphar: ScalarOrArray64, alphai: ScalarOrArray64, beta: ScalarOrArray64, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray64, rscale: ScalarOrArray64, abnrm: ScalarOrArray64, bbnrm: ScalarOrArray64, rconde: ScalarOrArray64, rcondv: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, bwork: ScalarOrArrayBool, info: ScalarOrArrayInt) -> None: ...

""" dggglm(n: BlasInt, m: BlasInt, p: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, d: float64, x: float64, y: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dggglm(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, d: ScalarOrArray64, x: ScalarOrArray64, y: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgghrd(compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, q: float64, ldq: BlasInt, z: float64, ldz: BlasInt, info: BlasInt) """
def dgghrd(compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgglse(m: BlasInt, n: BlasInt, p: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, c: float64, d: float64, x: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dgglse(m: ScalarOrArrayInt, n: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, c: ScalarOrArray64, d: ScalarOrArray64, x: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dggqrf(n: BlasInt, m: BlasInt, p: BlasInt, a: float64, lda: BlasInt, taua: float64, b: float64, ldb: BlasInt, taub: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dggqrf(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, taua: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, taub: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dggrqf(m: BlasInt, p: BlasInt, n: BlasInt, a: float64, lda: BlasInt, taua: float64, b: float64, ldb: BlasInt, taub: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dggrqf(m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, taua: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, taub: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgsvj0(jobv: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, d: float64, sva: float64, mv: BlasInt, v: float64, ldv: BlasInt, eps: float64, sfmin: float64, tol: float64, nsweep: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgsvj0(jobv: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, sva: ScalarOrArray64, mv: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, eps: ScalarOrArray64, sfmin: ScalarOrArray64, tol: ScalarOrArray64, nsweep: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgsvj1(jobv: uint8, m: BlasInt, n: BlasInt, n1: BlasInt, a: float64, lda: BlasInt, d: float64, sva: float64, mv: BlasInt, v: float64, ldv: BlasInt, eps: float64, sfmin: float64, tol: float64, nsweep: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dgsvj1(jobv: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, n1: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, sva: ScalarOrArray64, mv: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, eps: ScalarOrArray64, sfmin: ScalarOrArray64, tol: ScalarOrArray64, nsweep: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgtcon(norm: uint8, n: BlasInt, dl: float64, d: float64, du: float64, du2: float64, ipiv: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgtcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, du2: ScalarOrArray64, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgtrfs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: float64, d: float64, du: float64, dlf: float64, df: float64, duf: float64, du2: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgtrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, dlf: ScalarOrArray64, df: ScalarOrArray64, duf: ScalarOrArray64, du2: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgtsv(n: BlasInt, nrhs: BlasInt, dl: float64, d: float64, du: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dgtsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgtsvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, dl: float64, d: float64, du: float64, dlf: float64, df: float64, duf: float64, du2: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dgtsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, dlf: ScalarOrArray64, df: ScalarOrArray64, duf: ScalarOrArray64, du2: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgttrf(n: BlasInt, dl: float64, d: float64, du: float64, du2: float64, ipiv: BlasInt, info: BlasInt) """
def dgttrf(n: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, du2: ScalarOrArray64, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgttrs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: float64, d: float64, du: float64, du2: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dgttrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, du2: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dgtts2(itrans: BlasInt, n: BlasInt, nrhs: BlasInt, dl: float64, d: float64, du: float64, du2: float64, ipiv: BlasInt, b: float64, ldb: BlasInt) """
def dgtts2(itrans: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, du2: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" dhgeqz(job: uint8, compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float64, ldh: BlasInt, t: float64, ldt: BlasInt, alphar: float64, alphai: float64, beta: float64, q: float64, ldq: BlasInt, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dhgeqz(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, alphar: ScalarOrArray64, alphai: ScalarOrArray64, beta: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dhsein(side: uint8, eigsrc: uint8, initv: uint8, select: bool, n: BlasInt, h: float64, ldh: BlasInt, wr: float64, wi: float64, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: float64, ifaill: BlasInt, ifailr: BlasInt, info: BlasInt) """
def dhsein(side: ScalarOrArrayU8, eigsrc: ScalarOrArrayU8, initv: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray64, ifaill: ScalarOrArrayInt, ifailr: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dhseqr(job: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float64, ldh: BlasInt, wr: float64, wi: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dhseqr(job: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" disnan(din: float64) """
def disnan(din: ScalarOrArray64) -> bool: ...

""" dlabad(small: float64, large: float64) """
def dlabad(small: ScalarOrArray64, large: ScalarOrArray64) -> None: ...

""" dlabrd(m: BlasInt, n: BlasInt, nb: BlasInt, a: float64, lda: BlasInt, d: float64, e: float64, tauq: float64, taup: float64, x: float64, ldx: BlasInt, y: float64, ldy: BlasInt) """
def dlabrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tauq: ScalarOrArray64, taup: ScalarOrArray64, x: ScalarOrArray64, ldx: ScalarOrArrayInt, y: ScalarOrArray64, ldy: ScalarOrArrayInt) -> None: ...

""" dlacn2(n: BlasInt, v: float64, x: float64, isgn: BlasInt, est: float64, kase: BlasInt, isave: BlasInt) """
def dlacn2(n: ScalarOrArrayInt, v: ScalarOrArray64, x: ScalarOrArray64, isgn: ScalarOrArrayInt, est: ScalarOrArray64, kase: ScalarOrArrayInt, isave: ScalarOrArrayInt) -> None: ...

""" dlacon(n: BlasInt, v: float64, x: float64, isgn: BlasInt, est: float64, kase: BlasInt) """
def dlacon(n: ScalarOrArrayInt, v: ScalarOrArray64, x: ScalarOrArray64, isgn: ScalarOrArrayInt, est: ScalarOrArray64, kase: ScalarOrArrayInt) -> None: ...

""" dlacpy(uplo: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt) """
def dlacpy(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" dladiv(a: float64, b: float64, c: float64, d: float64, p: float64, q: float64) """
def dladiv(a: ScalarOrArray64, b: ScalarOrArray64, c: ScalarOrArray64, d: ScalarOrArray64, p: ScalarOrArray64, q: ScalarOrArray64) -> None: ...

""" dlae2(a: float64, b: float64, c: float64, rt1: float64, rt2: float64) """
def dlae2(a: ScalarOrArray64, b: ScalarOrArray64, c: ScalarOrArray64, rt1: ScalarOrArray64, rt2: ScalarOrArray64) -> None: ...

""" dlaebz(ijob: BlasInt, nitmax: BlasInt, n: BlasInt, mmax: BlasInt, minp: BlasInt, nbmin: BlasInt, abstol: float64, reltol: float64, pivmin: float64, d: float64, e: float64, e2: float64, nval: BlasInt, ab: float64, c: float64, mout: BlasInt, nab: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dlaebz(ijob: ScalarOrArrayInt, nitmax: ScalarOrArrayInt, n: ScalarOrArrayInt, mmax: ScalarOrArrayInt, minp: ScalarOrArrayInt, nbmin: ScalarOrArrayInt, abstol: ScalarOrArray64, reltol: ScalarOrArray64, pivmin: ScalarOrArray64, d: ScalarOrArray64, e: ScalarOrArray64, e2: ScalarOrArray64, nval: ScalarOrArrayInt, ab: ScalarOrArray64, c: ScalarOrArray64, mout: ScalarOrArrayInt, nab: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaed0(icompq: BlasInt, qsiz: BlasInt, n: BlasInt, d: float64, e: float64, q: float64, ldq: BlasInt, qstore: float64, ldqs: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dlaed0(icompq: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, qstore: ScalarOrArray64, ldqs: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaed1(n: BlasInt, d: float64, q: float64, ldq: BlasInt, indxq: BlasInt, rho: float64, cutpnt: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dlaed1(n: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray64, cutpnt: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaed2(k: BlasInt, n: BlasInt, n1: BlasInt, d: float64, q: float64, ldq: BlasInt, indxq: BlasInt, rho: float64, z: float64, dlamda: float64, w: float64, q2: float64, indx: BlasInt, indxc: BlasInt, indxp: BlasInt, coltyp: BlasInt, info: BlasInt) """
def dlaed2(k: ScalarOrArrayInt, n: ScalarOrArrayInt, n1: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray64, z: ScalarOrArray64, dlamda: ScalarOrArray64, w: ScalarOrArray64, q2: ScalarOrArray64, indx: ScalarOrArrayInt, indxc: ScalarOrArrayInt, indxp: ScalarOrArrayInt, coltyp: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaed3(k: BlasInt, n: BlasInt, n1: BlasInt, d: float64, q: float64, ldq: BlasInt, rho: float64, dlamda: float64, q2: float64, indx: BlasInt, ctot: BlasInt, w: float64, s: float64, info: BlasInt) """
def dlaed3(k: ScalarOrArrayInt, n: ScalarOrArrayInt, n1: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, rho: ScalarOrArray64, dlamda: ScalarOrArray64, q2: ScalarOrArray64, indx: ScalarOrArrayInt, ctot: ScalarOrArrayInt, w: ScalarOrArray64, s: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlaed4(n: BlasInt, i: BlasInt, d: float64, z: float64, delta: float64, rho: float64, dlam: float64, info: BlasInt) """
def dlaed4(n: ScalarOrArrayInt, i: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, delta: ScalarOrArray64, rho: ScalarOrArray64, dlam: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlaed5(i: BlasInt, d: float64, z: float64, delta: float64, rho: float64, dlam: float64) """
def dlaed5(i: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, delta: ScalarOrArray64, rho: ScalarOrArray64, dlam: ScalarOrArray64) -> None: ...

""" dlaed6(kniter: BlasInt, orgati: bool, rho: float64, d: float64, z: float64, finit: float64, tau: float64, info: BlasInt) """
def dlaed6(kniter: ScalarOrArrayInt, orgati: ScalarOrArrayBool, rho: ScalarOrArray64, d: ScalarOrArray64, z: ScalarOrArray64, finit: ScalarOrArray64, tau: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlaed7(icompq: BlasInt, n: BlasInt, qsiz: BlasInt, tlvls: BlasInt, curlvl: BlasInt, curpbm: BlasInt, d: float64, q: float64, ldq: BlasInt, indxq: BlasInt, rho: float64, cutpnt: BlasInt, qstore: float64, qptr: BlasInt, prmptr: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dlaed7(icompq: ScalarOrArrayInt, n: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, tlvls: ScalarOrArrayInt, curlvl: ScalarOrArrayInt, curpbm: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray64, cutpnt: ScalarOrArrayInt, qstore: ScalarOrArray64, qptr: ScalarOrArrayInt, prmptr: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaed8(icompq: BlasInt, k: BlasInt, n: BlasInt, qsiz: BlasInt, d: float64, q: float64, ldq: BlasInt, indxq: BlasInt, rho: float64, cutpnt: BlasInt, z: float64, dlamda: float64, q2: float64, ldq2: BlasInt, w: float64, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float64, indxp: BlasInt, indx: BlasInt, info: BlasInt) """
def dlaed8(icompq: ScalarOrArrayInt, k: ScalarOrArrayInt, n: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray64, cutpnt: ScalarOrArrayInt, z: ScalarOrArray64, dlamda: ScalarOrArray64, q2: ScalarOrArray64, ldq2: ScalarOrArrayInt, w: ScalarOrArray64, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray64, indxp: ScalarOrArrayInt, indx: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaed9(k: BlasInt, kstart: BlasInt, kstop: BlasInt, n: BlasInt, d: float64, q: float64, ldq: BlasInt, rho: float64, dlamda: float64, w: float64, s: float64, lds: BlasInt, info: BlasInt) """
def dlaed9(k: ScalarOrArrayInt, kstart: ScalarOrArrayInt, kstop: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, rho: ScalarOrArray64, dlamda: ScalarOrArray64, w: ScalarOrArray64, s: ScalarOrArray64, lds: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaeda(n: BlasInt, tlvls: BlasInt, curlvl: BlasInt, curpbm: BlasInt, prmptr: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float64, q: float64, qptr: BlasInt, z: float64, ztemp: float64, info: BlasInt) """
def dlaeda(n: ScalarOrArrayInt, tlvls: ScalarOrArrayInt, curlvl: ScalarOrArrayInt, curpbm: ScalarOrArrayInt, prmptr: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray64, q: ScalarOrArray64, qptr: ScalarOrArrayInt, z: ScalarOrArray64, ztemp: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlaein(rightv: bool, noinit: bool, n: BlasInt, h: float64, ldh: BlasInt, wr: float64, wi: float64, vr: float64, vi: float64, b: float64, ldb: BlasInt, work: float64, eps3: float64, smlnum: float64, bignum: float64, info: BlasInt) """
def dlaein(rightv: ScalarOrArrayBool, noinit: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, vr: ScalarOrArray64, vi: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, work: ScalarOrArray64, eps3: ScalarOrArray64, smlnum: ScalarOrArray64, bignum: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlaev2(a: float64, b: float64, c: float64, rt1: float64, rt2: float64, cs1: float64, sn1: float64) """
def dlaev2(a: ScalarOrArray64, b: ScalarOrArray64, c: ScalarOrArray64, rt1: ScalarOrArray64, rt2: ScalarOrArray64, cs1: ScalarOrArray64, sn1: ScalarOrArray64) -> None: ...

""" dlaexc(wantq: bool, n: BlasInt, t: float64, ldt: BlasInt, q: float64, ldq: BlasInt, j1: BlasInt, n1: BlasInt, n2: BlasInt, work: float64, info: BlasInt) """
def dlaexc(wantq: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, j1: ScalarOrArrayInt, n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlag2(a: float64, lda: BlasInt, b: float64, ldb: BlasInt, safmin: float64, scale1: float64, scale2: float64, wr1: float64, wr2: float64, wi: float64) """
def dlag2(a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, safmin: ScalarOrArray64, scale1: ScalarOrArray64, scale2: ScalarOrArray64, wr1: ScalarOrArray64, wr2: ScalarOrArray64, wi: ScalarOrArray64) -> None: ...

""" dlag2s(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, sa: float32, ldsa: BlasInt, info: BlasInt) """
def dlag2s(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, sa: ScalarOrArray32, ldsa: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlags2(upper: bool, a1: float64, a2: float64, a3: float64, b1: float64, b2: float64, b3: float64, csu: float64, snu: float64, csv: float64, snv: float64, csq: float64, snq: float64) """
def dlags2(upper: ScalarOrArrayBool, a1: ScalarOrArray64, a2: ScalarOrArray64, a3: ScalarOrArray64, b1: ScalarOrArray64, b2: ScalarOrArray64, b3: ScalarOrArray64, csu: ScalarOrArray64, snu: ScalarOrArray64, csv: ScalarOrArray64, snv: ScalarOrArray64, csq: ScalarOrArray64, snq: ScalarOrArray64) -> None: ...

""" dlagtf(n: BlasInt, a: float64, lambda_: float64, b: float64, c: float64, tol: float64, d: float64, in_: BlasInt, info: BlasInt) """
def dlagtf(n: ScalarOrArrayInt, a: ScalarOrArray64, lambda_: ScalarOrArray64, b: ScalarOrArray64, c: ScalarOrArray64, tol: ScalarOrArray64, d: ScalarOrArray64, in_: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlagtm(trans: uint8, n: BlasInt, nrhs: BlasInt, alpha: float64, dl: float64, d: float64, du: float64, x: float64, ldx: BlasInt, beta: float64, b: float64, ldb: BlasInt) """
def dlagtm(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, alpha: ScalarOrArray64, dl: ScalarOrArray64, d: ScalarOrArray64, du: ScalarOrArray64, x: ScalarOrArray64, ldx: ScalarOrArrayInt, beta: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" dlagts(job: BlasInt, n: BlasInt, a: float64, b: float64, c: float64, d: float64, in_: BlasInt, y: float64, tol: float64, info: BlasInt) """
def dlagts(job: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, b: ScalarOrArray64, c: ScalarOrArray64, d: ScalarOrArray64, in_: ScalarOrArrayInt, y: ScalarOrArray64, tol: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlagv2(a: float64, lda: BlasInt, b: float64, ldb: BlasInt, alphar: float64, alphai: float64, beta: float64, csl: float64, snl: float64, csr: float64, snr: float64) """
def dlagv2(a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, alphar: ScalarOrArray64, alphai: ScalarOrArray64, beta: ScalarOrArray64, csl: ScalarOrArray64, snl: ScalarOrArray64, csr: ScalarOrArray64, snr: ScalarOrArray64) -> None: ...

""" dlahqr(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float64, ldh: BlasInt, wr: float64, wi: float64, iloz: BlasInt, ihiz: BlasInt, z: float64, ldz: BlasInt, info: BlasInt) """
def dlahqr(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlahr2(n: BlasInt, k: BlasInt, nb: BlasInt, a: float64, lda: BlasInt, tau: float64, t: float64, ldt: BlasInt, y: float64, ldy: BlasInt) """
def dlahr2(n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, t: ScalarOrArray64, ldt: ScalarOrArrayInt, y: ScalarOrArray64, ldy: ScalarOrArrayInt) -> None: ...

""" dlaic1(job: BlasInt, j: BlasInt, x: float64, sest: float64, w: float64, gamma: float64, sestpr: float64, s: float64, c: float64) """
def dlaic1(job: ScalarOrArrayInt, j: ScalarOrArrayInt, x: ScalarOrArray64, sest: ScalarOrArray64, w: ScalarOrArray64, gamma: ScalarOrArray64, sestpr: ScalarOrArray64, s: ScalarOrArray64, c: ScalarOrArray64) -> None: ...

""" dlaln2(ltrans: bool, na: BlasInt, nw: BlasInt, smin: float64, ca: float64, a: float64, lda: BlasInt, d1: float64, d2: float64, b: float64, ldb: BlasInt, wr: float64, wi: float64, x: float64, ldx: BlasInt, scale: float64, xnorm: float64, info: BlasInt) """
def dlaln2(ltrans: ScalarOrArrayBool, na: ScalarOrArrayInt, nw: ScalarOrArrayInt, smin: ScalarOrArray64, ca: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, d1: ScalarOrArray64, d2: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, x: ScalarOrArray64, ldx: ScalarOrArrayInt, scale: ScalarOrArray64, xnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlals0(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, nrhs: BlasInt, b: float64, ldb: BlasInt, bx: float64, ldbx: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float64, ldgnum: BlasInt, poles: float64, difl: float64, difr: float64, z: float64, k: BlasInt, c: float64, s: float64, work: float64, info: BlasInt) """
def dlals0(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, bx: ScalarOrArray64, ldbx: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray64, ldgnum: ScalarOrArrayInt, poles: ScalarOrArray64, difl: ScalarOrArray64, difr: ScalarOrArray64, z: ScalarOrArray64, k: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlalsa(icompq: BlasInt, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, b: float64, ldb: BlasInt, bx: float64, ldbx: BlasInt, u: float64, ldu: BlasInt, vt: float64, k: BlasInt, difl: float64, difr: float64, z: float64, poles: float64, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, perm: BlasInt, givnum: float64, c: float64, s: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dlalsa(icompq: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, bx: ScalarOrArray64, ldbx: ScalarOrArrayInt, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, k: ScalarOrArrayInt, difl: ScalarOrArray64, difr: ScalarOrArray64, z: ScalarOrArray64, poles: ScalarOrArray64, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, perm: ScalarOrArrayInt, givnum: ScalarOrArray64, c: ScalarOrArray64, s: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlalsd(uplo: uint8, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, d: float64, e: float64, b: float64, ldb: BlasInt, rcond: float64, rank: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dlalsd(uplo: ScalarOrArrayU8, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlamch(cmach: uint8) """
def dlamch(cmach: ScalarOrArrayU8) -> np.float64: ...

""" dlamrg(n1: BlasInt, n2: BlasInt, a: float64, dtrd1: BlasInt, dtrd2: BlasInt, index_bn: BlasInt) """
def dlamrg(n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, a: ScalarOrArray64, dtrd1: ScalarOrArrayInt, dtrd2: ScalarOrArrayInt, index_bn: ScalarOrArrayInt) -> None: ...

""" dlaneg(n: BlasInt, d: float64, lld: float64, sigma: float64, pivmin: float64, r: BlasInt) """
def dlaneg(n: ScalarOrArrayInt, d: ScalarOrArray64, lld: ScalarOrArray64, sigma: ScalarOrArray64, pivmin: ScalarOrArray64, r: ScalarOrArrayInt) -> BlasInt: ...

""" dlangb(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, work: float64) """
def dlangb(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlange(norm: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, work: float64) """
def dlange(norm: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlangt(norm: uint8, n: BlasInt, dl: float64, d_: float64, du: float64) """
def dlangt(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArray64, d_: ScalarOrArray64, du: ScalarOrArray64) -> np.float64: ...

""" dlanhs(norm: uint8, n: BlasInt, a: float64, lda: BlasInt, work: float64) """
def dlanhs(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlansb(norm: uint8, uplo: uint8, n: BlasInt, k: BlasInt, ab: float64, ldab: BlasInt, work: float64) """
def dlansb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlansf(norm: uint8, transr: uint8, uplo: uint8, n: BlasInt, a: float64, work: float64) """
def dlansf(norm: ScalarOrArrayU8, transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, work: ScalarOrArray64) -> np.float64: ...

""" dlansp(norm: uint8, uplo: uint8, n: BlasInt, ap: float64, work: float64) """
def dlansp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, work: ScalarOrArray64) -> np.float64: ...

""" dlanst(norm: uint8, n: BlasInt, d_: float64, e: float64) """
def dlanst(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, d_: ScalarOrArray64, e: ScalarOrArray64) -> np.float64: ...

""" dlansy(norm: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, work: float64) """
def dlansy(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlantb(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, k: BlasInt, ab: float64, ldab: BlasInt, work: float64) """
def dlantb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlantp(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: float64, work: float64) """
def dlantp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, work: ScalarOrArray64) -> np.float64: ...

""" dlantr(norm: uint8, uplo: uint8, diag: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, work: float64) """
def dlantr(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" dlanv2(a: float64, b: float64, c: float64, d: float64, rt1r: float64, rt1i: float64, rt2r: float64, rt2i: float64, cs: float64, sn: float64) """
def dlanv2(a: ScalarOrArray64, b: ScalarOrArray64, c: ScalarOrArray64, d: ScalarOrArray64, rt1r: ScalarOrArray64, rt1i: ScalarOrArray64, rt2r: ScalarOrArray64, rt2i: ScalarOrArray64, cs: ScalarOrArray64, sn: ScalarOrArray64) -> None: ...

""" dlapll(n: BlasInt, x: float64, incx: BlasInt, y: float64, incy: BlasInt, ssmin: float64) """
def dlapll(n: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, y: ScalarOrArray64, incy: ScalarOrArrayInt, ssmin: ScalarOrArray64) -> None: ...

""" dlapmr(forwrd: bool, m: BlasInt, n: BlasInt, x: float64, ldx: BlasInt, k: BlasInt) """
def dlapmr(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" dlapmt(forwrd: bool, m: BlasInt, n: BlasInt, x: float64, ldx: BlasInt, k: BlasInt) """
def dlapmt(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" dlapy2(x: float64, y: float64) """
def dlapy2(x: ScalarOrArray64, y: ScalarOrArray64) -> np.float64: ...

""" dlapy3(x: float64, y: float64, z: float64) """
def dlapy3(x: ScalarOrArray64, y: ScalarOrArray64, z: ScalarOrArray64) -> np.float64: ...

""" dlaqgb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float64, ldab: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, equed: uint8) """
def dlaqgb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" dlaqge(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, equed: uint8) """
def dlaqge(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" dlaqp2(m: BlasInt, n: BlasInt, offset: BlasInt, a: float64, lda: BlasInt, jpvt: BlasInt, tau: float64, vn1: float64, vn2: float64, work: float64) """
def dlaqp2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArray64, vn1: ScalarOrArray64, vn2: ScalarOrArray64, work: ScalarOrArray64) -> None: ...

""" dlaqps(m: BlasInt, n: BlasInt, offset: BlasInt, nb: BlasInt, kb: BlasInt, a: float64, lda: BlasInt, jpvt: BlasInt, tau: float64, vn1: float64, vn2: float64, auxv: float64, f: float64, ldf: BlasInt) """
def dlaqps(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArray64, vn1: ScalarOrArray64, vn2: ScalarOrArray64, auxv: ScalarOrArray64, f: ScalarOrArray64, ldf: ScalarOrArrayInt) -> None: ...

""" dlaqr0(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float64, ldh: BlasInt, wr: float64, wi: float64, iloz: BlasInt, ihiz: BlasInt, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dlaqr0(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaqr1(n: BlasInt, h: float64, ldh: BlasInt, sr1: float64, si1: float64, sr2: float64, si2: float64, v: float64) """
def dlaqr1(n: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, sr1: ScalarOrArray64, si1: ScalarOrArray64, sr2: ScalarOrArray64, si2: ScalarOrArray64, v: ScalarOrArray64) -> None: ...

""" dlaqr2(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: float64, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: float64, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sr: float64, si: float64, v: float64, ldv: BlasInt, nh: BlasInt, t: float64, ldt: BlasInt, nv: BlasInt, wv: float64, ldwv: BlasInt, work: float64, lwork: BlasInt) """
def dlaqr2(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sr: ScalarOrArray64, si: ScalarOrArray64, v: ScalarOrArray64, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArray64, ldwv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt) -> None: ...

""" dlaqr3(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: float64, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: float64, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sr: float64, si: float64, v: float64, ldv: BlasInt, nh: BlasInt, t: float64, ldt: BlasInt, nv: BlasInt, wv: float64, ldwv: BlasInt, work: float64, lwork: BlasInt) """
def dlaqr3(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sr: ScalarOrArray64, si: ScalarOrArray64, v: ScalarOrArray64, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArray64, ldwv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt) -> None: ...

""" dlaqr4(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float64, ldh: BlasInt, wr: float64, wi: float64, iloz: BlasInt, ihiz: BlasInt, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dlaqr4(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray64, ldh: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlaqr5(wantt: bool, wantz: bool, kacc22: BlasInt, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nshfts: BlasInt, sr: float64, si: float64, h: float64, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: float64, ldz: BlasInt, v: float64, ldv: BlasInt, u: float64, ldu: BlasInt, nv: BlasInt, wv: float64, ldwv: BlasInt, nh: BlasInt, wh: float64, ldwh: BlasInt) """
def dlaqr5(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, kacc22: ScalarOrArrayInt, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nshfts: ScalarOrArrayInt, sr: ScalarOrArray64, si: ScalarOrArray64, h: ScalarOrArray64, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, u: ScalarOrArray64, ldu: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArray64, ldwv: ScalarOrArrayInt, nh: ScalarOrArrayInt, wh: ScalarOrArray64, ldwh: ScalarOrArrayInt) -> None: ...

""" dlaqsb(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, s: float64, scond: float64, amax: float64, equed: uint8) """
def dlaqsb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" dlaqsp(uplo: uint8, n: BlasInt, ap: float64, s: float64, scond: float64, amax: float64, equed: uint8) """
def dlaqsp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" dlaqsy(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, s: float64, scond: float64, amax: float64, equed: uint8) """
def dlaqsy(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" dlaqtr(ltran: bool, lreal: bool, n: BlasInt, t: float64, ldt: BlasInt, b: float64, w: float64, scale: float64, x: float64, work: float64, info: BlasInt) """
def dlaqtr(ltran: ScalarOrArrayBool, lreal: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, b: ScalarOrArray64, w: ScalarOrArray64, scale: ScalarOrArray64, x: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlar1v(n: BlasInt, b1: BlasInt, bn: BlasInt, lambda_: float64, d: float64, l: float64, ld: float64, lld: float64, pivmin: float64, gaptol: float64, z: float64, wantnc: bool, negcnt: BlasInt, ztz: float64, mingma: float64, r: BlasInt, isuppz: BlasInt, nrminv: float64, resid: float64, rqcorr: float64, work: float64) """
def dlar1v(n: ScalarOrArrayInt, b1: ScalarOrArrayInt, bn: ScalarOrArrayInt, lambda_: ScalarOrArray64, d: ScalarOrArray64, l: ScalarOrArray64, ld: ScalarOrArray64, lld: ScalarOrArray64, pivmin: ScalarOrArray64, gaptol: ScalarOrArray64, z: ScalarOrArray64, wantnc: ScalarOrArrayBool, negcnt: ScalarOrArrayInt, ztz: ScalarOrArray64, mingma: ScalarOrArray64, r: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, nrminv: ScalarOrArray64, resid: ScalarOrArray64, rqcorr: ScalarOrArray64, work: ScalarOrArray64) -> None: ...

""" dlar2v(n: BlasInt, x: float64, y: float64, z: float64, incx: BlasInt, c: float64, s: float64, incc: BlasInt) """
def dlar2v(n: ScalarOrArrayInt, x: ScalarOrArray64, y: ScalarOrArray64, z: ScalarOrArray64, incx: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, incc: ScalarOrArrayInt) -> None: ...

""" dlarf(side: uint8, m: BlasInt, n: BlasInt, v: float64, incv: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64) """
def dlarf(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArray64, incv: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64) -> None: ...

""" dlarfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, v: float64, ldv: BlasInt, t: float64, ldt: BlasInt, c: float64, ldc: BlasInt, work: float64, ldwork: BlasInt) """
def dlarfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, ldwork: ScalarOrArrayInt) -> None: ...

""" dlarfg(n: BlasInt, alpha: float64, x: float64, incx: BlasInt, tau: float64) """
def dlarfg(n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, tau: ScalarOrArray64) -> None: ...

""" dlarfgp(n: BlasInt, alpha: float64, x: float64, incx: BlasInt, tau: float64) """
def dlarfgp(n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, tau: ScalarOrArray64) -> None: ...

""" dlarft(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: float64, ldv: BlasInt, tau: float64, t: float64, ldt: BlasInt) """
def dlarft(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, tau: ScalarOrArray64, t: ScalarOrArray64, ldt: ScalarOrArrayInt) -> None: ...

""" dlarfx(side: uint8, m: BlasInt, n: BlasInt, v: float64, tau: float64, c: float64, ldc: BlasInt, work: float64) """
def dlarfx(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArray64, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64) -> None: ...

""" dlargv(n: BlasInt, x: float64, incx: BlasInt, y: float64, incy: BlasInt, c: float64, incc: BlasInt) """
def dlargv(n: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, y: ScalarOrArray64, incy: ScalarOrArrayInt, c: ScalarOrArray64, incc: ScalarOrArrayInt) -> None: ...

""" dlarnv(idist: BlasInt, iseed: BlasInt, n: BlasInt, x: float64) """
def dlarnv(idist: ScalarOrArrayInt, iseed: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray64) -> None: ...

""" dlarra(n: BlasInt, d: float64, e: float64, e2: float64, spltol: float64, tnrm: float64, nsplit: BlasInt, isplit: BlasInt, info: BlasInt) """
def dlarra(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, e2: ScalarOrArray64, spltol: ScalarOrArray64, tnrm: ScalarOrArray64, nsplit: ScalarOrArrayInt, isplit: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlarrb(n: BlasInt, d: float64, lld: float64, ifirst: BlasInt, ilast: BlasInt, rtol1: float64, rtol2: float64, offset: BlasInt, w: float64, wgap: float64, werr: float64, work: float64, iwork: BlasInt, pivmin: float64, spdiam: float64, twist: BlasInt, info: BlasInt) """
def dlarrb(n: ScalarOrArrayInt, d: ScalarOrArray64, lld: ScalarOrArray64, ifirst: ScalarOrArrayInt, ilast: ScalarOrArrayInt, rtol1: ScalarOrArray64, rtol2: ScalarOrArray64, offset: ScalarOrArrayInt, w: ScalarOrArray64, wgap: ScalarOrArray64, werr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, pivmin: ScalarOrArray64, spdiam: ScalarOrArray64, twist: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlarrc(jobt: uint8, n: BlasInt, vl: float64, vu: float64, d: float64, e: float64, pivmin: float64, eigcnt: BlasInt, lcnt: BlasInt, rcnt: BlasInt, info: BlasInt) """
def dlarrc(jobt: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, d: ScalarOrArray64, e: ScalarOrArray64, pivmin: ScalarOrArray64, eigcnt: ScalarOrArrayInt, lcnt: ScalarOrArrayInt, rcnt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlarrd(range: uint8, order: uint8, n: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, gers: float64, reltol: float64, d: float64, e: float64, e2: float64, pivmin: float64, nsplit: BlasInt, isplit: BlasInt, m: BlasInt, w: float64, werr: float64, wl: float64, wu: float64, iblock: BlasInt, indexw: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dlarrd(range: ScalarOrArrayU8, order: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, gers: ScalarOrArray64, reltol: ScalarOrArray64, d: ScalarOrArray64, e: ScalarOrArray64, e2: ScalarOrArray64, pivmin: ScalarOrArray64, nsplit: ScalarOrArrayInt, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray64, werr: ScalarOrArray64, wl: ScalarOrArray64, wu: ScalarOrArray64, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlarre(range: uint8, n: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, d: float64, e: float64, e2: float64, rtol1: float64, rtol2: float64, spltol: float64, nsplit: BlasInt, isplit: BlasInt, m: BlasInt, w: float64, werr: float64, wgap: float64, iblock: BlasInt, indexw: BlasInt, gers: float64, pivmin: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dlarre(range: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, e2: ScalarOrArray64, rtol1: ScalarOrArray64, rtol2: ScalarOrArray64, spltol: ScalarOrArray64, nsplit: ScalarOrArrayInt, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray64, werr: ScalarOrArray64, wgap: ScalarOrArray64, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, gers: ScalarOrArray64, pivmin: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlarrf(n: BlasInt, d: float64, l: float64, ld: float64, clstrt: BlasInt, clend: BlasInt, w: float64, wgap: float64, werr: float64, spdiam: float64, clgapl: float64, clgapr: float64, pivmin: float64, sigma: float64, dplus: float64, lplus: float64, work: float64, info: BlasInt) """
def dlarrf(n: ScalarOrArrayInt, d: ScalarOrArray64, l: ScalarOrArray64, ld: ScalarOrArray64, clstrt: ScalarOrArrayInt, clend: ScalarOrArrayInt, w: ScalarOrArray64, wgap: ScalarOrArray64, werr: ScalarOrArray64, spdiam: ScalarOrArray64, clgapl: ScalarOrArray64, clgapr: ScalarOrArray64, pivmin: ScalarOrArray64, sigma: ScalarOrArray64, dplus: ScalarOrArray64, lplus: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlarrj(n: BlasInt, d: float64, e2: float64, ifirst: BlasInt, ilast: BlasInt, rtol: float64, offset: BlasInt, w: float64, werr: float64, work: float64, iwork: BlasInt, pivmin: float64, spdiam: float64, info: BlasInt) """
def dlarrj(n: ScalarOrArrayInt, d: ScalarOrArray64, e2: ScalarOrArray64, ifirst: ScalarOrArrayInt, ilast: ScalarOrArrayInt, rtol: ScalarOrArray64, offset: ScalarOrArrayInt, w: ScalarOrArray64, werr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, pivmin: ScalarOrArray64, spdiam: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlarrk(n: BlasInt, iw: BlasInt, gl: float64, gu: float64, d: float64, e2: float64, pivmin: float64, reltol: float64, w: float64, werr: float64, info: BlasInt) """
def dlarrk(n: ScalarOrArrayInt, iw: ScalarOrArrayInt, gl: ScalarOrArray64, gu: ScalarOrArray64, d: ScalarOrArray64, e2: ScalarOrArray64, pivmin: ScalarOrArray64, reltol: ScalarOrArray64, w: ScalarOrArray64, werr: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlarrr(n: BlasInt, d: float64, e: float64, info: BlasInt) """
def dlarrr(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlarrv(n: BlasInt, vl: float64, vu: float64, d: float64, l: float64, pivmin: float64, isplit: BlasInt, m: BlasInt, dol: BlasInt, dou: BlasInt, minrgp: float64, rtol1: float64, rtol2: float64, w: float64, werr: float64, wgap: float64, iblock: BlasInt, indexw: BlasInt, gers: float64, z: float64, ldz: BlasInt, isuppz: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dlarrv(n: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, d: ScalarOrArray64, l: ScalarOrArray64, pivmin: ScalarOrArray64, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, dol: ScalarOrArrayInt, dou: ScalarOrArrayInt, minrgp: ScalarOrArray64, rtol1: ScalarOrArray64, rtol2: ScalarOrArray64, w: ScalarOrArray64, werr: ScalarOrArray64, wgap: ScalarOrArray64, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, gers: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlartg(f: float64, g: float64, cs: float64, sn: float64, r: float64) """
def dlartg(f: ScalarOrArray64, g: ScalarOrArray64, cs: ScalarOrArray64, sn: ScalarOrArray64, r: ScalarOrArray64) -> None: ...

""" dlartgp(f: float64, g: float64, cs: float64, sn: float64, r: float64) """
def dlartgp(f: ScalarOrArray64, g: ScalarOrArray64, cs: ScalarOrArray64, sn: ScalarOrArray64, r: ScalarOrArray64) -> None: ...

""" dlartgs(x: float64, y: float64, sigma: float64, cs: float64, sn: float64) """
def dlartgs(x: ScalarOrArray64, y: ScalarOrArray64, sigma: ScalarOrArray64, cs: ScalarOrArray64, sn: ScalarOrArray64) -> None: ...

""" dlartv(n: BlasInt, x: float64, incx: BlasInt, y: float64, incy: BlasInt, c: float64, s: float64, incc: BlasInt) """
def dlartv(n: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, y: ScalarOrArray64, incy: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, incc: ScalarOrArrayInt) -> None: ...

""" dlaruv(iseed: BlasInt, n: BlasInt, x: float64) """
def dlaruv(iseed: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray64) -> None: ...

""" dlarz(side: uint8, m: BlasInt, n: BlasInt, l: BlasInt, v: float64, incv: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64) """
def dlarz(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArray64, incv: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64) -> None: ...

""" dlarzb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: float64, ldv: BlasInt, t: float64, ldt: BlasInt, c: float64, ldc: BlasInt, work: float64, ldwork: BlasInt) """
def dlarzb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, ldwork: ScalarOrArrayInt) -> None: ...

""" dlarzt(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: float64, ldv: BlasInt, tau: float64, t: float64, ldt: BlasInt) """
def dlarzt(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, tau: ScalarOrArray64, t: ScalarOrArray64, ldt: ScalarOrArrayInt) -> None: ...

""" dlas2(f: float64, g: float64, h: float64, ssmin: float64, ssmax: float64) """
def dlas2(f: ScalarOrArray64, g: ScalarOrArray64, h: ScalarOrArray64, ssmin: ScalarOrArray64, ssmax: ScalarOrArray64) -> None: ...

""" dlascl(type_bn: uint8, kl: BlasInt, ku: BlasInt, cfrom: float64, cto: float64, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dlascl(type_bn: ScalarOrArrayU8, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, cfrom: ScalarOrArray64, cto: ScalarOrArray64, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlasd0(n: BlasInt, sqre: BlasInt, d: float64, e: float64, u: float64, ldu: BlasInt, vt: float64, ldvt: BlasInt, smlsiz: BlasInt, iwork: BlasInt, work: float64, info: BlasInt) """
def dlasd0(n: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, iwork: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasd1(nl: BlasInt, nr: BlasInt, sqre: BlasInt, d: float64, alpha: float64, beta: float64, u: float64, ldu: BlasInt, vt: float64, ldvt: BlasInt, idxq: BlasInt, iwork: BlasInt, work: float64, info: BlasInt) """
def dlasd1(nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray64, alpha: ScalarOrArray64, beta: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, idxq: ScalarOrArrayInt, iwork: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasd2(nl: BlasInt, nr: BlasInt, sqre: BlasInt, k: BlasInt, d: float64, z: float64, alpha: float64, beta: float64, u: float64, ldu: BlasInt, vt: float64, ldvt: BlasInt, dsigma: float64, u2: float64, ldu2: BlasInt, vt2: float64, ldvt2: BlasInt, idxp: BlasInt, idx: BlasInt, idxc: BlasInt, idxq: BlasInt, coltyp: BlasInt, info: BlasInt) """
def dlasd2(nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, alpha: ScalarOrArray64, beta: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, dsigma: ScalarOrArray64, u2: ScalarOrArray64, ldu2: ScalarOrArrayInt, vt2: ScalarOrArray64, ldvt2: ScalarOrArrayInt, idxp: ScalarOrArrayInt, idx: ScalarOrArrayInt, idxc: ScalarOrArrayInt, idxq: ScalarOrArrayInt, coltyp: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlasd3(nl: BlasInt, nr: BlasInt, sqre: BlasInt, k: BlasInt, d: float64, q: float64, ldq: BlasInt, dsigma: float64, u: float64, ldu: BlasInt, u2: float64, ldu2: BlasInt, vt: float64, ldvt: BlasInt, vt2: float64, ldvt2: BlasInt, idxc: BlasInt, ctot: BlasInt, z: float64, info: BlasInt) """
def dlasd3(nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, dsigma: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, u2: ScalarOrArray64, ldu2: ScalarOrArrayInt, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, vt2: ScalarOrArray64, ldvt2: ScalarOrArrayInt, idxc: ScalarOrArrayInt, ctot: ScalarOrArrayInt, z: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasd4(n: BlasInt, i: BlasInt, d: float64, z: float64, delta: float64, rho: float64, sigma: float64, work: float64, info: BlasInt) """
def dlasd4(n: ScalarOrArrayInt, i: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, delta: ScalarOrArray64, rho: ScalarOrArray64, sigma: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasd5(i: BlasInt, d: float64, z: float64, delta: float64, rho: float64, dsigma: float64, work: float64) """
def dlasd5(i: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, delta: ScalarOrArray64, rho: ScalarOrArray64, dsigma: ScalarOrArray64, work: ScalarOrArray64) -> None: ...

""" dlasd6(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, d: float64, vf: float64, vl: float64, alpha: float64, beta: float64, idxq: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float64, ldgnum: BlasInt, poles: float64, difl: float64, difr: float64, z: float64, k: BlasInt, c: float64, s: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dlasd6(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray64, vf: ScalarOrArray64, vl: ScalarOrArray64, alpha: ScalarOrArray64, beta: ScalarOrArray64, idxq: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray64, ldgnum: ScalarOrArrayInt, poles: ScalarOrArray64, difl: ScalarOrArray64, difr: ScalarOrArray64, z: ScalarOrArray64, k: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlasd7(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, k: BlasInt, d: float64, z: float64, zw: float64, vf: float64, vfw: float64, vl: float64, vlw: float64, alpha: float64, beta: float64, dsigma: float64, idx: BlasInt, idxp: BlasInt, idxq: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float64, ldgnum: BlasInt, c: float64, s: float64, info: BlasInt) """
def dlasd7(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, zw: ScalarOrArray64, vf: ScalarOrArray64, vfw: ScalarOrArray64, vl: ScalarOrArray64, vlw: ScalarOrArray64, alpha: ScalarOrArray64, beta: ScalarOrArray64, dsigma: ScalarOrArray64, idx: ScalarOrArrayInt, idxp: ScalarOrArrayInt, idxq: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray64, ldgnum: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasd8(icompq: BlasInt, k: BlasInt, d: float64, z: float64, vf: float64, vl: float64, difl: float64, difr: float64, lddifr: BlasInt, dsigma: float64, work: float64, info: BlasInt) """
def dlasd8(icompq: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray64, z: ScalarOrArray64, vf: ScalarOrArray64, vl: ScalarOrArray64, difl: ScalarOrArray64, difr: ScalarOrArray64, lddifr: ScalarOrArrayInt, dsigma: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasda(icompq: BlasInt, smlsiz: BlasInt, n: BlasInt, sqre: BlasInt, d: float64, e: float64, u: float64, ldu: BlasInt, vt: float64, k: BlasInt, difl: float64, difr: float64, z: float64, poles: float64, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, perm: BlasInt, givnum: float64, c: float64, s: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dlasda(icompq: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, k: ScalarOrArrayInt, difl: ScalarOrArray64, difr: ScalarOrArray64, z: ScalarOrArray64, poles: ScalarOrArray64, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, perm: ScalarOrArrayInt, givnum: ScalarOrArray64, c: ScalarOrArray64, s: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlasdq(uplo: uint8, sqre: BlasInt, n: BlasInt, ncvt: BlasInt, nru: BlasInt, ncc: BlasInt, d: float64, e: float64, vt: float64, ldvt: BlasInt, u: float64, ldu: BlasInt, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dlasdq(uplo: ScalarOrArrayU8, sqre: ScalarOrArrayInt, n: ScalarOrArrayInt, ncvt: ScalarOrArrayInt, nru: ScalarOrArrayInt, ncc: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vt: ScalarOrArray64, ldvt: ScalarOrArrayInt, u: ScalarOrArray64, ldu: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasdt(n: BlasInt, lvl: BlasInt, nd: BlasInt, inode: BlasInt, ndiml: BlasInt, ndimr: BlasInt, msub: BlasInt) """
def dlasdt(n: ScalarOrArrayInt, lvl: ScalarOrArrayInt, nd: ScalarOrArrayInt, inode: ScalarOrArrayInt, ndiml: ScalarOrArrayInt, ndimr: ScalarOrArrayInt, msub: ScalarOrArrayInt) -> None: ...

""" dlaset(uplo: uint8, m: BlasInt, n: BlasInt, alpha: float64, beta: float64, a: float64, lda: BlasInt) """
def dlaset(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, beta: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> None: ...

""" dlasq1(n: BlasInt, d: float64, e: float64, work: float64, info: BlasInt) """
def dlasq1(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasq2(n: BlasInt, z: float64, info: BlasInt) """
def dlasq2(n: ScalarOrArrayInt, z: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasq3(i0: BlasInt, n0: BlasInt, z: float64, pp: BlasInt, dmin: float64, sigma: float64, desig: float64, qmax: float64, nfail: BlasInt, iter: BlasInt, ndiv: BlasInt, ieee: bool, ttype: BlasInt, dmin1: float64, dmin2: float64, dn: float64, dn1: float64, dn2: float64, g: float64, tau: float64) """
def dlasq3(i0: ScalarOrArrayInt, n0: ScalarOrArrayInt, z: ScalarOrArray64, pp: ScalarOrArrayInt, dmin: ScalarOrArray64, sigma: ScalarOrArray64, desig: ScalarOrArray64, qmax: ScalarOrArray64, nfail: ScalarOrArrayInt, iter: ScalarOrArrayInt, ndiv: ScalarOrArrayInt, ieee: ScalarOrArrayBool, ttype: ScalarOrArrayInt, dmin1: ScalarOrArray64, dmin2: ScalarOrArray64, dn: ScalarOrArray64, dn1: ScalarOrArray64, dn2: ScalarOrArray64, g: ScalarOrArray64, tau: ScalarOrArray64) -> None: ...

""" dlasq4(i0: BlasInt, n0: BlasInt, z: float64, pp: BlasInt, n0in: BlasInt, dmin: float64, dmin1: float64, dmin2: float64, dn: float64, dn1: float64, dn2: float64, tau: float64, ttype: BlasInt, g: float64) """
def dlasq4(i0: ScalarOrArrayInt, n0: ScalarOrArrayInt, z: ScalarOrArray64, pp: ScalarOrArrayInt, n0in: ScalarOrArrayInt, dmin: ScalarOrArray64, dmin1: ScalarOrArray64, dmin2: ScalarOrArray64, dn: ScalarOrArray64, dn1: ScalarOrArray64, dn2: ScalarOrArray64, tau: ScalarOrArray64, ttype: ScalarOrArrayInt, g: ScalarOrArray64) -> None: ...

""" dlasq6(i0: BlasInt, n0: BlasInt, z: float64, pp: BlasInt, dmin: float64, dmin1: float64, dmin2: float64, dn: float64, dnm1: float64, dnm2: float64) """
def dlasq6(i0: ScalarOrArrayInt, n0: ScalarOrArrayInt, z: ScalarOrArray64, pp: ScalarOrArrayInt, dmin: ScalarOrArray64, dmin1: ScalarOrArray64, dmin2: ScalarOrArray64, dn: ScalarOrArray64, dnm1: ScalarOrArray64, dnm2: ScalarOrArray64) -> None: ...

""" dlasr(side: uint8, pivot: uint8, direct: uint8, m: BlasInt, n: BlasInt, c: float64, s: float64, a: float64, lda: BlasInt) """
def dlasr(side: ScalarOrArrayU8, pivot: ScalarOrArrayU8, direct: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> None: ...

""" dlasrt(id: uint8, n: BlasInt, d: float64, info: BlasInt) """
def dlasrt(id: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlassq(n: BlasInt, x: float64, incx: BlasInt, scale: float64, sumsq: float64) """
def dlassq(n: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, scale: ScalarOrArray64, sumsq: ScalarOrArray64) -> None: ...

""" dlasv2(f: float64, g: float64, h: float64, ssmin: float64, ssmax: float64, snr: float64, csr: float64, snl: float64, csl: float64) """
def dlasv2(f: ScalarOrArray64, g: ScalarOrArray64, h: ScalarOrArray64, ssmin: ScalarOrArray64, ssmax: ScalarOrArray64, snr: ScalarOrArray64, csr: ScalarOrArray64, snl: ScalarOrArray64, csl: ScalarOrArray64) -> None: ...

""" dlaswp(n: BlasInt, a: float64, lda: BlasInt, k1: BlasInt, k2: BlasInt, ipiv: BlasInt, incx: BlasInt) """
def dlaswp(n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, k1: ScalarOrArrayInt, k2: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, incx: ScalarOrArrayInt) -> None: ...

""" dlasy2(ltranl: bool, ltranr: bool, isgn: BlasInt, n1: BlasInt, n2: BlasInt, tl: float64, ldtl: BlasInt, tr: float64, ldtr: BlasInt, b: float64, ldb: BlasInt, scale: float64, x: float64, ldx: BlasInt, xnorm: float64, info: BlasInt) """
def dlasy2(ltranl: ScalarOrArrayBool, ltranr: ScalarOrArrayBool, isgn: ScalarOrArrayInt, n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, tl: ScalarOrArray64, ldtl: ScalarOrArrayInt, tr: ScalarOrArray64, ldtr: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, scale: ScalarOrArray64, x: ScalarOrArray64, ldx: ScalarOrArrayInt, xnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlasyf(uplo: uint8, n: BlasInt, nb: BlasInt, kb: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, w: float64, ldw: BlasInt, info: BlasInt) """
def dlasyf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, w: ScalarOrArray64, ldw: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlat2s(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, sa: float32, ldsa: BlasInt, info: BlasInt) """
def dlat2s(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, sa: ScalarOrArray32, ldsa: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlatbs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, x: float64, scale: float64, cnorm: float64, info: BlasInt) """
def dlatbs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, x: ScalarOrArray64, scale: ScalarOrArray64, cnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlatdf(ijob: BlasInt, n: BlasInt, z: float64, ldz: BlasInt, rhs: float64, rdsum: float64, rdscal: float64, ipiv: BlasInt, jpiv: BlasInt) """
def dlatdf(ijob: ScalarOrArrayInt, n: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, rhs: ScalarOrArray64, rdsum: ScalarOrArray64, rdscal: ScalarOrArray64, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt) -> None: ...

""" dlatps(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, ap: float64, x: float64, scale: float64, cnorm: float64, info: BlasInt) """
def dlatps(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, x: ScalarOrArray64, scale: ScalarOrArray64, cnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlatrd(uplo: uint8, n: BlasInt, nb: BlasInt, a: float64, lda: BlasInt, e: float64, tau: float64, w: float64, ldw: BlasInt) """
def dlatrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, e: ScalarOrArray64, tau: ScalarOrArray64, w: ScalarOrArray64, ldw: ScalarOrArrayInt) -> None: ...

""" dlatrs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, a: float64, lda: BlasInt, x: float64, scale: float64, cnorm: float64, info: BlasInt) """
def dlatrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, scale: ScalarOrArray64, cnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dlatrz(m: BlasInt, n: BlasInt, l: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64) """
def dlatrz(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64) -> None: ...

""" dlauu2(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dlauu2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dlauum(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dlauum(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dnrm2(n: BlasInt, x: float64, incx: BlasInt) """
def dnrm2(n: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> np.float64: ...

""" dopgtr(uplo: uint8, n: BlasInt, ap: float64, tau: float64, q: float64, ldq: BlasInt, work: float64, info: BlasInt) """
def dopgtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, tau: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dopmtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, ap: float64, tau: float64, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dopmtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ap: ScalarOrArray64, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dorbdb(trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: float64, ldx11: BlasInt, x12: float64, ldx12: BlasInt, x21: float64, ldx21: BlasInt, x22: float64, ldx22: BlasInt, theta: float64, phi: float64, taup1: float64, taup2: float64, tauq1: float64, tauq2: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorbdb(trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArray64, ldx11: ScalarOrArrayInt, x12: ScalarOrArray64, ldx12: ScalarOrArrayInt, x21: ScalarOrArray64, ldx21: ScalarOrArrayInt, x22: ScalarOrArray64, ldx22: ScalarOrArrayInt, theta: ScalarOrArray64, phi: ScalarOrArray64, taup1: ScalarOrArray64, taup2: ScalarOrArray64, tauq1: ScalarOrArray64, tauq2: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorcsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: float64, ldx11: BlasInt, x12: float64, ldx12: BlasInt, x21: float64, ldx21: BlasInt, x22: float64, ldx22: BlasInt, theta: float64, u1: float64, ldu1: BlasInt, u2: float64, ldu2: BlasInt, v1t: float64, ldv1t: BlasInt, v2t: float64, ldv2t: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dorcsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArray64, ldx11: ScalarOrArrayInt, x12: ScalarOrArray64, ldx12: ScalarOrArrayInt, x21: ScalarOrArray64, ldx21: ScalarOrArrayInt, x22: ScalarOrArray64, ldx22: ScalarOrArrayInt, theta: ScalarOrArray64, u1: ScalarOrArray64, ldu1: ScalarOrArrayInt, u2: ScalarOrArray64, ldu2: ScalarOrArrayInt, v1t: ScalarOrArray64, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArray64, ldv2t: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorg2l(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dorg2l(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dorg2r(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dorg2r(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dorgbr(vect: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorgbr(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorghr(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorghr(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorgl2(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dorgl2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dorglq(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorglq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorgql(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorgql(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorgqr(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorgqr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorgr2(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, info: BlasInt) """
def dorgr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dorgrq(m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorgrq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorgtr(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dorgtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorm2l(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dorm2l(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dorm2r(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dorm2r(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dormbr(vect: uint8, side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormbr(vect: ScalarOrArrayU8, side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dormhr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormhr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dorml2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dorml2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dormlq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormlq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dormql(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormql(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dormqr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormqr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dormr2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dormr2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dormr3(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, info: BlasInt) """
def dormr3(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dormrq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormrq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dormrz(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormrz(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dormtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, c: float64, ldc: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dormtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbcon(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dpbcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbequ(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, s: float64, scond: float64, amax: float64, info: BlasInt) """
def dpbequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpbrfs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, afb: float64, ldafb: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dpbrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, afb: ScalarOrArray64, ldafb: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbstf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, info: BlasInt) """
def dpbstf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbsv(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dpbsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbsvx(fact: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, afb: float64, ldafb: BlasInt, equed: uint8, s: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dpbsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, afb: ScalarOrArray64, ldafb: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbtf2(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, info: BlasInt) """
def dpbtf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbtrf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, info: BlasInt) """
def dpbtrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpbtrs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dpbtrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpftrf(transr: uint8, uplo: uint8, n: BlasInt, a: float64, info: BlasInt) """
def dpftrf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpftri(transr: uint8, uplo: uint8, n: BlasInt, a: float64, info: BlasInt) """
def dpftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpftrs(transr: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dpftrs(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpocon(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dpocon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpoequ(n: BlasInt, a: float64, lda: BlasInt, s: float64, scond: float64, amax: float64, info: BlasInt) """
def dpoequ(n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpoequb(n: BlasInt, a: float64, lda: BlasInt, s: float64, scond: float64, amax: float64, info: BlasInt) """
def dpoequb(n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dporfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, af: float64, ldaf: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dporfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, af: ScalarOrArray64, ldaf: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dposv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dposv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dposvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, af: float64, ldaf: BlasInt, equed: uint8, s: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dposvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, af: ScalarOrArray64, ldaf: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpotf2(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dpotf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpotrf(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dpotrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpotri(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dpotri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpotrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dpotrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dppcon(uplo: uint8, n: BlasInt, ap: float64, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dppcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dppequ(uplo: uint8, n: BlasInt, ap: float64, s: float64, scond: float64, amax: float64, info: BlasInt) """
def dppequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, afp: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dpprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, afp: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dppsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dppsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dppsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, afp: float64, equed: uint8, s: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dppsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, afp: ScalarOrArray64, equed: ScalarOrArrayU8, s: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpptrf(uplo: uint8, n: BlasInt, ap: float64, info: BlasInt) """
def dpptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpptri(uplo: uint8, n: BlasInt, ap: float64, info: BlasInt) """
def dpptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dpptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dpstf2(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float64, work: float64, info: BlasInt) """
def dpstf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpstrf(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float64, work: float64, info: BlasInt) """
def dpstrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dptcon(n: BlasInt, d: float64, e: float64, anorm: float64, rcond: float64, work: float64, info: BlasInt) """
def dptcon(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpteqr(compz: uint8, n: BlasInt, d: float64, e: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dpteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dptrfs(n: BlasInt, nrhs: BlasInt, d: float64, e: float64, df: float64, ef: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, info: BlasInt) """
def dptrfs(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, df: ScalarOrArray64, ef: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dptsv(n: BlasInt, nrhs: BlasInt, d: float64, e: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dptsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dptsvx(fact: uint8, n: BlasInt, nrhs: BlasInt, d: float64, e: float64, df: float64, ef: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, info: BlasInt) """
def dptsvx(fact: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, df: ScalarOrArray64, ef: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpttrf(n: BlasInt, d: float64, e: float64, info: BlasInt) """
def dpttrf(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dpttrs(n: BlasInt, nrhs: BlasInt, d: float64, e: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dpttrs(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dptts2(n: BlasInt, nrhs: BlasInt, d: float64, e: float64, b: float64, ldb: BlasInt) """
def dptts2(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" drot(n: BlasInt, dx: float64, incx: BlasInt, dy: float64, incy: BlasInt, c: float64, s: float64) """
def drot(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt, dy: ScalarOrArray64, incy: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64) -> None: ...

""" drotg(da: float64, db: float64, c: float64, s: float64) """
def drotg(da: ScalarOrArray64, db: ScalarOrArray64, c: ScalarOrArray64, s: ScalarOrArray64) -> None: ...

""" drotm(n: BlasInt, dx: float64, incx: BlasInt, dy: float64, incy: BlasInt, dparam: float64) """
def drotm(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt, dy: ScalarOrArray64, incy: ScalarOrArrayInt, dparam: ScalarOrArray64) -> None: ...

""" drotmg(dd1: float64, dd2: float64, dx1: float64, dy1: float64, dparam: float64) """
def drotmg(dd1: ScalarOrArray64, dd2: ScalarOrArray64, dx1: ScalarOrArray64, dy1: ScalarOrArray64, dparam: ScalarOrArray64) -> None: ...

""" drscl(n: BlasInt, sa: float64, sx: float64, incx: BlasInt) """
def drscl(n: ScalarOrArrayInt, sa: ScalarOrArray64, sx: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dsbev(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dsbev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsbevd(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dsbevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsbevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, q: float64, ldq: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dsbevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsbgst(vect: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float64, ldab: BlasInt, bb: float64, ldbb: BlasInt, x: float64, ldx: BlasInt, work: float64, info: BlasInt) """
def dsbgst(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, bb: ScalarOrArray64, ldbb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsbgv(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float64, ldab: BlasInt, bb: float64, ldbb: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dsbgv(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, bb: ScalarOrArray64, ldbb: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsbgvd(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float64, ldab: BlasInt, bb: float64, ldbb: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dsbgvd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, bb: ScalarOrArray64, ldbb: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsbgvx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float64, ldab: BlasInt, bb: float64, ldbb: BlasInt, q: float64, ldq: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dsbgvx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, bb: ScalarOrArray64, ldbb: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsbmv(uplo: uint8, n: BlasInt, k: BlasInt, alpha: float64, a: float64, lda: BlasInt, x: float64, incx: BlasInt, beta: float64, y: float64, incy: BlasInt) """
def dsbmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, beta: ScalarOrArray64, y: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dsbtrd(vect: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, d: float64, e: float64, q: float64, ldq: BlasInt, work: float64, info: BlasInt) """
def dsbtrd(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dscal(n: BlasInt, da: float64, dx: float64, incx: BlasInt) """
def dscal(n: ScalarOrArrayInt, da: ScalarOrArray64, dx: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dsdot(n: BlasInt, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt) """
def dsdot(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt) -> np.float64: ...

""" dsfrk(transr: uint8, uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float64, a: float64, lda: BlasInt, beta: float64, c: float64) """
def dsfrk(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArray64) -> None: ...

""" dsgesv(n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, work: float64, swork: float32, iter: BlasInt, info: BlasInt) """
def dsgesv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, work: ScalarOrArray64, swork: ScalarOrArray32, iter: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspcon(uplo: uint8, n: BlasInt, ap: float64, ipiv: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dspcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspev(jobz: uint8, uplo: uint8, n: BlasInt, ap: float64, w: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dspev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dspevd(jobz: uint8, uplo: uint8, n: BlasInt, ap: float64, w: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dspevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dspevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspgst(itype: BlasInt, uplo: uint8, n: BlasInt, ap: float64, bp: float64, info: BlasInt) """
def dspgst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, bp: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dspgv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: float64, bp: float64, w: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dspgv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, bp: ScalarOrArray64, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dspgvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: float64, bp: float64, w: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dspgvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, bp: ScalarOrArray64, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspgvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: float64, bp: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dspgvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, bp: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspmv(uplo: uint8, n: BlasInt, alpha: float64, ap: float64, x: float64, incx: BlasInt, beta: float64, y: float64, incy: BlasInt) """
def dspmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, ap: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, beta: ScalarOrArray64, y: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dsposv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, work: float64, swork: float32, iter: BlasInt, info: BlasInt) """
def dsposv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, work: ScalarOrArray64, swork: ScalarOrArray32, iter: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspr(uplo: uint8, n: BlasInt, alpha: float64, x: float64, incx: BlasInt, ap: float64) """
def dspr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, ap: ScalarOrArray64) -> None: ...

""" dspr2(uplo: uint8, n: BlasInt, alpha: float64, x: float64, incx: BlasInt, y: float64, incy: BlasInt, ap: float64) """
def dspr2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, y: ScalarOrArray64, incy: ScalarOrArrayInt, ap: ScalarOrArray64) -> None: ...

""" dsprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, afp: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dsprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, afp: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dspsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dspsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, afp: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dspsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, afp: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsptrd(uplo: uint8, n: BlasInt, ap: float64, d: float64, e: float64, tau: float64, info: BlasInt) """
def dsptrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, d: ScalarOrArray64, e: ScalarOrArray64, tau: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsptrf(uplo: uint8, n: BlasInt, ap: float64, ipiv: BlasInt, info: BlasInt) """
def dsptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsptri(uplo: uint8, n: BlasInt, ap: float64, ipiv: BlasInt, work: float64, info: BlasInt) """
def dsptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dsptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstebz(range: uint8, order: uint8, n: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, d: float64, e: float64, m: BlasInt, nsplit: BlasInt, w: float64, iblock: BlasInt, isplit: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def dstebz(range: ScalarOrArrayU8, order: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, d: ScalarOrArray64, e: ScalarOrArray64, m: ScalarOrArrayInt, nsplit: ScalarOrArrayInt, w: ScalarOrArray64, iblock: ScalarOrArrayInt, isplit: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstedc(compz: uint8, n: BlasInt, d: float64, e: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dstedc(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstegr(jobz: uint8, range: uint8, n: BlasInt, d: float64, e: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, isuppz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dstegr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstein(n: BlasInt, d: float64, e: float64, m: BlasInt, w: float64, iblock: BlasInt, isplit: BlasInt, z: float64, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dstein(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, iblock: ScalarOrArrayInt, isplit: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstemr(jobz: uint8, range: uint8, n: BlasInt, d: float64, e: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, m: BlasInt, w: float64, z: float64, ldz: BlasInt, nzc: BlasInt, isuppz: BlasInt, tryrac: bool, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dstemr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, nzc: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, tryrac: ScalarOrArrayBool, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsteqr(compz: uint8, n: BlasInt, d: float64, e: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dsteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsterf(n: BlasInt, d: float64, e: float64, info: BlasInt) """
def dsterf(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dstev(jobz: uint8, n: BlasInt, d: float64, e: float64, z: float64, ldz: BlasInt, work: float64, info: BlasInt) """
def dstev(jobz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dstevd(jobz: uint8, n: BlasInt, d: float64, e: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dstevd(jobz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstevr(jobz: uint8, range: uint8, n: BlasInt, d: float64, e: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, isuppz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dstevr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dstevx(jobz: uint8, range: uint8, n: BlasInt, d: float64, e: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dstevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dswap(n: BlasInt, dx: float64, incx: BlasInt, dy: float64, incy: BlasInt) """
def dswap(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt, dy: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dsycon(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, anorm: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dsycon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsyconv(uplo: uint8, way: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, work: float64, info: BlasInt) """
def dsyconv(uplo: ScalarOrArrayU8, way: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsyequb(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, s: float64, scond: float64, amax: float64, work: float64, info: BlasInt) """
def dsyequb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsyev(jobz: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, w: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dsyev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsyevd(jobz: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, w: float64, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dsyevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsyevr(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, isuppz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dsyevr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsyevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dsyevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsygs2(itype: BlasInt, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dsygs2(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsygst(itype: BlasInt, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dsygst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsygv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, w: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dsygv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsygvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, w: float64, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dsygvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsygvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: float64, ldz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def dsygvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArray64, ldz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsymm(side: uint8, uplo: uint8, m: BlasInt, n: BlasInt, alpha: float64, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, beta: float64, c: float64, ldc: BlasInt) """
def dsymm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt) -> None: ...

""" dsymv(uplo: uint8, n: BlasInt, alpha: float64, a: float64, lda: BlasInt, x: float64, incx: BlasInt, beta: float64, y: float64, incy: BlasInt) """
def dsymv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt, beta: ScalarOrArray64, y: ScalarOrArray64, incy: ScalarOrArrayInt) -> None: ...

""" dsyr(uplo: uint8, n: BlasInt, alpha: float64, x: float64, incx: BlasInt, a: float64, lda: BlasInt) """
def dsyr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> None: ...

""" dsyr2(uplo: uint8, n: BlasInt, alpha: float64, x: float64, incx: BlasInt, y: float64, incy: BlasInt, a: float64, lda: BlasInt) """
def dsyr2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt, y: ScalarOrArray64, incy: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> None: ...

""" dsyr2k(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float64, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, beta: float64, c: float64, ldc: BlasInt) """
def dsyr2k(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt) -> None: ...

""" dsyrfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, af: float64, ldaf: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dsyrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, af: ScalarOrArray64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsyrk(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float64, a: float64, lda: BlasInt, beta: float64, c: float64, ldc: BlasInt) """
def dsyrk(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArray64, ldc: ScalarOrArrayInt) -> None: ...

""" dsysv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dsysv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsysvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, af: float64, ldaf: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dsysvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, af: ScalarOrArray64, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsyswapr(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, i1: BlasInt, i2: BlasInt) """
def dsyswapr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, i1: ScalarOrArrayInt, i2: ScalarOrArrayInt) -> None: ...

""" dsytd2(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, d: float64, e: float64, tau: float64, info: BlasInt) """
def dsytd2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tau: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsytf2(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def dsytf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsytrd(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, d: float64, e: float64, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dsytrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsytrf(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dsytrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsytri(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, work: float64, info: BlasInt) """
def dsytri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dsytri2(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dsytri2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsytri2x(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, work: float64, nb: BlasInt, info: BlasInt) """
def dsytri2x(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray64, nb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsytrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dsytrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dsytrs2(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, ipiv: BlasInt, b: float64, ldb: BlasInt, work: float64, info: BlasInt) """
def dsytrs2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtbcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, kd: BlasInt, ab: float64, ldab: BlasInt, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dtbcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtbmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, x: float64, incx: BlasInt) """
def dtbmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dtbrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dtbrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtbsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: float64, lda: BlasInt, x: float64, incx: BlasInt) """
def dtbsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dtbtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float64, ldab: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dtbtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray64, ldab: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtfsm(transr: uint8, side: uint8, uplo: uint8, trans: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: float64, a: float64, b: float64, ldb: BlasInt) """
def dtfsm(transr: ScalarOrArrayU8, side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" dtftri(transr: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: float64, info: BlasInt) """
def dtftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtfttp(transr: uint8, uplo: uint8, n: BlasInt, arf: float64, ap: float64, info: BlasInt) """
def dtfttp(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArray64, ap: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtfttr(transr: uint8, uplo: uint8, n: BlasInt, arf: float64, a: float64, lda: BlasInt, info: BlasInt) """
def dtfttr(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, s: float64, lds: BlasInt, p: float64, ldp: BlasInt, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: float64, info: BlasInt) """
def dtgevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, s: ScalarOrArray64, lds: ScalarOrArrayInt, p: ScalarOrArray64, ldp: ScalarOrArrayInt, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtgex2(wantq: bool, wantz: bool, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, q: float64, ldq: BlasInt, z: float64, ldz: BlasInt, j1: BlasInt, n1: BlasInt, n2: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dtgex2(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, j1: ScalarOrArrayInt, n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgexc(wantq: bool, wantz: bool, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, q: float64, ldq: BlasInt, z: float64, ldz: BlasInt, ifst: BlasInt, ilst: BlasInt, work: float64, lwork: BlasInt, info: BlasInt) """
def dtgexc(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgsen(ijob: BlasInt, wantq: bool, wantz: bool, select: bool, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, alphar: float64, alphai: float64, beta: float64, q: float64, ldq: BlasInt, z: float64, ldz: BlasInt, m: BlasInt, pl: float64, pr: float64, dif: float64, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dtgsen(ijob: ScalarOrArrayInt, wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, alphar: ScalarOrArray64, alphai: ScalarOrArray64, beta: ScalarOrArray64, q: ScalarOrArray64, ldq: ScalarOrArrayInt, z: ScalarOrArray64, ldz: ScalarOrArrayInt, m: ScalarOrArrayInt, pl: ScalarOrArray64, pr: ScalarOrArray64, dif: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgsja(jobu: uint8, jobv: uint8, jobq: uint8, m: BlasInt, p: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, tola: float64, tolb: float64, alpha: float64, beta: float64, u: float64, ldu: BlasInt, v: float64, ldv: BlasInt, q: float64, ldq: BlasInt, work: float64, ncycle: BlasInt, info: BlasInt) """
def dtgsja(jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, jobq: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, tola: ScalarOrArray64, tolb: ScalarOrArray64, alpha: ScalarOrArray64, beta: ScalarOrArray64, u: ScalarOrArray64, ldu: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, work: ScalarOrArray64, ncycle: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, s: float64, dif: float64, mm: BlasInt, m: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dtgsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, s: ScalarOrArray64, dif: ScalarOrArray64, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgsy2(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, c: float64, ldc: BlasInt, d: float64, ldd: BlasInt, e: float64, lde: BlasInt, f: float64, ldf: BlasInt, scale: float64, rdsum: float64, rdscal: float64, iwork: BlasInt, pq: BlasInt, info: BlasInt) """
def dtgsy2(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, d: ScalarOrArray64, ldd: ScalarOrArrayInt, e: ScalarOrArray64, lde: ScalarOrArrayInt, f: ScalarOrArray64, ldf: ScalarOrArrayInt, scale: ScalarOrArray64, rdsum: ScalarOrArray64, rdscal: ScalarOrArray64, iwork: ScalarOrArrayInt, pq: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtgsyl(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, c: float64, ldc: BlasInt, d: float64, ldd: BlasInt, e: float64, lde: BlasInt, f: float64, ldf: BlasInt, scale: float64, dif: float64, work: float64, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dtgsyl(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, d: ScalarOrArray64, ldd: ScalarOrArrayInt, e: ScalarOrArray64, lde: ScalarOrArrayInt, f: ScalarOrArray64, ldf: ScalarOrArrayInt, scale: ScalarOrArray64, dif: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtpcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: float64, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dtpcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtpmqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, nb: BlasInt, v: float64, ldv: BlasInt, t: float64, ldt: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, work: float64, info: BlasInt) """
def dtpmqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtpmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: float64, x: float64, incx: BlasInt) """
def dtpmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dtpqrt(m: BlasInt, n: BlasInt, l: BlasInt, nb: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, t: float64, ldt: BlasInt, work: float64, info: BlasInt) """
def dtpqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtpqrt2(m: BlasInt, n: BlasInt, l: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, t: float64, ldt: BlasInt, info: BlasInt) """
def dtpqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtprfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: float64, ldv: BlasInt, t: float64, ldt: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, work: float64, ldwork: BlasInt) """
def dtprfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArray64, ldv: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, work: ScalarOrArray64, ldwork: ScalarOrArrayInt) -> None: ...

""" dtprfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dtprfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtpsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: float64, x: float64, incx: BlasInt) """
def dtpsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dtptri(uplo: uint8, diag: uint8, n: BlasInt, ap: float64, info: BlasInt) """
def dtptri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtptrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: float64, b: float64, ldb: BlasInt, info: BlasInt) """
def dtptrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray64, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtpttf(transr: uint8, uplo: uint8, n: BlasInt, ap: float64, arf: float64, info: BlasInt) """
def dtpttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, arf: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtpttr(uplo: uint8, n: BlasInt, ap: float64, a: float64, lda: BlasInt, info: BlasInt) """
def dtpttr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: float64, lda: BlasInt, rcond: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dtrcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, rcond: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, t: float64, ldt: BlasInt, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: float64, info: BlasInt) """
def dtrevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtrexc(compq: uint8, n: BlasInt, t: float64, ldt: BlasInt, q: float64, ldq: BlasInt, ifst: BlasInt, ilst: BlasInt, work: float64, info: BlasInt) """
def dtrexc(compq: ScalarOrArrayU8, n: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtrmm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: float64, a: float64, lda: BlasInt, b: float64, ldb: BlasInt) """
def dtrmm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" dtrmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: float64, lda: BlasInt, x: float64, incx: BlasInt) """
def dtrmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dtrrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, x: float64, ldx: BlasInt, ferr: float64, berr: float64, work: float64, iwork: BlasInt, info: BlasInt) """
def dtrrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, x: ScalarOrArray64, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrsen(job: uint8, compq: uint8, select: bool, n: BlasInt, t: float64, ldt: BlasInt, q: float64, ldq: BlasInt, wr: float64, wi: float64, m: BlasInt, s: float64, sep: float64, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def dtrsen(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, q: ScalarOrArray64, ldq: ScalarOrArrayInt, wr: ScalarOrArray64, wi: ScalarOrArray64, m: ScalarOrArrayInt, s: ScalarOrArray64, sep: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrsm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: float64, a: float64, lda: BlasInt, b: float64, ldb: BlasInt) """
def dtrsm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt) -> None: ...

""" dtrsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, t: float64, ldt: BlasInt, vl: float64, ldvl: BlasInt, vr: float64, ldvr: BlasInt, s: float64, sep: float64, mm: BlasInt, m: BlasInt, work: float64, ldwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def dtrsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray64, ldt: ScalarOrArrayInt, vl: ScalarOrArray64, ldvl: ScalarOrArrayInt, vr: ScalarOrArray64, ldvr: ScalarOrArrayInt, s: ScalarOrArray64, sep: ScalarOrArray64, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray64, ldwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: float64, lda: BlasInt, x: float64, incx: BlasInt) """
def dtrsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, x: ScalarOrArray64, incx: ScalarOrArrayInt) -> None: ...

""" dtrsyl(trana: uint8, tranb: uint8, isgn: BlasInt, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, c: float64, ldc: BlasInt, scale: float64, info: BlasInt) """
def dtrsyl(trana: ScalarOrArrayU8, tranb: ScalarOrArrayU8, isgn: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, c: ScalarOrArray64, ldc: ScalarOrArrayInt, scale: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtrti2(uplo: uint8, diag: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dtrti2(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrtri(uplo: uint8, diag: uint8, n: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def dtrtri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: float64, lda: BlasInt, b: float64, ldb: BlasInt, info: BlasInt) """
def dtrtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dtrttf(transr: uint8, uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, arf: float64, info: BlasInt) """
def dtrttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, arf: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtrttp(uplo: uint8, n: BlasInt, a: float64, lda: BlasInt, ap: float64, info: BlasInt) """
def dtrttp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, ap: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" dtzrzf(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, tau: float64, work: float64, lwork: BlasInt, info: BlasInt) """
def dtzrzf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, tau: ScalarOrArray64, work: ScalarOrArray64, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" dzasum(n: BlasInt, zx: complex128, incx: BlasInt) """
def dzasum(n: ScalarOrArrayInt, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> np.float64: ...

""" dznrm2(n: BlasInt, x: complex128, incx: BlasInt) """
def dznrm2(n: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> np.float64: ...

""" dzsum1(n: BlasInt, cx: complex128, incx: BlasInt) """
def dzsum1(n: ScalarOrArrayInt, cx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> np.float64: ...

""" icamax(n: BlasInt, cx: complex64, incx: BlasInt) """
def icamax(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> BlasInt: ...

""" icmax1(n: BlasInt, cx: complex64, incx: BlasInt) """
def icmax1(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> BlasInt: ...

""" idamax(n: BlasInt, dx: float64, incx: BlasInt) """
def idamax(n: ScalarOrArrayInt, dx: ScalarOrArray64, incx: ScalarOrArrayInt) -> BlasInt: ...

""" ieeeck(ispec: BlasInt, zero: float32, one: float32) """
def ieeeck(ispec: ScalarOrArrayInt, zero: ScalarOrArray32, one: ScalarOrArray32) -> BlasInt: ...

""" ilaclc(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt) """
def ilaclc(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> BlasInt: ...

""" ilaclr(m: BlasInt, n: BlasInt, a: complex64, lda: BlasInt) """
def ilaclr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC64, lda: ScalarOrArrayInt) -> BlasInt: ...

""" iladiag(diag: uint8) """
def iladiag(diag: ScalarOrArrayU8) -> BlasInt: ...

""" iladlc(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt) """
def iladlc(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> BlasInt: ...

""" iladlr(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt) """
def iladlr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt) -> BlasInt: ...

""" ilaprec(prec: uint8) """
def ilaprec(prec: ScalarOrArrayU8) -> BlasInt: ...

""" ilaslc(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt) """
def ilaslc(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> BlasInt: ...

""" ilaslr(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt) """
def ilaslr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> BlasInt: ...

""" ilatrans(trans: uint8) """
def ilatrans(trans: ScalarOrArrayU8) -> BlasInt: ...

""" ilauplo(uplo: uint8) """
def ilauplo(uplo: ScalarOrArrayU8) -> BlasInt: ...

""" ilaver(vers_major: BlasInt, vers_minor: BlasInt, vers_patch: BlasInt) """
def ilaver(vers_major: ScalarOrArrayInt, vers_minor: ScalarOrArrayInt, vers_patch: ScalarOrArrayInt) -> None: ...

""" ilazlc(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt) """
def ilazlc(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> BlasInt: ...

""" ilazlr(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt) """
def ilazlr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> BlasInt: ...

""" isamax(n: BlasInt, sx: float32, incx: BlasInt) """
def isamax(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt) -> BlasInt: ...

""" izamax(n: BlasInt, zx: complex128, incx: BlasInt) """
def izamax(n: ScalarOrArrayInt, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> BlasInt: ...

""" izmax1(n: BlasInt, cx: complex128, incx: BlasInt) """
def izmax1(n: ScalarOrArrayInt, cx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> BlasInt: ...

""" lsame(ca: uint8, cb: uint8) """
def lsame(ca: ScalarOrArrayU8, cb: ScalarOrArrayU8) -> bool: ...

""" sasum(n: BlasInt, sx: float32, incx: BlasInt) """
def sasum(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt) -> np.float32: ...

""" saxpy(n: BlasInt, sa: float32, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt) """
def saxpy(n: ScalarOrArrayInt, sa: ScalarOrArray32, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" sbbcsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, m: BlasInt, p: BlasInt, q: BlasInt, theta: float32, phi: float32, u1: float32, ldu1: BlasInt, u2: float32, ldu2: BlasInt, v1t: float32, ldv1t: BlasInt, v2t: float32, ldv2t: BlasInt, b11d: float32, b11e: float32, b12d: float32, b12e: float32, b21d: float32, b21e: float32, b22d: float32, b22e: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sbbcsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, theta: ScalarOrArray32, phi: ScalarOrArray32, u1: ScalarOrArray32, ldu1: ScalarOrArrayInt, u2: ScalarOrArray32, ldu2: ScalarOrArrayInt, v1t: ScalarOrArray32, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArray32, ldv2t: ScalarOrArrayInt, b11d: ScalarOrArray32, b11e: ScalarOrArray32, b12d: ScalarOrArray32, b12e: ScalarOrArray32, b21d: ScalarOrArray32, b21e: ScalarOrArray32, b22d: ScalarOrArray32, b22e: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sbdsdc(uplo: uint8, compq: uint8, n: BlasInt, d: float32, e: float32, u: float32, ldu: BlasInt, vt: float32, ldvt: BlasInt, q: float32, iq: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def sbdsdc(uplo: ScalarOrArrayU8, compq: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, q: ScalarOrArray32, iq: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sbdsqr(uplo: uint8, n: BlasInt, ncvt: BlasInt, nru: BlasInt, ncc: BlasInt, d: float32, e: float32, vt: float32, ldvt: BlasInt, u: float32, ldu: BlasInt, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sbdsqr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ncvt: ScalarOrArrayInt, nru: ScalarOrArrayInt, ncc: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, u: ScalarOrArray32, ldu: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" scasum(n: BlasInt, cx: complex64, incx: BlasInt) """
def scasum(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> np.float32: ...

""" scnrm2(n: BlasInt, x: complex64, incx: BlasInt) """
def scnrm2(n: ScalarOrArrayInt, x: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> np.float32: ...

""" scopy(n: BlasInt, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt) """
def scopy(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" scsum1(n: BlasInt, cx: complex64, incx: BlasInt) """
def scsum1(n: ScalarOrArrayInt, cx: ScalarOrArrayC64, incx: ScalarOrArrayInt) -> np.float32: ...

""" sdisna(job: uint8, m: BlasInt, n: BlasInt, d: float32, sep: float32, info: BlasInt) """
def sdisna(job: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray32, sep: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sdot(n: BlasInt, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt) """
def sdot(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt) -> np.float32: ...

""" sdsdot(n: BlasInt, sb: float32, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt) """
def sdsdot(n: ScalarOrArrayInt, sb: ScalarOrArray32, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt) -> np.float32: ...

""" sgbbrd(vect: uint8, m: BlasInt, n: BlasInt, ncc: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, d: float32, e: float32, q: float32, ldq: BlasInt, pt: float32, ldpt: BlasInt, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sgbbrd(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ncc: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, pt: ScalarOrArray32, ldpt: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgbcon(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, ipiv: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgbcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgbequ(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def sgbequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgbequb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def sgbequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgbmv(trans: uint8, m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, alpha: float32, a: float32, lda: BlasInt, x: float32, incx: BlasInt, beta: float32, y: float32, incy: BlasInt) """
def sgbmv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, beta: ScalarOrArray32, y: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" sgbrfs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, afb: float32, ldafb: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgbrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, afb: ScalarOrArray32, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgbsv(n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sgbsv(n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgbsvx(fact: uint8, trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, afb: float32, ldafb: BlasInt, ipiv: BlasInt, equed: uint8, r: float32, c: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgbsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, afb: ScalarOrArray32, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray32, c: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgbtf2(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def sgbtf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgbtrf(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def sgbtrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgbtrs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sgbtrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgebak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float32, m: BlasInt, v: float32, ldv: BlasInt, info: BlasInt) """
def sgebak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray32, m: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgebal(job: uint8, n: BlasInt, a: float32, lda: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float32, info: BlasInt) """
def sgebal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgebd2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, d: float32, e: float32, tauq: float32, taup: float32, work: float32, info: BlasInt) """
def sgebd2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tauq: ScalarOrArray32, taup: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgebrd(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, d: float32, e: float32, tauq: float32, taup: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgebrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tauq: ScalarOrArray32, taup: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgecon(norm: uint8, n: BlasInt, a: float32, lda: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgecon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeequ(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def sgeequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgeequb(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, info: BlasInt) """
def sgeequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgeev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: float32, lda: BlasInt, wr: float32, wi: float32, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgeev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: float32, lda: BlasInt, wr: float32, wi: float32, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float32, abnrm: float32, rconde: float32, rcondv: float32, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def sgeevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray32, abnrm: ScalarOrArray32, rconde: ScalarOrArray32, rcondv: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgehd2(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sgehd2(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgehrd(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgehrd(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgejsv(joba: uint8, jobu: uint8, jobv: uint8, jobr: uint8, jobt: uint8, jobp: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, sva: float32, u: float32, ldu: BlasInt, v: float32, ldv: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def sgejsv(joba: ScalarOrArrayU8, jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, jobr: ScalarOrArrayU8, jobt: ScalarOrArrayU8, jobp: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, sva: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgelq2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sgelq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgelqf(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgelqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgels(trans: uint8, m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgels(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgelsd(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, s: float32, rcond: float32, rank: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def sgelsd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, s: ScalarOrArray32, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgelss(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, s: float32, rcond: float32, rank: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgelss(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, s: ScalarOrArray32, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgelsy(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, jpvt: BlasInt, rcond: float32, rank: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgelsy(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgemm(transa: uint8, transb: uint8, m: BlasInt, n: BlasInt, k: BlasInt, alpha: float32, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, beta: float32, c: float32, ldc: BlasInt) """
def sgemm(transa: ScalarOrArrayU8, transb: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt) -> None: ...

""" sgemqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, nb: BlasInt, v: float32, ldv: BlasInt, t: float32, ldt: BlasInt, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sgemqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgemv(trans: uint8, m: BlasInt, n: BlasInt, alpha: float32, a: float32, lda: BlasInt, x: float32, incx: BlasInt, beta: float32, y: float32, incy: BlasInt) """
def sgemv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, beta: ScalarOrArray32, y: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" sgeql2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sgeql2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgeqlf(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgeqlf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeqp3(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, jpvt: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgeqp3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeqr2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sgeqr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgeqr2p(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sgeqr2p(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgeqrf(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgeqrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeqrfp(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgeqrfp(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeqrt(m: BlasInt, n: BlasInt, nb: BlasInt, a: float32, lda: BlasInt, t: float32, ldt: BlasInt, work: float32, info: BlasInt) """
def sgeqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgeqrt2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, t: float32, ldt: BlasInt, info: BlasInt) """
def sgeqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgeqrt3(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, t: float32, ldt: BlasInt, info: BlasInt) """
def sgeqrt3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sger(m: BlasInt, n: BlasInt, alpha: float32, x: float32, incx: BlasInt, y: float32, incy: BlasInt, a: float32, lda: BlasInt) """
def sger(m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, y: ScalarOrArray32, incy: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> None: ...

""" sgerfs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, af: float32, ldaf: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgerfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, af: ScalarOrArray32, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgerq2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sgerq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sgerqf(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgerqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgesc2(n: BlasInt, a: float32, lda: BlasInt, rhs: float32, ipiv: BlasInt, jpiv: BlasInt, scale: float32) """
def sgesc2(n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, rhs: ScalarOrArray32, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, scale: ScalarOrArray32) -> None: ...

""" sgesdd(jobz: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, s: float32, u: float32, ldu: BlasInt, vt: float32, ldvt: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def sgesdd(jobz: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, s: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgesv(n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sgesv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgesvd(jobu: uint8, jobvt: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, s: float32, u: float32, ldu: BlasInt, vt: float32, ldvt: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgesvd(jobu: ScalarOrArrayU8, jobvt: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, s: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgesvj(joba: uint8, jobu: uint8, jobv: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, sva: float32, mv: BlasInt, v: float32, ldv: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgesvj(joba: ScalarOrArrayU8, jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, sva: ScalarOrArray32, mv: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgesvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, af: float32, ldaf: BlasInt, ipiv: BlasInt, equed: uint8, r: float32, c: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgesvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, af: ScalarOrArray32, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray32, c: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgetc2(n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, jpiv: BlasInt, info: BlasInt) """
def sgetc2(n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgetf2(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def sgetf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgetrf(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def sgetrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgetri(n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgetri(n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgetrs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sgetrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sggbak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float32, rscale: float32, m: BlasInt, v: float32, ldv: BlasInt, info: BlasInt) """
def sggbak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray32, rscale: ScalarOrArray32, m: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sggbal(job: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float32, rscale: float32, work: float32, info: BlasInt) """
def sggbal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray32, rscale: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sggev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, alphar: float32, alphai: float32, beta: float32, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sggev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, alphar: ScalarOrArray32, alphai: ScalarOrArray32, beta: ScalarOrArray32, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sggevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, alphar: float32, alphai: float32, beta: float32, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float32, rscale: float32, abnrm: float32, bbnrm: float32, rconde: float32, rcondv: float32, work: float32, lwork: BlasInt, iwork: BlasInt, bwork: bool, info: BlasInt) """
def sggevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, alphar: ScalarOrArray32, alphai: ScalarOrArray32, beta: ScalarOrArray32, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray32, rscale: ScalarOrArray32, abnrm: ScalarOrArray32, bbnrm: ScalarOrArray32, rconde: ScalarOrArray32, rcondv: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, bwork: ScalarOrArrayBool, info: ScalarOrArrayInt) -> None: ...

""" sggglm(n: BlasInt, m: BlasInt, p: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, d: float32, x: float32, y: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sggglm(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, d: ScalarOrArray32, x: ScalarOrArray32, y: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgghrd(compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, q: float32, ldq: BlasInt, z: float32, ldz: BlasInt, info: BlasInt) """
def sgghrd(compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgglse(m: BlasInt, n: BlasInt, p: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, c: float32, d: float32, x: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sgglse(m: ScalarOrArrayInt, n: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, c: ScalarOrArray32, d: ScalarOrArray32, x: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sggqrf(n: BlasInt, m: BlasInt, p: BlasInt, a: float32, lda: BlasInt, taua: float32, b: float32, ldb: BlasInt, taub: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sggqrf(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, taua: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, taub: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sggrqf(m: BlasInt, p: BlasInt, n: BlasInt, a: float32, lda: BlasInt, taua: float32, b: float32, ldb: BlasInt, taub: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sggrqf(m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, taua: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, taub: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgsvj0(jobv: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, d: float32, sva: float32, mv: BlasInt, v: float32, ldv: BlasInt, eps: float32, sfmin: float32, tol: float32, nsweep: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgsvj0(jobv: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, sva: ScalarOrArray32, mv: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, eps: ScalarOrArray32, sfmin: ScalarOrArray32, tol: ScalarOrArray32, nsweep: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgsvj1(jobv: uint8, m: BlasInt, n: BlasInt, n1: BlasInt, a: float32, lda: BlasInt, d: float32, sva: float32, mv: BlasInt, v: float32, ldv: BlasInt, eps: float32, sfmin: float32, tol: float32, nsweep: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sgsvj1(jobv: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, n1: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, sva: ScalarOrArray32, mv: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, eps: ScalarOrArray32, sfmin: ScalarOrArray32, tol: ScalarOrArray32, nsweep: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgtcon(norm: uint8, n: BlasInt, dl: float32, d: float32, du: float32, du2: float32, ipiv: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgtcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, du2: ScalarOrArray32, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgtrfs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: float32, d: float32, du: float32, dlf: float32, df: float32, duf: float32, du2: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgtrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, dlf: ScalarOrArray32, df: ScalarOrArray32, duf: ScalarOrArray32, du2: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgtsv(n: BlasInt, nrhs: BlasInt, dl: float32, d: float32, du: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def sgtsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgtsvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, dl: float32, d: float32, du: float32, dlf: float32, df: float32, duf: float32, du2: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sgtsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, dlf: ScalarOrArray32, df: ScalarOrArray32, duf: ScalarOrArray32, du2: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgttrf(n: BlasInt, dl: float32, d: float32, du: float32, du2: float32, ipiv: BlasInt, info: BlasInt) """
def sgttrf(n: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, du2: ScalarOrArray32, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgttrs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: float32, d: float32, du: float32, du2: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sgttrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, du2: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sgtts2(itrans: BlasInt, n: BlasInt, nrhs: BlasInt, dl: float32, d: float32, du: float32, du2: float32, ipiv: BlasInt, b: float32, ldb: BlasInt) """
def sgtts2(itrans: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, du2: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" shgeqz(job: uint8, compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float32, ldh: BlasInt, t: float32, ldt: BlasInt, alphar: float32, alphai: float32, beta: float32, q: float32, ldq: BlasInt, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def shgeqz(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, alphar: ScalarOrArray32, alphai: ScalarOrArray32, beta: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" shsein(side: uint8, eigsrc: uint8, initv: uint8, select: bool, n: BlasInt, h: float32, ldh: BlasInt, wr: float32, wi: float32, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: float32, ifaill: BlasInt, ifailr: BlasInt, info: BlasInt) """
def shsein(side: ScalarOrArrayU8, eigsrc: ScalarOrArrayU8, initv: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray32, ifaill: ScalarOrArrayInt, ifailr: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" shseqr(job: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float32, ldh: BlasInt, wr: float32, wi: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def shseqr(job: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slabad(small: float32, large: float32) """
def slabad(small: ScalarOrArray32, large: ScalarOrArray32) -> None: ...

""" slabrd(m: BlasInt, n: BlasInt, nb: BlasInt, a: float32, lda: BlasInt, d: float32, e: float32, tauq: float32, taup: float32, x: float32, ldx: BlasInt, y: float32, ldy: BlasInt) """
def slabrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tauq: ScalarOrArray32, taup: ScalarOrArray32, x: ScalarOrArray32, ldx: ScalarOrArrayInt, y: ScalarOrArray32, ldy: ScalarOrArrayInt) -> None: ...

""" slacn2(n: BlasInt, v: float32, x: float32, isgn: BlasInt, est: float32, kase: BlasInt, isave: BlasInt) """
def slacn2(n: ScalarOrArrayInt, v: ScalarOrArray32, x: ScalarOrArray32, isgn: ScalarOrArrayInt, est: ScalarOrArray32, kase: ScalarOrArrayInt, isave: ScalarOrArrayInt) -> None: ...

""" slacon(n: BlasInt, v: float32, x: float32, isgn: BlasInt, est: float32, kase: BlasInt) """
def slacon(n: ScalarOrArrayInt, v: ScalarOrArray32, x: ScalarOrArray32, isgn: ScalarOrArrayInt, est: ScalarOrArray32, kase: ScalarOrArrayInt) -> None: ...

""" slacpy(uplo: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt) """
def slacpy(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" sladiv(a: float32, b: float32, c: float32, d: float32, p: float32, q: float32) """
def sladiv(a: ScalarOrArray32, b: ScalarOrArray32, c: ScalarOrArray32, d: ScalarOrArray32, p: ScalarOrArray32, q: ScalarOrArray32) -> None: ...

""" slae2(a: float32, b: float32, c: float32, rt1: float32, rt2: float32) """
def slae2(a: ScalarOrArray32, b: ScalarOrArray32, c: ScalarOrArray32, rt1: ScalarOrArray32, rt2: ScalarOrArray32) -> None: ...

""" slaebz(ijob: BlasInt, nitmax: BlasInt, n: BlasInt, mmax: BlasInt, minp: BlasInt, nbmin: BlasInt, abstol: float32, reltol: float32, pivmin: float32, d: float32, e: float32, e2: float32, nval: BlasInt, ab: float32, c: float32, mout: BlasInt, nab: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def slaebz(ijob: ScalarOrArrayInt, nitmax: ScalarOrArrayInt, n: ScalarOrArrayInt, mmax: ScalarOrArrayInt, minp: ScalarOrArrayInt, nbmin: ScalarOrArrayInt, abstol: ScalarOrArray32, reltol: ScalarOrArray32, pivmin: ScalarOrArray32, d: ScalarOrArray32, e: ScalarOrArray32, e2: ScalarOrArray32, nval: ScalarOrArrayInt, ab: ScalarOrArray32, c: ScalarOrArray32, mout: ScalarOrArrayInt, nab: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaed0(icompq: BlasInt, qsiz: BlasInt, n: BlasInt, d: float32, e: float32, q: float32, ldq: BlasInt, qstore: float32, ldqs: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def slaed0(icompq: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, qstore: ScalarOrArray32, ldqs: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaed1(n: BlasInt, d: float32, q: float32, ldq: BlasInt, indxq: BlasInt, rho: float32, cutpnt: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def slaed1(n: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray32, cutpnt: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaed2(k: BlasInt, n: BlasInt, n1: BlasInt, d: float32, q: float32, ldq: BlasInt, indxq: BlasInt, rho: float32, z: float32, dlamda: float32, w: float32, q2: float32, indx: BlasInt, indxc: BlasInt, indxp: BlasInt, coltyp: BlasInt, info: BlasInt) """
def slaed2(k: ScalarOrArrayInt, n: ScalarOrArrayInt, n1: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray32, z: ScalarOrArray32, dlamda: ScalarOrArray32, w: ScalarOrArray32, q2: ScalarOrArray32, indx: ScalarOrArrayInt, indxc: ScalarOrArrayInt, indxp: ScalarOrArrayInt, coltyp: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaed3(k: BlasInt, n: BlasInt, n1: BlasInt, d: float32, q: float32, ldq: BlasInt, rho: float32, dlamda: float32, q2: float32, indx: BlasInt, ctot: BlasInt, w: float32, s: float32, info: BlasInt) """
def slaed3(k: ScalarOrArrayInt, n: ScalarOrArrayInt, n1: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, rho: ScalarOrArray32, dlamda: ScalarOrArray32, q2: ScalarOrArray32, indx: ScalarOrArrayInt, ctot: ScalarOrArrayInt, w: ScalarOrArray32, s: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slaed4(n: BlasInt, i: BlasInt, d: float32, z: float32, delta: float32, rho: float32, dlam: float32, info: BlasInt) """
def slaed4(n: ScalarOrArrayInt, i: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, delta: ScalarOrArray32, rho: ScalarOrArray32, dlam: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slaed5(i: BlasInt, d: float32, z: float32, delta: float32, rho: float32, dlam: float32) """
def slaed5(i: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, delta: ScalarOrArray32, rho: ScalarOrArray32, dlam: ScalarOrArray32) -> None: ...

""" slaed6(kniter: BlasInt, orgati: bool, rho: float32, d: float32, z: float32, finit: float32, tau: float32, info: BlasInt) """
def slaed6(kniter: ScalarOrArrayInt, orgati: ScalarOrArrayBool, rho: ScalarOrArray32, d: ScalarOrArray32, z: ScalarOrArray32, finit: ScalarOrArray32, tau: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slaed7(icompq: BlasInt, n: BlasInt, qsiz: BlasInt, tlvls: BlasInt, curlvl: BlasInt, curpbm: BlasInt, d: float32, q: float32, ldq: BlasInt, indxq: BlasInt, rho: float32, cutpnt: BlasInt, qstore: float32, qptr: BlasInt, prmptr: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def slaed7(icompq: ScalarOrArrayInt, n: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, tlvls: ScalarOrArrayInt, curlvl: ScalarOrArrayInt, curpbm: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray32, cutpnt: ScalarOrArrayInt, qstore: ScalarOrArray32, qptr: ScalarOrArrayInt, prmptr: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaed8(icompq: BlasInt, k: BlasInt, n: BlasInt, qsiz: BlasInt, d: float32, q: float32, ldq: BlasInt, indxq: BlasInt, rho: float32, cutpnt: BlasInt, z: float32, dlamda: float32, q2: float32, ldq2: BlasInt, w: float32, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float32, indxp: BlasInt, indx: BlasInt, info: BlasInt) """
def slaed8(icompq: ScalarOrArrayInt, k: ScalarOrArrayInt, n: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, indxq: ScalarOrArrayInt, rho: ScalarOrArray32, cutpnt: ScalarOrArrayInt, z: ScalarOrArray32, dlamda: ScalarOrArray32, q2: ScalarOrArray32, ldq2: ScalarOrArrayInt, w: ScalarOrArray32, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray32, indxp: ScalarOrArrayInt, indx: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaed9(k: BlasInt, kstart: BlasInt, kstop: BlasInt, n: BlasInt, d: float32, q: float32, ldq: BlasInt, rho: float32, dlamda: float32, w: float32, s: float32, lds: BlasInt, info: BlasInt) """
def slaed9(k: ScalarOrArrayInt, kstart: ScalarOrArrayInt, kstop: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, rho: ScalarOrArray32, dlamda: ScalarOrArray32, w: ScalarOrArray32, s: ScalarOrArray32, lds: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaeda(n: BlasInt, tlvls: BlasInt, curlvl: BlasInt, curpbm: BlasInt, prmptr: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float32, q: float32, qptr: BlasInt, z: float32, ztemp: float32, info: BlasInt) """
def slaeda(n: ScalarOrArrayInt, tlvls: ScalarOrArrayInt, curlvl: ScalarOrArrayInt, curpbm: ScalarOrArrayInt, prmptr: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray32, q: ScalarOrArray32, qptr: ScalarOrArrayInt, z: ScalarOrArray32, ztemp: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slaein(rightv: bool, noinit: bool, n: BlasInt, h: float32, ldh: BlasInt, wr: float32, wi: float32, vr: float32, vi: float32, b: float32, ldb: BlasInt, work: float32, eps3: float32, smlnum: float32, bignum: float32, info: BlasInt) """
def slaein(rightv: ScalarOrArrayBool, noinit: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, vr: ScalarOrArray32, vi: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, work: ScalarOrArray32, eps3: ScalarOrArray32, smlnum: ScalarOrArray32, bignum: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slaev2(a: float32, b: float32, c: float32, rt1: float32, rt2: float32, cs1: float32, sn1: float32) """
def slaev2(a: ScalarOrArray32, b: ScalarOrArray32, c: ScalarOrArray32, rt1: ScalarOrArray32, rt2: ScalarOrArray32, cs1: ScalarOrArray32, sn1: ScalarOrArray32) -> None: ...

""" slaexc(wantq: bool, n: BlasInt, t: float32, ldt: BlasInt, q: float32, ldq: BlasInt, j1: BlasInt, n1: BlasInt, n2: BlasInt, work: float32, info: BlasInt) """
def slaexc(wantq: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, j1: ScalarOrArrayInt, n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slag2(a: float32, lda: BlasInt, b: float32, ldb: BlasInt, safmin: float32, scale1: float32, scale2: float32, wr1: float32, wr2: float32, wi: float32) """
def slag2(a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, safmin: ScalarOrArray32, scale1: ScalarOrArray32, scale2: ScalarOrArray32, wr1: ScalarOrArray32, wr2: ScalarOrArray32, wi: ScalarOrArray32) -> None: ...

""" slag2d(m: BlasInt, n: BlasInt, sa: float32, ldsa: BlasInt, a: float64, lda: BlasInt, info: BlasInt) """
def slag2d(m: ScalarOrArrayInt, n: ScalarOrArrayInt, sa: ScalarOrArray32, ldsa: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slags2(upper: bool, a1: float32, a2: float32, a3: float32, b1: float32, b2: float32, b3: float32, csu: float32, snu: float32, csv: float32, snv: float32, csq: float32, snq: float32) """
def slags2(upper: ScalarOrArrayBool, a1: ScalarOrArray32, a2: ScalarOrArray32, a3: ScalarOrArray32, b1: ScalarOrArray32, b2: ScalarOrArray32, b3: ScalarOrArray32, csu: ScalarOrArray32, snu: ScalarOrArray32, csv: ScalarOrArray32, snv: ScalarOrArray32, csq: ScalarOrArray32, snq: ScalarOrArray32) -> None: ...

""" slagtf(n: BlasInt, a: float32, lambda_: float32, b: float32, c: float32, tol: float32, d: float32, in_: BlasInt, info: BlasInt) """
def slagtf(n: ScalarOrArrayInt, a: ScalarOrArray32, lambda_: ScalarOrArray32, b: ScalarOrArray32, c: ScalarOrArray32, tol: ScalarOrArray32, d: ScalarOrArray32, in_: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slagtm(trans: uint8, n: BlasInt, nrhs: BlasInt, alpha: float32, dl: float32, d: float32, du: float32, x: float32, ldx: BlasInt, beta: float32, b: float32, ldb: BlasInt) """
def slagtm(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, alpha: ScalarOrArray32, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32, x: ScalarOrArray32, ldx: ScalarOrArrayInt, beta: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" slagts(job: BlasInt, n: BlasInt, a: float32, b: float32, c: float32, d: float32, in_: BlasInt, y: float32, tol: float32, info: BlasInt) """
def slagts(job: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, b: ScalarOrArray32, c: ScalarOrArray32, d: ScalarOrArray32, in_: ScalarOrArrayInt, y: ScalarOrArray32, tol: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slagv2(a: float32, lda: BlasInt, b: float32, ldb: BlasInt, alphar: float32, alphai: float32, beta: float32, csl: float32, snl: float32, csr: float32, snr: float32) """
def slagv2(a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, alphar: ScalarOrArray32, alphai: ScalarOrArray32, beta: ScalarOrArray32, csl: ScalarOrArray32, snl: ScalarOrArray32, csr: ScalarOrArray32, snr: ScalarOrArray32) -> None: ...

""" slahqr(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float32, ldh: BlasInt, wr: float32, wi: float32, iloz: BlasInt, ihiz: BlasInt, z: float32, ldz: BlasInt, info: BlasInt) """
def slahqr(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slahr2(n: BlasInt, k: BlasInt, nb: BlasInt, a: float32, lda: BlasInt, tau: float32, t: float32, ldt: BlasInt, y: float32, ldy: BlasInt) """
def slahr2(n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, t: ScalarOrArray32, ldt: ScalarOrArrayInt, y: ScalarOrArray32, ldy: ScalarOrArrayInt) -> None: ...

""" slaic1(job: BlasInt, j: BlasInt, x: float32, sest: float32, w: float32, gamma: float32, sestpr: float32, s: float32, c: float32) """
def slaic1(job: ScalarOrArrayInt, j: ScalarOrArrayInt, x: ScalarOrArray32, sest: ScalarOrArray32, w: ScalarOrArray32, gamma: ScalarOrArray32, sestpr: ScalarOrArray32, s: ScalarOrArray32, c: ScalarOrArray32) -> None: ...

""" slaln2(ltrans: bool, na: BlasInt, nw: BlasInt, smin: float32, ca: float32, a: float32, lda: BlasInt, d1: float32, d2: float32, b: float32, ldb: BlasInt, wr: float32, wi: float32, x: float32, ldx: BlasInt, scale: float32, xnorm: float32, info: BlasInt) """
def slaln2(ltrans: ScalarOrArrayBool, na: ScalarOrArrayInt, nw: ScalarOrArrayInt, smin: ScalarOrArray32, ca: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, d1: ScalarOrArray32, d2: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, x: ScalarOrArray32, ldx: ScalarOrArrayInt, scale: ScalarOrArray32, xnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slals0(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, nrhs: BlasInt, b: float32, ldb: BlasInt, bx: float32, ldbx: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float32, ldgnum: BlasInt, poles: float32, difl: float32, difr: float32, z: float32, k: BlasInt, c: float32, s: float32, work: float32, info: BlasInt) """
def slals0(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, bx: ScalarOrArray32, ldbx: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray32, ldgnum: ScalarOrArrayInt, poles: ScalarOrArray32, difl: ScalarOrArray32, difr: ScalarOrArray32, z: ScalarOrArray32, k: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slalsa(icompq: BlasInt, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, b: float32, ldb: BlasInt, bx: float32, ldbx: BlasInt, u: float32, ldu: BlasInt, vt: float32, k: BlasInt, difl: float32, difr: float32, z: float32, poles: float32, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, perm: BlasInt, givnum: float32, c: float32, s: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def slalsa(icompq: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, bx: ScalarOrArray32, ldbx: ScalarOrArrayInt, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, k: ScalarOrArrayInt, difl: ScalarOrArray32, difr: ScalarOrArray32, z: ScalarOrArray32, poles: ScalarOrArray32, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, perm: ScalarOrArrayInt, givnum: ScalarOrArray32, c: ScalarOrArray32, s: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slalsd(uplo: uint8, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, d: float32, e: float32, b: float32, ldb: BlasInt, rcond: float32, rank: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def slalsd(uplo: ScalarOrArrayU8, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, rcond: ScalarOrArray32, rank: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slamch(cmach: uint8) """
def slamch(cmach: ScalarOrArrayU8) -> np.float32: ...

""" slamrg(n1: BlasInt, n2: BlasInt, a: float32, strd1: BlasInt, strd2: BlasInt, index_bn: BlasInt) """
def slamrg(n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, a: ScalarOrArray32, strd1: ScalarOrArrayInt, strd2: ScalarOrArrayInt, index_bn: ScalarOrArrayInt) -> None: ...

""" slangb(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, work: float32) """
def slangb(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slange(norm: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, work: float32) """
def slange(norm: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slangt(norm: uint8, n: BlasInt, dl: float32, d: float32, du: float32) """
def slangt(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArray32, d: ScalarOrArray32, du: ScalarOrArray32) -> np.float32: ...

""" slanhs(norm: uint8, n: BlasInt, a: float32, lda: BlasInt, work: float32) """
def slanhs(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slansb(norm: uint8, uplo: uint8, n: BlasInt, k: BlasInt, ab: float32, ldab: BlasInt, work: float32) """
def slansb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slansf(norm: uint8, transr: uint8, uplo: uint8, n: BlasInt, a: float32, work: float32) """
def slansf(norm: ScalarOrArrayU8, transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, work: ScalarOrArray32) -> np.float32: ...

""" slansp(norm: uint8, uplo: uint8, n: BlasInt, ap: float32, work: float32) """
def slansp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, work: ScalarOrArray32) -> np.float32: ...

""" slanst(norm: uint8, n: BlasInt, d: float32, e: float32) """
def slanst(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32) -> np.float32: ...

""" slansy(norm: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, work: float32) """
def slansy(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slantb(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, k: BlasInt, ab: float32, ldab: BlasInt, work: float32) """
def slantb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slantp(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: float32, work: float32) """
def slantp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, work: ScalarOrArray32) -> np.float32: ...

""" slantr(norm: uint8, uplo: uint8, diag: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, work: float32) """
def slantr(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, work: ScalarOrArray32) -> np.float32: ...

""" slanv2(a: float32, b: float32, c: float32, d: float32, rt1r: float32, rt1i: float32, rt2r: float32, rt2i: float32, cs: float32, sn: float32) """
def slanv2(a: ScalarOrArray32, b: ScalarOrArray32, c: ScalarOrArray32, d: ScalarOrArray32, rt1r: ScalarOrArray32, rt1i: ScalarOrArray32, rt2r: ScalarOrArray32, rt2i: ScalarOrArray32, cs: ScalarOrArray32, sn: ScalarOrArray32) -> None: ...

""" slapll(n: BlasInt, x: float32, incx: BlasInt, y: float32, incy: BlasInt, ssmin: float32) """
def slapll(n: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, y: ScalarOrArray32, incy: ScalarOrArrayInt, ssmin: ScalarOrArray32) -> None: ...

""" slapmr(forwrd: bool, m: BlasInt, n: BlasInt, x: float32, ldx: BlasInt, k: BlasInt) """
def slapmr(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" slapmt(forwrd: bool, m: BlasInt, n: BlasInt, x: float32, ldx: BlasInt, k: BlasInt) """
def slapmt(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" slapy2(x: float32, y: float32) """
def slapy2(x: ScalarOrArray32, y: ScalarOrArray32) -> np.float32: ...

""" slapy3(x: float32, y: float32, z: float32) """
def slapy3(x: ScalarOrArray32, y: ScalarOrArray32, z: ScalarOrArray32) -> np.float32: ...

""" slaqgb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: float32, ldab: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, equed: uint8) """
def slaqgb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" slaqge(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, r: float32, c: float32, rowcnd: float32, colcnd: float32, amax: float32, equed: uint8) """
def slaqge(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, r: ScalarOrArray32, c: ScalarOrArray32, rowcnd: ScalarOrArray32, colcnd: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" slaqp2(m: BlasInt, n: BlasInt, offset: BlasInt, a: float32, lda: BlasInt, jpvt: BlasInt, tau: float32, vn1: float32, vn2: float32, work: float32) """
def slaqp2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArray32, vn1: ScalarOrArray32, vn2: ScalarOrArray32, work: ScalarOrArray32) -> None: ...

""" slaqps(m: BlasInt, n: BlasInt, offset: BlasInt, nb: BlasInt, kb: BlasInt, a: float32, lda: BlasInt, jpvt: BlasInt, tau: float32, vn1: float32, vn2: float32, auxv: float32, f: float32, ldf: BlasInt) """
def slaqps(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArray32, vn1: ScalarOrArray32, vn2: ScalarOrArray32, auxv: ScalarOrArray32, f: ScalarOrArray32, ldf: ScalarOrArrayInt) -> None: ...

""" slaqr0(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float32, ldh: BlasInt, wr: float32, wi: float32, iloz: BlasInt, ihiz: BlasInt, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def slaqr0(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaqr1(n: BlasInt, h: float32, ldh: BlasInt, sr1: float32, si1: float32, sr2: float32, si2: float32, v: float32) """
def slaqr1(n: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, sr1: ScalarOrArray32, si1: ScalarOrArray32, sr2: ScalarOrArray32, si2: ScalarOrArray32, v: ScalarOrArray32) -> None: ...

""" slaqr2(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: float32, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: float32, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sr: float32, si: float32, v: float32, ldv: BlasInt, nh: BlasInt, t: float32, ldt: BlasInt, nv: BlasInt, wv: float32, ldwv: BlasInt, work: float32, lwork: BlasInt) """
def slaqr2(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sr: ScalarOrArray32, si: ScalarOrArray32, v: ScalarOrArray32, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArray32, ldwv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt) -> None: ...

""" slaqr3(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: float32, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: float32, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sr: float32, si: float32, v: float32, ldv: BlasInt, nh: BlasInt, t: float32, ldt: BlasInt, nv: BlasInt, wv: float32, ldwv: BlasInt, work: float32, lwork: BlasInt) """
def slaqr3(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sr: ScalarOrArray32, si: ScalarOrArray32, v: ScalarOrArray32, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArray32, ldwv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt) -> None: ...

""" slaqr4(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: float32, ldh: BlasInt, wr: float32, wi: float32, iloz: BlasInt, ihiz: BlasInt, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def slaqr4(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArray32, ldh: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slaqr5(wantt: bool, wantz: bool, kacc22: BlasInt, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nshfts: BlasInt, sr: float32, si: float32, h: float32, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: float32, ldz: BlasInt, v: float32, ldv: BlasInt, u: float32, ldu: BlasInt, nv: BlasInt, wv: float32, ldwv: BlasInt, nh: BlasInt, wh: float32, ldwh: BlasInt) """
def slaqr5(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, kacc22: ScalarOrArrayInt, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nshfts: ScalarOrArrayInt, sr: ScalarOrArray32, si: ScalarOrArray32, h: ScalarOrArray32, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, u: ScalarOrArray32, ldu: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArray32, ldwv: ScalarOrArrayInt, nh: ScalarOrArrayInt, wh: ScalarOrArray32, ldwh: ScalarOrArrayInt) -> None: ...

""" slaqsb(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, s: float32, scond: float32, amax: float32, equed: uint8) """
def slaqsb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" slaqsp(uplo: uint8, n: BlasInt, ap: float32, s: float32, scond: float32, amax: float32, equed: uint8) """
def slaqsp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" slaqsy(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, s: float32, scond: float32, amax: float32, equed: uint8) """
def slaqsy(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, equed: ScalarOrArrayU8) -> None: ...

""" slaqtr(ltran: bool, lreal: bool, n: BlasInt, t: float32, ldt: BlasInt, b: float32, w: float32, scale: float32, x: float32, work: float32, info: BlasInt) """
def slaqtr(ltran: ScalarOrArrayBool, lreal: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, b: ScalarOrArray32, w: ScalarOrArray32, scale: ScalarOrArray32, x: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slar1v(n: BlasInt, b1: BlasInt, bn: BlasInt, lambda_: float32, d: float32, l: float32, ld: float32, lld: float32, pivmin: float32, gaptol: float32, z: float32, wantnc: bool, negcnt: BlasInt, ztz: float32, mingma: float32, r: BlasInt, isuppz: BlasInt, nrminv: float32, resid: float32, rqcorr: float32, work: float32) """
def slar1v(n: ScalarOrArrayInt, b1: ScalarOrArrayInt, bn: ScalarOrArrayInt, lambda_: ScalarOrArray32, d: ScalarOrArray32, l: ScalarOrArray32, ld: ScalarOrArray32, lld: ScalarOrArray32, pivmin: ScalarOrArray32, gaptol: ScalarOrArray32, z: ScalarOrArray32, wantnc: ScalarOrArrayBool, negcnt: ScalarOrArrayInt, ztz: ScalarOrArray32, mingma: ScalarOrArray32, r: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, nrminv: ScalarOrArray32, resid: ScalarOrArray32, rqcorr: ScalarOrArray32, work: ScalarOrArray32) -> None: ...

""" slar2v(n: BlasInt, x: float32, y: float32, z: float32, incx: BlasInt, c: float32, s: float32, incc: BlasInt) """
def slar2v(n: ScalarOrArrayInt, x: ScalarOrArray32, y: ScalarOrArray32, z: ScalarOrArray32, incx: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, incc: ScalarOrArrayInt) -> None: ...

""" slarf(side: uint8, m: BlasInt, n: BlasInt, v: float32, incv: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32) """
def slarf(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArray32, incv: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32) -> None: ...

""" slarfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, v: float32, ldv: BlasInt, t: float32, ldt: BlasInt, c: float32, ldc: BlasInt, work: float32, ldwork: BlasInt) """
def slarfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, ldwork: ScalarOrArrayInt) -> None: ...

""" slarfg(n: BlasInt, alpha: float32, x: float32, incx: BlasInt, tau: float32) """
def slarfg(n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, tau: ScalarOrArray32) -> None: ...

""" slarfgp(n: BlasInt, alpha: float32, x: float32, incx: BlasInt, tau: float32) """
def slarfgp(n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, tau: ScalarOrArray32) -> None: ...

""" slarft(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: float32, ldv: BlasInt, tau: float32, t: float32, ldt: BlasInt) """
def slarft(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, tau: ScalarOrArray32, t: ScalarOrArray32, ldt: ScalarOrArrayInt) -> None: ...

""" slarfx(side: uint8, m: BlasInt, n: BlasInt, v: float32, tau: float32, c: float32, ldc: BlasInt, work: float32) """
def slarfx(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArray32, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32) -> None: ...

""" slargv(n: BlasInt, x: float32, incx: BlasInt, y: float32, incy: BlasInt, c: float32, incc: BlasInt) """
def slargv(n: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, y: ScalarOrArray32, incy: ScalarOrArrayInt, c: ScalarOrArray32, incc: ScalarOrArrayInt) -> None: ...

""" slarnv(idist: BlasInt, iseed: BlasInt, n: BlasInt, x: float32) """
def slarnv(idist: ScalarOrArrayInt, iseed: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray32) -> None: ...

""" slarra(n: BlasInt, d: float32, e: float32, e2: float32, spltol: float32, tnrm: float32, nsplit: BlasInt, isplit: BlasInt, info: BlasInt) """
def slarra(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, e2: ScalarOrArray32, spltol: ScalarOrArray32, tnrm: ScalarOrArray32, nsplit: ScalarOrArrayInt, isplit: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slarrb(n: BlasInt, d: float32, lld: float32, ifirst: BlasInt, ilast: BlasInt, rtol1: float32, rtol2: float32, offset: BlasInt, w: float32, wgap: float32, werr: float32, work: float32, iwork: BlasInt, pivmin: float32, spdiam: float32, twist: BlasInt, info: BlasInt) """
def slarrb(n: ScalarOrArrayInt, d: ScalarOrArray32, lld: ScalarOrArray32, ifirst: ScalarOrArrayInt, ilast: ScalarOrArrayInt, rtol1: ScalarOrArray32, rtol2: ScalarOrArray32, offset: ScalarOrArrayInt, w: ScalarOrArray32, wgap: ScalarOrArray32, werr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, pivmin: ScalarOrArray32, spdiam: ScalarOrArray32, twist: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slarrc(jobt: uint8, n: BlasInt, vl: float32, vu: float32, d: float32, e: float32, pivmin: float32, eigcnt: BlasInt, lcnt: BlasInt, rcnt: BlasInt, info: BlasInt) """
def slarrc(jobt: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, d: ScalarOrArray32, e: ScalarOrArray32, pivmin: ScalarOrArray32, eigcnt: ScalarOrArrayInt, lcnt: ScalarOrArrayInt, rcnt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slarrd(range: uint8, order: uint8, n: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, gers: float32, reltol: float32, d: float32, e: float32, e2: float32, pivmin: float32, nsplit: BlasInt, isplit: BlasInt, m: BlasInt, w: float32, werr: float32, wl: float32, wu: float32, iblock: BlasInt, indexw: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def slarrd(range: ScalarOrArrayU8, order: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, gers: ScalarOrArray32, reltol: ScalarOrArray32, d: ScalarOrArray32, e: ScalarOrArray32, e2: ScalarOrArray32, pivmin: ScalarOrArray32, nsplit: ScalarOrArrayInt, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray32, werr: ScalarOrArray32, wl: ScalarOrArray32, wu: ScalarOrArray32, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slarre(range: uint8, n: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, d: float32, e: float32, e2: float32, rtol1: float32, rtol2: float32, spltol: float32, nsplit: BlasInt, isplit: BlasInt, m: BlasInt, w: float32, werr: float32, wgap: float32, iblock: BlasInt, indexw: BlasInt, gers: float32, pivmin: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def slarre(range: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, e2: ScalarOrArray32, rtol1: ScalarOrArray32, rtol2: ScalarOrArray32, spltol: ScalarOrArray32, nsplit: ScalarOrArrayInt, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray32, werr: ScalarOrArray32, wgap: ScalarOrArray32, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, gers: ScalarOrArray32, pivmin: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slarrf(n: BlasInt, d: float32, l: float32, ld: float32, clstrt: BlasInt, clend: BlasInt, w: float32, wgap: float32, werr: float32, spdiam: float32, clgapl: float32, clgapr: float32, pivmin: float32, sigma: float32, dplus: float32, lplus: float32, work: float32, info: BlasInt) """
def slarrf(n: ScalarOrArrayInt, d: ScalarOrArray32, l: ScalarOrArray32, ld: ScalarOrArray32, clstrt: ScalarOrArrayInt, clend: ScalarOrArrayInt, w: ScalarOrArray32, wgap: ScalarOrArray32, werr: ScalarOrArray32, spdiam: ScalarOrArray32, clgapl: ScalarOrArray32, clgapr: ScalarOrArray32, pivmin: ScalarOrArray32, sigma: ScalarOrArray32, dplus: ScalarOrArray32, lplus: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slarrj(n: BlasInt, d: float32, e2: float32, ifirst: BlasInt, ilast: BlasInt, rtol: float32, offset: BlasInt, w: float32, werr: float32, work: float32, iwork: BlasInt, pivmin: float32, spdiam: float32, info: BlasInt) """
def slarrj(n: ScalarOrArrayInt, d: ScalarOrArray32, e2: ScalarOrArray32, ifirst: ScalarOrArrayInt, ilast: ScalarOrArrayInt, rtol: ScalarOrArray32, offset: ScalarOrArrayInt, w: ScalarOrArray32, werr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, pivmin: ScalarOrArray32, spdiam: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slarrk(n: BlasInt, iw: BlasInt, gl: float32, gu: float32, d: float32, e2: float32, pivmin: float32, reltol: float32, w: float32, werr: float32, info: BlasInt) """
def slarrk(n: ScalarOrArrayInt, iw: ScalarOrArrayInt, gl: ScalarOrArray32, gu: ScalarOrArray32, d: ScalarOrArray32, e2: ScalarOrArray32, pivmin: ScalarOrArray32, reltol: ScalarOrArray32, w: ScalarOrArray32, werr: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slarrr(n: BlasInt, d: float32, e: float32, info: BlasInt) """
def slarrr(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slarrv(n: BlasInt, vl: float32, vu: float32, d: float32, l: float32, pivmin: float32, isplit: BlasInt, m: BlasInt, dol: BlasInt, dou: BlasInt, minrgp: float32, rtol1: float32, rtol2: float32, w: float32, werr: float32, wgap: float32, iblock: BlasInt, indexw: BlasInt, gers: float32, z: float32, ldz: BlasInt, isuppz: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def slarrv(n: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, d: ScalarOrArray32, l: ScalarOrArray32, pivmin: ScalarOrArray32, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, dol: ScalarOrArrayInt, dou: ScalarOrArrayInt, minrgp: ScalarOrArray32, rtol1: ScalarOrArray32, rtol2: ScalarOrArray32, w: ScalarOrArray32, werr: ScalarOrArray32, wgap: ScalarOrArray32, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, gers: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slartg(f: float32, g: float32, cs: float32, sn: float32, r: float32) """
def slartg(f: ScalarOrArray32, g: ScalarOrArray32, cs: ScalarOrArray32, sn: ScalarOrArray32, r: ScalarOrArray32) -> None: ...

""" slartgp(f: float32, g: float32, cs: float32, sn: float32, r: float32) """
def slartgp(f: ScalarOrArray32, g: ScalarOrArray32, cs: ScalarOrArray32, sn: ScalarOrArray32, r: ScalarOrArray32) -> None: ...

""" slartgs(x: float32, y: float32, sigma: float32, cs: float32, sn: float32) """
def slartgs(x: ScalarOrArray32, y: ScalarOrArray32, sigma: ScalarOrArray32, cs: ScalarOrArray32, sn: ScalarOrArray32) -> None: ...

""" slartv(n: BlasInt, x: float32, incx: BlasInt, y: float32, incy: BlasInt, c: float32, s: float32, incc: BlasInt) """
def slartv(n: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, y: ScalarOrArray32, incy: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, incc: ScalarOrArrayInt) -> None: ...

""" slaruv(iseed: BlasInt, n: BlasInt, x: float32) """
def slaruv(iseed: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArray32) -> None: ...

""" slarz(side: uint8, m: BlasInt, n: BlasInt, l: BlasInt, v: float32, incv: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32) """
def slarz(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArray32, incv: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32) -> None: ...

""" slarzb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: float32, ldv: BlasInt, t: float32, ldt: BlasInt, c: float32, ldc: BlasInt, work: float32, ldwork: BlasInt) """
def slarzb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, ldwork: ScalarOrArrayInt) -> None: ...

""" slarzt(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: float32, ldv: BlasInt, tau: float32, t: float32, ldt: BlasInt) """
def slarzt(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, tau: ScalarOrArray32, t: ScalarOrArray32, ldt: ScalarOrArrayInt) -> None: ...

""" slas2(f: float32, g: float32, h: float32, ssmin: float32, ssmax: float32) """
def slas2(f: ScalarOrArray32, g: ScalarOrArray32, h: ScalarOrArray32, ssmin: ScalarOrArray32, ssmax: ScalarOrArray32) -> None: ...

""" slascl(type_bn: uint8, kl: BlasInt, ku: BlasInt, cfrom: float32, cto: float32, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def slascl(type_bn: ScalarOrArrayU8, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, cfrom: ScalarOrArray32, cto: ScalarOrArray32, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slasd0(n: BlasInt, sqre: BlasInt, d: float32, e: float32, u: float32, ldu: BlasInt, vt: float32, ldvt: BlasInt, smlsiz: BlasInt, iwork: BlasInt, work: float32, info: BlasInt) """
def slasd0(n: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, iwork: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasd1(nl: BlasInt, nr: BlasInt, sqre: BlasInt, d: float32, alpha: float32, beta: float32, u: float32, ldu: BlasInt, vt: float32, ldvt: BlasInt, idxq: BlasInt, iwork: BlasInt, work: float32, info: BlasInt) """
def slasd1(nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray32, alpha: ScalarOrArray32, beta: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, idxq: ScalarOrArrayInt, iwork: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasd2(nl: BlasInt, nr: BlasInt, sqre: BlasInt, k: BlasInt, d: float32, z: float32, alpha: float32, beta: float32, u: float32, ldu: BlasInt, vt: float32, ldvt: BlasInt, dsigma: float32, u2: float32, ldu2: BlasInt, vt2: float32, ldvt2: BlasInt, idxp: BlasInt, idx: BlasInt, idxc: BlasInt, idxq: BlasInt, coltyp: BlasInt, info: BlasInt) """
def slasd2(nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, alpha: ScalarOrArray32, beta: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, dsigma: ScalarOrArray32, u2: ScalarOrArray32, ldu2: ScalarOrArrayInt, vt2: ScalarOrArray32, ldvt2: ScalarOrArrayInt, idxp: ScalarOrArrayInt, idx: ScalarOrArrayInt, idxc: ScalarOrArrayInt, idxq: ScalarOrArrayInt, coltyp: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slasd3(nl: BlasInt, nr: BlasInt, sqre: BlasInt, k: BlasInt, d: float32, q: float32, ldq: BlasInt, dsigma: float32, u: float32, ldu: BlasInt, u2: float32, ldu2: BlasInt, vt: float32, ldvt: BlasInt, vt2: float32, ldvt2: BlasInt, idxc: BlasInt, ctot: BlasInt, z: float32, info: BlasInt) """
def slasd3(nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, dsigma: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, u2: ScalarOrArray32, ldu2: ScalarOrArrayInt, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, vt2: ScalarOrArray32, ldvt2: ScalarOrArrayInt, idxc: ScalarOrArrayInt, ctot: ScalarOrArrayInt, z: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasd4(n: BlasInt, i: BlasInt, d: float32, z: float32, delta: float32, rho: float32, sigma: float32, work: float32, info: BlasInt) """
def slasd4(n: ScalarOrArrayInt, i: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, delta: ScalarOrArray32, rho: ScalarOrArray32, sigma: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasd5(i: BlasInt, d: float32, z: float32, delta: float32, rho: float32, dsigma: float32, work: float32) """
def slasd5(i: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, delta: ScalarOrArray32, rho: ScalarOrArray32, dsigma: ScalarOrArray32, work: ScalarOrArray32) -> None: ...

""" slasd6(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, d: float32, vf: float32, vl: float32, alpha: float32, beta: float32, idxq: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float32, ldgnum: BlasInt, poles: float32, difl: float32, difr: float32, z: float32, k: BlasInt, c: float32, s: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def slasd6(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray32, vf: ScalarOrArray32, vl: ScalarOrArray32, alpha: ScalarOrArray32, beta: ScalarOrArray32, idxq: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray32, ldgnum: ScalarOrArrayInt, poles: ScalarOrArray32, difl: ScalarOrArray32, difr: ScalarOrArray32, z: ScalarOrArray32, k: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slasd7(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, k: BlasInt, d: float32, z: float32, zw: float32, vf: float32, vfw: float32, vl: float32, vlw: float32, alpha: float32, beta: float32, dsigma: float32, idx: BlasInt, idxp: BlasInt, idxq: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float32, ldgnum: BlasInt, c: float32, s: float32, info: BlasInt) """
def slasd7(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, zw: ScalarOrArray32, vf: ScalarOrArray32, vfw: ScalarOrArray32, vl: ScalarOrArray32, vlw: ScalarOrArray32, alpha: ScalarOrArray32, beta: ScalarOrArray32, dsigma: ScalarOrArray32, idx: ScalarOrArrayInt, idxp: ScalarOrArrayInt, idxq: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray32, ldgnum: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasd8(icompq: BlasInt, k: BlasInt, d: float32, z: float32, vf: float32, vl: float32, difl: float32, difr: float32, lddifr: BlasInt, dsigma: float32, work: float32, info: BlasInt) """
def slasd8(icompq: ScalarOrArrayInt, k: ScalarOrArrayInt, d: ScalarOrArray32, z: ScalarOrArray32, vf: ScalarOrArray32, vl: ScalarOrArray32, difl: ScalarOrArray32, difr: ScalarOrArray32, lddifr: ScalarOrArrayInt, dsigma: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasda(icompq: BlasInt, smlsiz: BlasInt, n: BlasInt, sqre: BlasInt, d: float32, e: float32, u: float32, ldu: BlasInt, vt: float32, k: BlasInt, difl: float32, difr: float32, z: float32, poles: float32, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, perm: BlasInt, givnum: float32, c: float32, s: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def slasda(icompq: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, sqre: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, vt: ScalarOrArray32, k: ScalarOrArrayInt, difl: ScalarOrArray32, difr: ScalarOrArray32, z: ScalarOrArray32, poles: ScalarOrArray32, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, perm: ScalarOrArrayInt, givnum: ScalarOrArray32, c: ScalarOrArray32, s: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slasdq(uplo: uint8, sqre: BlasInt, n: BlasInt, ncvt: BlasInt, nru: BlasInt, ncc: BlasInt, d: float32, e: float32, vt: float32, ldvt: BlasInt, u: float32, ldu: BlasInt, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def slasdq(uplo: ScalarOrArrayU8, sqre: ScalarOrArrayInt, n: ScalarOrArrayInt, ncvt: ScalarOrArrayInt, nru: ScalarOrArrayInt, ncc: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vt: ScalarOrArray32, ldvt: ScalarOrArrayInt, u: ScalarOrArray32, ldu: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasdt(n: BlasInt, lvl: BlasInt, nd: BlasInt, inode: BlasInt, ndiml: BlasInt, ndimr: BlasInt, msub: BlasInt) """
def slasdt(n: ScalarOrArrayInt, lvl: ScalarOrArrayInt, nd: ScalarOrArrayInt, inode: ScalarOrArrayInt, ndiml: ScalarOrArrayInt, ndimr: ScalarOrArrayInt, msub: ScalarOrArrayInt) -> None: ...

""" slaset(uplo: uint8, m: BlasInt, n: BlasInt, alpha: float32, beta: float32, a: float32, lda: BlasInt) """
def slaset(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, beta: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> None: ...

""" slasq1(n: BlasInt, d: float32, e: float32, work: float32, info: BlasInt) """
def slasq1(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasq2(n: BlasInt, z: float32, info: BlasInt) """
def slasq2(n: ScalarOrArrayInt, z: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasq3(i0: BlasInt, n0: BlasInt, z: float32, pp: BlasInt, dmin: float32, sigma: float32, desig: float32, qmax: float32, nfail: BlasInt, iter: BlasInt, ndiv: BlasInt, ieee: bool, ttype: BlasInt, dmin1: float32, dmin2: float32, dn: float32, dn1: float32, dn2: float32, g: float32, tau: float32) """
def slasq3(i0: ScalarOrArrayInt, n0: ScalarOrArrayInt, z: ScalarOrArray32, pp: ScalarOrArrayInt, dmin: ScalarOrArray32, sigma: ScalarOrArray32, desig: ScalarOrArray32, qmax: ScalarOrArray32, nfail: ScalarOrArrayInt, iter: ScalarOrArrayInt, ndiv: ScalarOrArrayInt, ieee: ScalarOrArrayBool, ttype: ScalarOrArrayInt, dmin1: ScalarOrArray32, dmin2: ScalarOrArray32, dn: ScalarOrArray32, dn1: ScalarOrArray32, dn2: ScalarOrArray32, g: ScalarOrArray32, tau: ScalarOrArray32) -> None: ...

""" slasq4(i0: BlasInt, n0: BlasInt, z: float32, pp: BlasInt, n0in: BlasInt, dmin: float32, dmin1: float32, dmin2: float32, dn: float32, dn1: float32, dn2: float32, tau: float32, ttype: BlasInt, g: float32) """
def slasq4(i0: ScalarOrArrayInt, n0: ScalarOrArrayInt, z: ScalarOrArray32, pp: ScalarOrArrayInt, n0in: ScalarOrArrayInt, dmin: ScalarOrArray32, dmin1: ScalarOrArray32, dmin2: ScalarOrArray32, dn: ScalarOrArray32, dn1: ScalarOrArray32, dn2: ScalarOrArray32, tau: ScalarOrArray32, ttype: ScalarOrArrayInt, g: ScalarOrArray32) -> None: ...

""" slasq6(i0: BlasInt, n0: BlasInt, z: float32, pp: BlasInt, dmin: float32, dmin1: float32, dmin2: float32, dn: float32, dnm1: float32, dnm2: float32) """
def slasq6(i0: ScalarOrArrayInt, n0: ScalarOrArrayInt, z: ScalarOrArray32, pp: ScalarOrArrayInt, dmin: ScalarOrArray32, dmin1: ScalarOrArray32, dmin2: ScalarOrArray32, dn: ScalarOrArray32, dnm1: ScalarOrArray32, dnm2: ScalarOrArray32) -> None: ...

""" slasr(side: uint8, pivot: uint8, direct: uint8, m: BlasInt, n: BlasInt, c: float32, s: float32, a: float32, lda: BlasInt) """
def slasr(side: ScalarOrArrayU8, pivot: ScalarOrArrayU8, direct: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> None: ...

""" slasrt(id: uint8, n: BlasInt, d: float32, info: BlasInt) """
def slasrt(id: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slassq(n: BlasInt, x: float32, incx: BlasInt, scale: float32, sumsq: float32) """
def slassq(n: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, scale: ScalarOrArray32, sumsq: ScalarOrArray32) -> None: ...

""" slasv2(f: float32, g: float32, h: float32, ssmin: float32, ssmax: float32, snr: float32, csr: float32, snl: float32, csl: float32) """
def slasv2(f: ScalarOrArray32, g: ScalarOrArray32, h: ScalarOrArray32, ssmin: ScalarOrArray32, ssmax: ScalarOrArray32, snr: ScalarOrArray32, csr: ScalarOrArray32, snl: ScalarOrArray32, csl: ScalarOrArray32) -> None: ...

""" slaswp(n: BlasInt, a: float32, lda: BlasInt, k1: BlasInt, k2: BlasInt, ipiv: BlasInt, incx: BlasInt) """
def slaswp(n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, k1: ScalarOrArrayInt, k2: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, incx: ScalarOrArrayInt) -> None: ...

""" slasy2(ltranl: bool, ltranr: bool, isgn: BlasInt, n1: BlasInt, n2: BlasInt, tl: float32, ldtl: BlasInt, tr: float32, ldtr: BlasInt, b: float32, ldb: BlasInt, scale: float32, x: float32, ldx: BlasInt, xnorm: float32, info: BlasInt) """
def slasy2(ltranl: ScalarOrArrayBool, ltranr: ScalarOrArrayBool, isgn: ScalarOrArrayInt, n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, tl: ScalarOrArray32, ldtl: ScalarOrArrayInt, tr: ScalarOrArray32, ldtr: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, scale: ScalarOrArray32, x: ScalarOrArray32, ldx: ScalarOrArrayInt, xnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slasyf(uplo: uint8, n: BlasInt, nb: BlasInt, kb: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, w: float32, ldw: BlasInt, info: BlasInt) """
def slasyf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, w: ScalarOrArray32, ldw: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slatbs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, x: float32, scale: float32, cnorm: float32, info: BlasInt) """
def slatbs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, x: ScalarOrArray32, scale: ScalarOrArray32, cnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slatdf(ijob: BlasInt, n: BlasInt, z: float32, ldz: BlasInt, rhs: float32, rdsum: float32, rdscal: float32, ipiv: BlasInt, jpiv: BlasInt) """
def slatdf(ijob: ScalarOrArrayInt, n: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, rhs: ScalarOrArray32, rdsum: ScalarOrArray32, rdscal: ScalarOrArray32, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt) -> None: ...

""" slatps(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, ap: float32, x: float32, scale: float32, cnorm: float32, info: BlasInt) """
def slatps(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, x: ScalarOrArray32, scale: ScalarOrArray32, cnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slatrd(uplo: uint8, n: BlasInt, nb: BlasInt, a: float32, lda: BlasInt, e: float32, tau: float32, w: float32, ldw: BlasInt) """
def slatrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, e: ScalarOrArray32, tau: ScalarOrArray32, w: ScalarOrArray32, ldw: ScalarOrArrayInt) -> None: ...

""" slatrs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, a: float32, lda: BlasInt, x: float32, scale: float32, cnorm: float32, info: BlasInt) """
def slatrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, scale: ScalarOrArray32, cnorm: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" slatrz(m: BlasInt, n: BlasInt, l: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32) """
def slatrz(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32) -> None: ...

""" slauu2(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def slauu2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" slauum(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def slauum(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" snrm2(n: BlasInt, x: float32, incx: BlasInt) """
def snrm2(n: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> np.float32: ...

""" sopgtr(uplo: uint8, n: BlasInt, ap: float32, tau: float32, q: float32, ldq: BlasInt, work: float32, info: BlasInt) """
def sopgtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, tau: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sopmtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, ap: float32, tau: float32, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sopmtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ap: ScalarOrArray32, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sorbdb(trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: float32, ldx11: BlasInt, x12: float32, ldx12: BlasInt, x21: float32, ldx21: BlasInt, x22: float32, ldx22: BlasInt, theta: float32, phi: float32, taup1: float32, taup2: float32, tauq1: float32, tauq2: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorbdb(trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArray32, ldx11: ScalarOrArrayInt, x12: ScalarOrArray32, ldx12: ScalarOrArrayInt, x21: ScalarOrArray32, ldx21: ScalarOrArrayInt, x22: ScalarOrArray32, ldx22: ScalarOrArrayInt, theta: ScalarOrArray32, phi: ScalarOrArray32, taup1: ScalarOrArray32, taup2: ScalarOrArray32, tauq1: ScalarOrArray32, tauq2: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorcsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: float32, ldx11: BlasInt, x12: float32, ldx12: BlasInt, x21: float32, ldx21: BlasInt, x22: float32, ldx22: BlasInt, theta: float32, u1: float32, ldu1: BlasInt, u2: float32, ldu2: BlasInt, v1t: float32, ldv1t: BlasInt, v2t: float32, ldv2t: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def sorcsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArray32, ldx11: ScalarOrArrayInt, x12: ScalarOrArray32, ldx12: ScalarOrArrayInt, x21: ScalarOrArray32, ldx21: ScalarOrArrayInt, x22: ScalarOrArray32, ldx22: ScalarOrArrayInt, theta: ScalarOrArray32, u1: ScalarOrArray32, ldu1: ScalarOrArrayInt, u2: ScalarOrArray32, ldu2: ScalarOrArrayInt, v1t: ScalarOrArray32, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArray32, ldv2t: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorg2l(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sorg2l(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sorg2r(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sorg2r(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sorgbr(vect: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorgbr(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorghr(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorghr(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorgl2(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sorgl2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sorglq(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorglq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorgql(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorgql(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorgqr(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorgqr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorgr2(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, info: BlasInt) """
def sorgr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sorgrq(m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorgrq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorgtr(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def sorgtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorm2l(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sorm2l(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sorm2r(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sorm2r(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sormbr(vect: uint8, side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormbr(vect: ScalarOrArrayU8, side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sormhr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormhr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sorml2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sorml2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sormlq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormlq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sormql(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormql(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sormqr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormqr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sormr2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sormr2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sormr3(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, info: BlasInt) """
def sormr3(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sormrq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormrq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sormrz(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormrz(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sormtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, c: float32, ldc: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def sormtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbcon(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def spbcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbequ(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, s: float32, scond: float32, amax: float32, info: BlasInt) """
def spbequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spbrfs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, afb: float32, ldafb: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def spbrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, afb: ScalarOrArray32, ldafb: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbstf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, info: BlasInt) """
def spbstf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbsv(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def spbsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbsvx(fact: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, afb: float32, ldafb: BlasInt, equed: uint8, s: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def spbsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, afb: ScalarOrArray32, ldafb: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbtf2(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, info: BlasInt) """
def spbtf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbtrf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, info: BlasInt) """
def spbtrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spbtrs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def spbtrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spftrf(transr: uint8, uplo: uint8, n: BlasInt, a: float32, info: BlasInt) """
def spftrf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spftri(transr: uint8, uplo: uint8, n: BlasInt, a: float32, info: BlasInt) """
def spftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spftrs(transr: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def spftrs(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spocon(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def spocon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spoequ(n: BlasInt, a: float32, lda: BlasInt, s: float32, scond: float32, amax: float32, info: BlasInt) """
def spoequ(n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spoequb(n: BlasInt, a: float32, lda: BlasInt, s: float32, scond: float32, amax: float32, info: BlasInt) """
def spoequb(n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sporfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, af: float32, ldaf: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sporfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, af: ScalarOrArray32, ldaf: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sposv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sposv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sposvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, af: float32, ldaf: BlasInt, equed: uint8, s: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sposvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, af: ScalarOrArray32, ldaf: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spotf2(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def spotf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spotrf(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def spotrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spotri(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def spotri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spotrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def spotrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sppcon(uplo: uint8, n: BlasInt, ap: float32, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sppcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sppequ(uplo: uint8, n: BlasInt, ap: float32, s: float32, scond: float32, amax: float32, info: BlasInt) """
def sppequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, afp: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def spprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, afp: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sppsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def sppsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sppsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, afp: float32, equed: uint8, s: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sppsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, afp: ScalarOrArray32, equed: ScalarOrArrayU8, s: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spptrf(uplo: uint8, n: BlasInt, ap: float32, info: BlasInt) """
def spptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spptri(uplo: uint8, n: BlasInt, ap: float32, info: BlasInt) """
def spptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def spptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" spstf2(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float32, work: float32, info: BlasInt) """
def spstf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spstrf(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float32, work: float32, info: BlasInt) """
def spstrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sptcon(n: BlasInt, d: float32, e: float32, anorm: float32, rcond: float32, work: float32, info: BlasInt) """
def sptcon(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spteqr(compz: uint8, n: BlasInt, d: float32, e: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def spteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sptrfs(n: BlasInt, nrhs: BlasInt, d: float32, e: float32, df: float32, ef: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, info: BlasInt) """
def sptrfs(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, df: ScalarOrArray32, ef: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sptsv(n: BlasInt, nrhs: BlasInt, d: float32, e: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def sptsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sptsvx(fact: uint8, n: BlasInt, nrhs: BlasInt, d: float32, e: float32, df: float32, ef: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, info: BlasInt) """
def sptsvx(fact: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, df: ScalarOrArray32, ef: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spttrf(n: BlasInt, d: float32, e: float32, info: BlasInt) """
def spttrf(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" spttrs(n: BlasInt, nrhs: BlasInt, d: float32, e: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def spttrs(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sptts2(n: BlasInt, nrhs: BlasInt, d: float32, e: float32, b: float32, ldb: BlasInt) """
def sptts2(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" srot(n: BlasInt, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt, c: float32, s: float32) """
def srot(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt, c: ScalarOrArray32, s: ScalarOrArray32) -> None: ...

""" srotg(sa: float32, sb: float32, c: float32, s: float32) """
def srotg(sa: ScalarOrArray32, sb: ScalarOrArray32, c: ScalarOrArray32, s: ScalarOrArray32) -> None: ...

""" srotm(n: BlasInt, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt, sparam: float32) """
def srotm(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt, sparam: ScalarOrArray32) -> None: ...

""" srotmg(sd1: float32, sd2: float32, sx1: float32, sy1: float32, sparam: float32) """
def srotmg(sd1: ScalarOrArray32, sd2: ScalarOrArray32, sx1: ScalarOrArray32, sy1: ScalarOrArray32, sparam: ScalarOrArray32) -> None: ...

""" srscl(n: BlasInt, sa: float32, sx: float32, incx: BlasInt) """
def srscl(n: ScalarOrArrayInt, sa: ScalarOrArray32, sx: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" ssbev(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def ssbev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssbevd(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ssbevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssbevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, q: float32, ldq: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def ssbevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssbgst(vect: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float32, ldab: BlasInt, bb: float32, ldbb: BlasInt, x: float32, ldx: BlasInt, work: float32, info: BlasInt) """
def ssbgst(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, bb: ScalarOrArray32, ldbb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssbgv(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float32, ldab: BlasInt, bb: float32, ldbb: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def ssbgv(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, bb: ScalarOrArray32, ldbb: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssbgvd(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float32, ldab: BlasInt, bb: float32, ldbb: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ssbgvd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, bb: ScalarOrArray32, ldbb: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssbgvx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: float32, ldab: BlasInt, bb: float32, ldbb: BlasInt, q: float32, ldq: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def ssbgvx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, bb: ScalarOrArray32, ldbb: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssbmv(uplo: uint8, n: BlasInt, k: BlasInt, alpha: float32, a: float32, lda: BlasInt, x: float32, incx: BlasInt, beta: float32, y: float32, incy: BlasInt) """
def ssbmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, beta: ScalarOrArray32, y: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" ssbtrd(vect: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, d: float32, e: float32, q: float32, ldq: BlasInt, work: float32, info: BlasInt) """
def ssbtrd(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sscal(n: BlasInt, sa: float32, sx: float32, incx: BlasInt) """
def sscal(n: ScalarOrArrayInt, sa: ScalarOrArray32, sx: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" ssfrk(transr: uint8, uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float32, a: float32, lda: BlasInt, beta: float32, c: float32) """
def ssfrk(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArray32) -> None: ...

""" sspcon(uplo: uint8, n: BlasInt, ap: float32, ipiv: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sspcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspev(jobz: uint8, uplo: uint8, n: BlasInt, ap: float32, w: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def sspev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sspevd(jobz: uint8, uplo: uint8, n: BlasInt, ap: float32, w: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sspevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def sspevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspgst(itype: BlasInt, uplo: uint8, n: BlasInt, ap: float32, bp: float32, info: BlasInt) """
def sspgst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, bp: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sspgv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: float32, bp: float32, w: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def sspgv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, bp: ScalarOrArray32, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sspgvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: float32, bp: float32, w: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sspgvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, bp: ScalarOrArray32, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspgvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: float32, bp: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def sspgvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, bp: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspmv(uplo: uint8, n: BlasInt, alpha: float32, ap: float32, x: float32, incx: BlasInt, beta: float32, y: float32, incy: BlasInt) """
def sspmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, ap: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, beta: ScalarOrArray32, y: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" sspr(uplo: uint8, n: BlasInt, alpha: float32, x: float32, incx: BlasInt, ap: float32) """
def sspr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, ap: ScalarOrArray32) -> None: ...

""" sspr2(uplo: uint8, n: BlasInt, alpha: float32, x: float32, incx: BlasInt, y: float32, incy: BlasInt, ap: float32) """
def sspr2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, y: ScalarOrArray32, incy: ScalarOrArrayInt, ap: ScalarOrArray32) -> None: ...

""" ssprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, afp: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def ssprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, afp: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def sspsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sspsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, afp: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def sspsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, afp: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssptrd(uplo: uint8, n: BlasInt, ap: float32, d: float32, e: float32, tau: float32, info: BlasInt) """
def ssptrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, d: ScalarOrArray32, e: ScalarOrArray32, tau: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssptrf(uplo: uint8, n: BlasInt, ap: float32, ipiv: BlasInt, info: BlasInt) """
def ssptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssptri(uplo: uint8, n: BlasInt, ap: float32, ipiv: BlasInt, work: float32, info: BlasInt) """
def ssptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def ssptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstebz(range: uint8, order: uint8, n: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, d: float32, e: float32, m: BlasInt, nsplit: BlasInt, w: float32, iblock: BlasInt, isplit: BlasInt, work: float32, iwork: BlasInt, info: BlasInt) """
def sstebz(range: ScalarOrArrayU8, order: ScalarOrArrayU8, n: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, d: ScalarOrArray32, e: ScalarOrArray32, m: ScalarOrArrayInt, nsplit: ScalarOrArrayInt, w: ScalarOrArray32, iblock: ScalarOrArrayInt, isplit: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstedc(compz: uint8, n: BlasInt, d: float32, e: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sstedc(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstegr(jobz: uint8, range: uint8, n: BlasInt, d: float32, e: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, isuppz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sstegr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstein(n: BlasInt, d: float32, e: float32, m: BlasInt, w: float32, iblock: BlasInt, isplit: BlasInt, z: float32, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def sstein(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, iblock: ScalarOrArrayInt, isplit: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstemr(jobz: uint8, range: uint8, n: BlasInt, d: float32, e: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, m: BlasInt, w: float32, z: float32, ldz: BlasInt, nzc: BlasInt, isuppz: BlasInt, tryrac: bool, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sstemr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, nzc: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, tryrac: ScalarOrArrayBool, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssteqr(compz: uint8, n: BlasInt, d: float32, e: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def ssteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssterf(n: BlasInt, d: float32, e: float32, info: BlasInt) """
def ssterf(n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sstev(jobz: uint8, n: BlasInt, d: float32, e: float32, z: float32, ldz: BlasInt, work: float32, info: BlasInt) """
def sstev(jobz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" sstevd(jobz: uint8, n: BlasInt, d: float32, e: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sstevd(jobz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstevr(jobz: uint8, range: uint8, n: BlasInt, d: float32, e: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, isuppz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def sstevr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sstevx(jobz: uint8, range: uint8, n: BlasInt, d: float32, e: float32, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def sstevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" sswap(n: BlasInt, sx: float32, incx: BlasInt, sy: float32, incy: BlasInt) """
def sswap(n: ScalarOrArrayInt, sx: ScalarOrArray32, incx: ScalarOrArrayInt, sy: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" ssycon(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, anorm: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def ssycon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssyconv(uplo: uint8, way: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, work: float32, info: BlasInt) """
def ssyconv(uplo: ScalarOrArrayU8, way: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssyequb(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, s: float32, scond: float32, amax: float32, work: float32, info: BlasInt) """
def ssyequb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, s: ScalarOrArray32, scond: ScalarOrArray32, amax: ScalarOrArray32, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssyev(jobz: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, w: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def ssyev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssyevd(jobz: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, w: float32, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ssyevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssyevr(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, isuppz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ssyevr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssyevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def ssyevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssygs2(itype: BlasInt, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def ssygs2(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssygst(itype: BlasInt, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def ssygst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssygv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, w: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def ssygv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssygvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, w: float32, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ssygvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, w: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssygvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, vl: float32, vu: float32, il: BlasInt, iu: BlasInt, abstol: float32, m: BlasInt, w: float32, z: float32, ldz: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def ssygvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, vl: ScalarOrArray32, vu: ScalarOrArray32, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray32, m: ScalarOrArrayInt, w: ScalarOrArray32, z: ScalarOrArray32, ldz: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssymm(side: uint8, uplo: uint8, m: BlasInt, n: BlasInt, alpha: float32, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, beta: float32, c: float32, ldc: BlasInt) """
def ssymm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt) -> None: ...

""" ssymv(uplo: uint8, n: BlasInt, alpha: float32, a: float32, lda: BlasInt, x: float32, incx: BlasInt, beta: float32, y: float32, incy: BlasInt) """
def ssymv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt, beta: ScalarOrArray32, y: ScalarOrArray32, incy: ScalarOrArrayInt) -> None: ...

""" ssyr(uplo: uint8, n: BlasInt, alpha: float32, x: float32, incx: BlasInt, a: float32, lda: BlasInt) """
def ssyr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> None: ...

""" ssyr2(uplo: uint8, n: BlasInt, alpha: float32, x: float32, incx: BlasInt, y: float32, incy: BlasInt, a: float32, lda: BlasInt) """
def ssyr2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt, y: ScalarOrArray32, incy: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt) -> None: ...

""" ssyr2k(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float32, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, beta: float32, c: float32, ldc: BlasInt) """
def ssyr2k(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt) -> None: ...

""" ssyrfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, af: float32, ldaf: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def ssyrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, af: ScalarOrArray32, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssyrk(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float32, a: float32, lda: BlasInt, beta: float32, c: float32, ldc: BlasInt) """
def ssyrk(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, beta: ScalarOrArray32, c: ScalarOrArray32, ldc: ScalarOrArrayInt) -> None: ...

""" ssysv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def ssysv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssysvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, af: float32, ldaf: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, rcond: float32, ferr: float32, berr: float32, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def ssysvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, af: ScalarOrArray32, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, rcond: ScalarOrArray32, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssyswapr(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, i1: BlasInt, i2: BlasInt) """
def ssyswapr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, i1: ScalarOrArrayInt, i2: ScalarOrArrayInt) -> None: ...

""" ssytd2(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, d: float32, e: float32, tau: float32, info: BlasInt) """
def ssytd2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tau: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssytf2(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def ssytf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssytrd(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, d: float32, e: float32, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def ssytrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, d: ScalarOrArray32, e: ScalarOrArray32, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssytrf(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def ssytrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssytri(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, work: float32, info: BlasInt) """
def ssytri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" ssytri2(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def ssytri2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssytri2x(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, work: float32, nb: BlasInt, info: BlasInt) """
def ssytri2x(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArray32, nb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssytrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def ssytrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ssytrs2(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, ipiv: BlasInt, b: float32, ldb: BlasInt, work: float32, info: BlasInt) """
def ssytrs2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stbcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, kd: BlasInt, ab: float32, ldab: BlasInt, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def stbcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stbmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, x: float32, incx: BlasInt) """
def stbmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" stbrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def stbrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stbsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: float32, lda: BlasInt, x: float32, incx: BlasInt) """
def stbsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" stbtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: float32, ldab: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def stbtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArray32, ldab: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stfsm(transr: uint8, side: uint8, uplo: uint8, trans: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: float32, a: float32, b: float32, ldb: BlasInt) """
def stfsm(transr: ScalarOrArrayU8, side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" stftri(transr: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: float32, info: BlasInt) """
def stftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stfttp(transr: uint8, uplo: uint8, n: BlasInt, arf: float32, ap: float32, info: BlasInt) """
def stfttp(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArray32, ap: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stfttr(transr: uint8, uplo: uint8, n: BlasInt, arf: float32, a: float32, lda: BlasInt, info: BlasInt) """
def stfttr(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, s: float32, lds: BlasInt, p: float32, ldp: BlasInt, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: float32, info: BlasInt) """
def stgevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, s: ScalarOrArray32, lds: ScalarOrArrayInt, p: ScalarOrArray32, ldp: ScalarOrArrayInt, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stgex2(wantq: bool, wantz: bool, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, q: float32, ldq: BlasInt, z: float32, ldz: BlasInt, j1: BlasInt, n1: BlasInt, n2: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def stgex2(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, j1: ScalarOrArrayInt, n1: ScalarOrArrayInt, n2: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgexc(wantq: bool, wantz: bool, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, q: float32, ldq: BlasInt, z: float32, ldz: BlasInt, ifst: BlasInt, ilst: BlasInt, work: float32, lwork: BlasInt, info: BlasInt) """
def stgexc(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgsen(ijob: BlasInt, wantq: bool, wantz: bool, select: bool, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, alphar: float32, alphai: float32, beta: float32, q: float32, ldq: BlasInt, z: float32, ldz: BlasInt, m: BlasInt, pl: float32, pr: float32, dif: float32, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def stgsen(ijob: ScalarOrArrayInt, wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, alphar: ScalarOrArray32, alphai: ScalarOrArray32, beta: ScalarOrArray32, q: ScalarOrArray32, ldq: ScalarOrArrayInt, z: ScalarOrArray32, ldz: ScalarOrArrayInt, m: ScalarOrArrayInt, pl: ScalarOrArray32, pr: ScalarOrArray32, dif: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgsja(jobu: uint8, jobv: uint8, jobq: uint8, m: BlasInt, p: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, tola: float32, tolb: float32, alpha: float32, beta: float32, u: float32, ldu: BlasInt, v: float32, ldv: BlasInt, q: float32, ldq: BlasInt, work: float32, ncycle: BlasInt, info: BlasInt) """
def stgsja(jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, jobq: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, tola: ScalarOrArray32, tolb: ScalarOrArray32, alpha: ScalarOrArray32, beta: ScalarOrArray32, u: ScalarOrArray32, ldu: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, work: ScalarOrArray32, ncycle: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, s: float32, dif: float32, mm: BlasInt, m: BlasInt, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def stgsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, s: ScalarOrArray32, dif: ScalarOrArray32, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgsy2(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, c: float32, ldc: BlasInt, d: float32, ldd: BlasInt, e: float32, lde: BlasInt, f: float32, ldf: BlasInt, scale: float32, rdsum: float32, rdscal: float32, iwork: BlasInt, pq: BlasInt, info: BlasInt) """
def stgsy2(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, d: ScalarOrArray32, ldd: ScalarOrArrayInt, e: ScalarOrArray32, lde: ScalarOrArrayInt, f: ScalarOrArray32, ldf: ScalarOrArrayInt, scale: ScalarOrArray32, rdsum: ScalarOrArray32, rdscal: ScalarOrArray32, iwork: ScalarOrArrayInt, pq: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stgsyl(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, c: float32, ldc: BlasInt, d: float32, ldd: BlasInt, e: float32, lde: BlasInt, f: float32, ldf: BlasInt, scale: float32, dif: float32, work: float32, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def stgsyl(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, d: ScalarOrArray32, ldd: ScalarOrArrayInt, e: ScalarOrArray32, lde: ScalarOrArrayInt, f: ScalarOrArray32, ldf: ScalarOrArrayInt, scale: ScalarOrArray32, dif: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stpcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: float32, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def stpcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stpmqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, nb: BlasInt, v: float32, ldv: BlasInt, t: float32, ldt: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, work: float32, info: BlasInt) """
def stpmqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stpmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: float32, x: float32, incx: BlasInt) """
def stpmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" stpqrt(m: BlasInt, n: BlasInt, l: BlasInt, nb: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, t: float32, ldt: BlasInt, work: float32, info: BlasInt) """
def stpqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stpqrt2(m: BlasInt, n: BlasInt, l: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, t: float32, ldt: BlasInt, info: BlasInt) """
def stpqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stprfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: float32, ldv: BlasInt, t: float32, ldt: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, work: float32, ldwork: BlasInt) """
def stprfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArray32, ldv: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, work: ScalarOrArray32, ldwork: ScalarOrArrayInt) -> None: ...

""" stprfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def stprfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stpsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: float32, x: float32, incx: BlasInt) """
def stpsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" stptri(uplo: uint8, diag: uint8, n: BlasInt, ap: float32, info: BlasInt) """
def stptri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stptrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: float32, b: float32, ldb: BlasInt, info: BlasInt) """
def stptrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArray32, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" stpttf(transr: uint8, uplo: uint8, n: BlasInt, ap: float32, arf: float32, info: BlasInt) """
def stpttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, arf: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stpttr(uplo: uint8, n: BlasInt, ap: float32, a: float32, lda: BlasInt, info: BlasInt) """
def stpttr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: float32, lda: BlasInt, rcond: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def strcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, rcond: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, t: float32, ldt: BlasInt, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: float32, info: BlasInt) """
def strevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" strexc(compq: uint8, n: BlasInt, t: float32, ldt: BlasInt, q: float32, ldq: BlasInt, ifst: BlasInt, ilst: BlasInt, work: float32, info: BlasInt) """
def strexc(compq: ScalarOrArrayU8, n: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, work: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" strmm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: float32, a: float32, lda: BlasInt, b: float32, ldb: BlasInt) """
def strmm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" strmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: float32, lda: BlasInt, x: float32, incx: BlasInt) """
def strmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" strrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, x: float32, ldx: BlasInt, ferr: float32, berr: float32, work: float32, iwork: BlasInt, info: BlasInt) """
def strrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, x: ScalarOrArray32, ldx: ScalarOrArrayInt, ferr: ScalarOrArray32, berr: ScalarOrArray32, work: ScalarOrArray32, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strsen(job: uint8, compq: uint8, select: bool, n: BlasInt, t: float32, ldt: BlasInt, q: float32, ldq: BlasInt, wr: float32, wi: float32, m: BlasInt, s: float32, sep: float32, work: float32, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def strsen(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, q: ScalarOrArray32, ldq: ScalarOrArrayInt, wr: ScalarOrArray32, wi: ScalarOrArray32, m: ScalarOrArrayInt, s: ScalarOrArray32, sep: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strsm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: float32, a: float32, lda: BlasInt, b: float32, ldb: BlasInt) """
def strsm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArray32, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt) -> None: ...

""" strsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, t: float32, ldt: BlasInt, vl: float32, ldvl: BlasInt, vr: float32, ldvr: BlasInt, s: float32, sep: float32, mm: BlasInt, m: BlasInt, work: float32, ldwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def strsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArray32, ldt: ScalarOrArrayInt, vl: ScalarOrArray32, ldvl: ScalarOrArrayInt, vr: ScalarOrArray32, ldvr: ScalarOrArrayInt, s: ScalarOrArray32, sep: ScalarOrArray32, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArray32, ldwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: float32, lda: BlasInt, x: float32, incx: BlasInt) """
def strsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, x: ScalarOrArray32, incx: ScalarOrArrayInt) -> None: ...

""" strsyl(trana: uint8, tranb: uint8, isgn: BlasInt, m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, c: float32, ldc: BlasInt, scale: float32, info: BlasInt) """
def strsyl(trana: ScalarOrArrayU8, tranb: ScalarOrArrayU8, isgn: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, c: ScalarOrArray32, ldc: ScalarOrArrayInt, scale: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" strti2(uplo: uint8, diag: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def strti2(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strtri(uplo: uint8, diag: uint8, n: BlasInt, a: float32, lda: BlasInt, info: BlasInt) """
def strtri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: float32, lda: BlasInt, b: float32, ldb: BlasInt, info: BlasInt) """
def strtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, b: ScalarOrArray32, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" strttf(transr: uint8, uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, arf: float32, info: BlasInt) """
def strttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, arf: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" strttp(uplo: uint8, n: BlasInt, a: float32, lda: BlasInt, ap: float32, info: BlasInt) """
def strttp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, ap: ScalarOrArray32, info: ScalarOrArrayInt) -> None: ...

""" stzrzf(m: BlasInt, n: BlasInt, a: float32, lda: BlasInt, tau: float32, work: float32, lwork: BlasInt, info: BlasInt) """
def stzrzf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray32, lda: ScalarOrArrayInt, tau: ScalarOrArray32, work: ScalarOrArray32, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" xerbla_array(srname_array: uint8, srname_len: BlasInt, info: BlasInt) """
def xerbla_array(srname_array: ScalarOrArrayU8, srname_len: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zaxpy(n: BlasInt, za: complex128, zx: complex128, incx: BlasInt, zy: complex128, incy: BlasInt) """
def zaxpy(n: ScalarOrArrayInt, za: ScalarOrArrayC128, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt, zy: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zbbcsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, m: BlasInt, p: BlasInt, q: BlasInt, theta: float64, phi: float64, u1: complex128, ldu1: BlasInt, u2: complex128, ldu2: BlasInt, v1t: complex128, ldv1t: BlasInt, v2t: complex128, ldv2t: BlasInt, b11d: float64, b11e: float64, b12d: float64, b12e: float64, b21d: float64, b21e: float64, b22d: float64, b22e: float64, rwork: float64, lrwork: BlasInt, info: BlasInt) """
def zbbcsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, theta: ScalarOrArray64, phi: ScalarOrArray64, u1: ScalarOrArrayC128, ldu1: ScalarOrArrayInt, u2: ScalarOrArrayC128, ldu2: ScalarOrArrayInt, v1t: ScalarOrArrayC128, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArrayC128, ldv2t: ScalarOrArrayInt, b11d: ScalarOrArray64, b11e: ScalarOrArray64, b12d: ScalarOrArray64, b12e: ScalarOrArray64, b21d: ScalarOrArray64, b21e: ScalarOrArray64, b22d: ScalarOrArray64, b22e: ScalarOrArray64, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zbdsqr(uplo: uint8, n: BlasInt, ncvt: BlasInt, nru: BlasInt, ncc: BlasInt, d: float64, e: float64, vt: complex128, ldvt: BlasInt, u: complex128, ldu: BlasInt, c: complex128, ldc: BlasInt, rwork: float64, info: BlasInt) """
def zbdsqr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ncvt: ScalarOrArrayInt, nru: ScalarOrArrayInt, ncc: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vt: ScalarOrArrayC128, ldvt: ScalarOrArrayInt, u: ScalarOrArrayC128, ldu: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zcgesv(n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, work: complex128, swork: complex64, rwork: float64, iter: BlasInt, info: BlasInt) """
def zcgesv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, work: ScalarOrArrayC128, swork: ScalarOrArrayC64, rwork: ScalarOrArray64, iter: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zcopy(n: BlasInt, zx: complex128, incx: BlasInt, zy: complex128, incy: BlasInt) """
def zcopy(n: ScalarOrArrayInt, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt, zy: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zcposv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, work: complex128, swork: complex64, rwork: float64, iter: BlasInt, info: BlasInt) """
def zcposv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, work: ScalarOrArrayC128, swork: ScalarOrArrayC64, rwork: ScalarOrArray64, iter: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zdotc(n: BlasInt, zx: complex128, incx: BlasInt, zy: complex128, incy: BlasInt) """
def zdotc(n: ScalarOrArrayInt, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt, zy: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> np.complex128: ...

""" zdotu(n: BlasInt, zx: complex128, incx: BlasInt, zy: complex128, incy: BlasInt) """
def zdotu(n: ScalarOrArrayInt, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt, zy: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> np.complex128: ...

""" zdrot(n: BlasInt, cx: complex128, incx: BlasInt, cy: complex128, incy: BlasInt, c: float64, s: float64) """
def zdrot(n: ScalarOrArrayInt, cx: ScalarOrArrayC128, incx: ScalarOrArrayInt, cy: ScalarOrArrayC128, incy: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64) -> None: ...

""" zdrscl(n: BlasInt, sa: float64, sx: complex128, incx: BlasInt) """
def zdrscl(n: ScalarOrArrayInt, sa: ScalarOrArray64, sx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" zdscal(n: BlasInt, da: float64, zx: complex128, incx: BlasInt) """
def zdscal(n: ScalarOrArrayInt, da: ScalarOrArray64, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" zgbbrd(vect: uint8, m: BlasInt, n: BlasInt, ncc: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, d: float64, e: float64, q: complex128, ldq: BlasInt, pt: complex128, ldpt: BlasInt, c: complex128, ldc: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def zgbbrd(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ncc: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, pt: ScalarOrArrayC128, ldpt: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgbcon(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, ipiv: BlasInt, anorm: float64, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgbcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgbequ(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def zgbequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgbequb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def zgbequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgbmv(trans: uint8, m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zgbmv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zgbrfs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, afb: complex128, ldafb: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgbrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC128, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgbsv(n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zgbsv(n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgbsvx(fact: uint8, trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, afb: complex128, ldafb: BlasInt, ipiv: BlasInt, equed: uint8, r: float64, c: float64, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgbsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC128, ldafb: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray64, c: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgbtf2(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def zgbtf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgbtrf(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, ipiv: BlasInt, info: BlasInt) """
def zgbtrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgbtrs(trans: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zgbtrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgebak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float64, m: BlasInt, v: complex128, ldv: BlasInt, info: BlasInt) """
def zgebak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray64, m: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgebal(job: uint8, n: BlasInt, a: complex128, lda: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float64, info: BlasInt) """
def zgebal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgebd2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, d: float64, e: float64, tauq: complex128, taup: complex128, work: complex128, info: BlasInt) """
def zgebd2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tauq: ScalarOrArrayC128, taup: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgebrd(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, d: float64, e: float64, tauq: complex128, taup: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgebrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tauq: ScalarOrArrayC128, taup: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgecon(norm: uint8, n: BlasInt, a: complex128, lda: BlasInt, anorm: float64, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgecon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgeequ(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def zgeequ(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgeequb(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, info: BlasInt) """
def zgeequb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgeev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: complex128, lda: BlasInt, w: complex128, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zgeev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, w: ScalarOrArrayC128, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgeevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: complex128, lda: BlasInt, w: complex128, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, scale: float64, abnrm: float64, rconde: float64, rcondv: float64, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zgeevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, w: ScalarOrArrayC128, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, scale: ScalarOrArray64, abnrm: ScalarOrArray64, rconde: ScalarOrArray64, rcondv: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgehd2(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zgehd2(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgehrd(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgehrd(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgelq2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zgelq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgelqf(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgelqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgels(trans: uint8, m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgels(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgelsd(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, s: float64, rcond: float64, rank: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, iwork: BlasInt, info: BlasInt) """
def zgelsd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, s: ScalarOrArray64, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgelss(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, s: float64, rcond: float64, rank: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zgelss(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, s: ScalarOrArray64, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgelsy(m: BlasInt, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, jpvt: BlasInt, rcond: float64, rank: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zgelsy(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgemm(transa: uint8, transb: uint8, m: BlasInt, n: BlasInt, k: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, beta: complex128, c: complex128, ldc: BlasInt) """
def zgemm(transa: ScalarOrArrayU8, transb: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zgemqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, nb: BlasInt, v: complex128, ldv: BlasInt, t: complex128, ldt: BlasInt, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zgemqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgemv(trans: uint8, m: BlasInt, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zgemv(trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zgeql2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zgeql2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgeqlf(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgeqlf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgeqp3(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, jpvt: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zgeqp3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgeqr2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zgeqr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgeqr2p(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zgeqr2p(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgeqrf(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgeqrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgeqrfp(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgeqrfp(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgeqrt(m: BlasInt, n: BlasInt, nb: BlasInt, a: complex128, lda: BlasInt, t: complex128, ldt: BlasInt, work: complex128, info: BlasInt) """
def zgeqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgeqrt2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, t: complex128, ldt: BlasInt, info: BlasInt) """
def zgeqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgeqrt3(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, t: complex128, ldt: BlasInt, info: BlasInt) """
def zgeqrt3(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgerc(m: BlasInt, n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, a: complex128, lda: BlasInt) """
def zgerc(m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zgerfs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgerfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgerq2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zgerq2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgerqf(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgerqf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgeru(m: BlasInt, n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, a: complex128, lda: BlasInt) """
def zgeru(m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zgesc2(n: BlasInt, a: complex128, lda: BlasInt, rhs: complex128, ipiv: BlasInt, jpiv: BlasInt, scale: float64) """
def zgesc2(n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, rhs: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, scale: ScalarOrArray64) -> None: ...

""" zgesdd(jobz: uint8, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, s: float64, u: complex128, ldu: BlasInt, vt: complex128, ldvt: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, iwork: BlasInt, info: BlasInt) """
def zgesdd(jobz: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, u: ScalarOrArrayC128, ldu: ScalarOrArrayInt, vt: ScalarOrArrayC128, ldvt: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgesv(n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zgesv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgesvd(jobu: uint8, jobvt: uint8, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, s: float64, u: complex128, ldu: BlasInt, vt: complex128, ldvt: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zgesvd(jobu: ScalarOrArrayU8, jobvt: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, u: ScalarOrArrayC128, ldu: ScalarOrArrayInt, vt: ScalarOrArrayC128, ldvt: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgesvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, ipiv: BlasInt, equed: uint8, r: float64, c: float64, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgesvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, equed: ScalarOrArrayU8, r: ScalarOrArray64, c: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgetc2(n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, jpiv: BlasInt, info: BlasInt) """
def zgetc2(n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgetf2(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def zgetf2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgetrf(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def zgetrf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgetri(n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgetri(n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgetrs(trans: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zgetrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zggbak(job: uint8, side: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float64, rscale: float64, m: BlasInt, v: complex128, ldv: BlasInt, info: BlasInt) """
def zggbak(job: ScalarOrArrayU8, side: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray64, rscale: ScalarOrArray64, m: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zggbal(job: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float64, rscale: float64, work: float64, info: BlasInt) """
def zggbal(job: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray64, rscale: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zggev(jobvl: uint8, jobvr: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, alpha: complex128, beta: complex128, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zggev(jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, alpha: ScalarOrArrayC128, beta: ScalarOrArrayC128, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zggevx(balanc: uint8, jobvl: uint8, jobvr: uint8, sense: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, alpha: complex128, beta: complex128, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, ilo: BlasInt, ihi: BlasInt, lscale: float64, rscale: float64, abnrm: float64, bbnrm: float64, rconde: float64, rcondv: float64, work: complex128, lwork: BlasInt, rwork: float64, iwork: BlasInt, bwork: bool, info: BlasInt) """
def zggevx(balanc: ScalarOrArrayU8, jobvl: ScalarOrArrayU8, jobvr: ScalarOrArrayU8, sense: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, alpha: ScalarOrArrayC128, beta: ScalarOrArrayC128, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, lscale: ScalarOrArray64, rscale: ScalarOrArray64, abnrm: ScalarOrArray64, bbnrm: ScalarOrArray64, rconde: ScalarOrArray64, rcondv: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, bwork: ScalarOrArrayBool, info: ScalarOrArrayInt) -> None: ...

""" zggglm(n: BlasInt, m: BlasInt, p: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, d: complex128, x: complex128, y: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zggglm(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, d: ScalarOrArrayC128, x: ScalarOrArrayC128, y: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgghrd(compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, q: complex128, ldq: BlasInt, z: complex128, ldz: BlasInt, info: BlasInt) """
def zgghrd(compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgglse(m: BlasInt, n: BlasInt, p: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, c: complex128, d: complex128, x: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zgglse(m: ScalarOrArrayInt, n: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, c: ScalarOrArrayC128, d: ScalarOrArrayC128, x: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zggqrf(n: BlasInt, m: BlasInt, p: BlasInt, a: complex128, lda: BlasInt, taua: complex128, b: complex128, ldb: BlasInt, taub: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zggqrf(n: ScalarOrArrayInt, m: ScalarOrArrayInt, p: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, taua: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, taub: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zggrqf(m: BlasInt, p: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, taua: complex128, b: complex128, ldb: BlasInt, taub: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zggrqf(m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, taua: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, taub: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgtcon(norm: uint8, n: BlasInt, dl: complex128, d: complex128, du: complex128, du2: complex128, ipiv: BlasInt, anorm: float64, rcond: float64, work: complex128, info: BlasInt) """
def zgtcon(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, du2: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zgtrfs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: complex128, d: complex128, du: complex128, dlf: complex128, df: complex128, duf: complex128, du2: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgtrfs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, dlf: ScalarOrArrayC128, df: ScalarOrArrayC128, duf: ScalarOrArrayC128, du2: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgtsv(n: BlasInt, nrhs: BlasInt, dl: complex128, d: complex128, du: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def zgtsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgtsvx(fact: uint8, trans: uint8, n: BlasInt, nrhs: BlasInt, dl: complex128, d: complex128, du: complex128, dlf: complex128, df: complex128, duf: complex128, du2: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zgtsvx(fact: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, dlf: ScalarOrArrayC128, df: ScalarOrArrayC128, duf: ScalarOrArrayC128, du2: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zgttrf(n: BlasInt, dl: complex128, d: complex128, du: complex128, du2: complex128, ipiv: BlasInt, info: BlasInt) """
def zgttrf(n: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, du2: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgttrs(trans: uint8, n: BlasInt, nrhs: BlasInt, dl: complex128, d: complex128, du: complex128, du2: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zgttrs(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, du2: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zgtts2(itrans: BlasInt, n: BlasInt, nrhs: BlasInt, dl: complex128, d: complex128, du: complex128, du2: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt) """
def zgtts2(itrans: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, du2: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" zhbev(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def zhbev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhbevd(jobz: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zhbevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhbevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, q: complex128, ldq: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zhbevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhbgst(vect: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex128, ldab: BlasInt, bb: complex128, ldbb: BlasInt, x: complex128, ldx: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def zhbgst(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC128, ldbb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhbgv(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex128, ldab: BlasInt, bb: complex128, ldbb: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def zhbgv(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC128, ldbb: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhbgvd(jobz: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex128, ldab: BlasInt, bb: complex128, ldbb: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zhbgvd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC128, ldbb: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhbgvx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ka: BlasInt, kb: BlasInt, ab: complex128, ldab: BlasInt, bb: complex128, ldbb: BlasInt, q: complex128, ldq: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zhbgvx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ka: ScalarOrArrayInt, kb: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, bb: ScalarOrArrayC128, ldbb: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhbmv(uplo: uint8, n: BlasInt, k: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zhbmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zhbtrd(vect: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, d: float64, e: float64, q: complex128, ldq: BlasInt, work: complex128, info: BlasInt) """
def zhbtrd(vect: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhecon(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, anorm: float64, rcond: float64, work: complex128, info: BlasInt) """
def zhecon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zheequb(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, s: float64, scond: float64, amax: float64, work: complex128, info: BlasInt) """
def zheequb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zheev(jobz: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, w: float64, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zheev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zheevd(jobz: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, w: float64, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zheevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zheevr(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, isuppz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zheevr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zheevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zheevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhegs2(itype: BlasInt, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zhegs2(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhegst(itype: BlasInt, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zhegst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhegv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, w: float64, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zhegv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhegvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, w: float64, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zhegvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, w: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhegvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zhegvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhemm(side: uint8, uplo: uint8, m: BlasInt, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, beta: complex128, c: complex128, ldc: BlasInt) """
def zhemm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zhemv(uplo: uint8, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zhemv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zher(uplo: uint8, n: BlasInt, alpha: float64, x: complex128, incx: BlasInt, a: complex128, lda: BlasInt) """
def zher(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zher2(uplo: uint8, n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, a: complex128, lda: BlasInt) """
def zher2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zher2k(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, beta: float64, c: complex128, ldc: BlasInt) """
def zher2k(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zherfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zherfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zherk(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float64, a: complex128, lda: BlasInt, beta: float64, c: complex128, ldc: BlasInt) """
def zherk(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zhesv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zhesv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhesvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zhesvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zheswapr(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, i1: BlasInt, i2: BlasInt) """
def zheswapr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, i1: ScalarOrArrayInt, i2: ScalarOrArrayInt) -> None: ...

""" zhetd2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, d: float64, e: float64, tau: complex128, info: BlasInt) """
def zhetd2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tau: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhetf2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def zhetf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhetrd(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, d: float64, e: float64, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zhetrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhetrf(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zhetrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhetri(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, info: BlasInt) """
def zhetri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhetri2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zhetri2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhetri2x(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, nb: BlasInt, info: BlasInt) """
def zhetri2x(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, nb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhetrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zhetrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhetrs2(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, work: complex128, info: BlasInt) """
def zhetrs2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhfrk(transr: uint8, uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: float64, a: complex128, lda: BlasInt, beta: float64, c: complex128) """
def zhfrk(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArray64, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, beta: ScalarOrArray64, c: ScalarOrArrayC128) -> None: ...

""" zhgeqz(job: uint8, compq: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex128, ldh: BlasInt, t: complex128, ldt: BlasInt, alpha: complex128, beta: complex128, q: complex128, ldq: BlasInt, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zhgeqz(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, alpha: ScalarOrArrayC128, beta: ScalarOrArrayC128, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhpcon(uplo: uint8, n: BlasInt, ap: complex128, ipiv: BlasInt, anorm: float64, rcond: float64, work: complex128, info: BlasInt) """
def zhpcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhpev(jobz: uint8, uplo: uint8, n: BlasInt, ap: complex128, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def zhpev(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhpevd(jobz: uint8, uplo: uint8, n: BlasInt, ap: complex128, w: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zhpevd(jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhpevx(jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: complex128, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zhpevx(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhpgst(itype: BlasInt, uplo: uint8, n: BlasInt, ap: complex128, bp: complex128, info: BlasInt) """
def zhpgst(itype: ScalarOrArrayInt, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, bp: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhpgv(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: complex128, bp: complex128, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def zhpgv(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, bp: ScalarOrArrayC128, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhpgvd(itype: BlasInt, jobz: uint8, uplo: uint8, n: BlasInt, ap: complex128, bp: complex128, w: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zhpgvd(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, bp: ScalarOrArrayC128, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhpgvx(itype: BlasInt, jobz: uint8, range: uint8, uplo: uint8, n: BlasInt, ap: complex128, bp: complex128, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, work: complex128, rwork: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zhpgvx(itype: ScalarOrArrayInt, jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, bp: ScalarOrArrayC128, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhpmv(uplo: uint8, n: BlasInt, alpha: complex128, ap: complex128, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zhpmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, ap: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zhpr(uplo: uint8, n: BlasInt, alpha: float64, x: complex128, incx: BlasInt, ap: complex128) """
def zhpr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArray64, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, ap: ScalarOrArrayC128) -> None: ...

""" zhpr2(uplo: uint8, n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, ap: complex128) """
def zhpr2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, ap: ScalarOrArrayC128) -> None: ...

""" zhprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, afp: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zhprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, afp: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhpsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zhpsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhpsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, afp: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zhpsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, afp: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zhptrd(uplo: uint8, n: BlasInt, ap: complex128, d: float64, e: float64, tau: complex128, info: BlasInt) """
def zhptrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, d: ScalarOrArray64, e: ScalarOrArray64, tau: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhptrf(uplo: uint8, n: BlasInt, ap: complex128, ipiv: BlasInt, info: BlasInt) """
def zhptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhptri(uplo: uint8, n: BlasInt, ap: complex128, ipiv: BlasInt, work: complex128, info: BlasInt) """
def zhptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zhptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zhptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhsein(side: uint8, eigsrc: uint8, initv: uint8, select: bool, n: BlasInt, h: complex128, ldh: BlasInt, w: complex128, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: complex128, rwork: float64, ifaill: BlasInt, ifailr: BlasInt, info: BlasInt) """
def zhsein(side: ScalarOrArrayU8, eigsrc: ScalarOrArrayU8, initv: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, w: ScalarOrArrayC128, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, ifaill: ScalarOrArrayInt, ifailr: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zhseqr(job: uint8, compz: uint8, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex128, ldh: BlasInt, w: complex128, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zhseqr(job: ScalarOrArrayU8, compz: ScalarOrArrayU8, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, w: ScalarOrArrayC128, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlabrd(m: BlasInt, n: BlasInt, nb: BlasInt, a: complex128, lda: BlasInt, d: float64, e: float64, tauq: complex128, taup: complex128, x: complex128, ldx: BlasInt, y: complex128, ldy: BlasInt) """
def zlabrd(m: ScalarOrArrayInt, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, tauq: ScalarOrArrayC128, taup: ScalarOrArrayC128, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, y: ScalarOrArrayC128, ldy: ScalarOrArrayInt) -> None: ...

""" zlacgv(n: BlasInt, x: complex128, incx: BlasInt) """
def zlacgv(n: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" zlacn2(n: BlasInt, v: complex128, x: complex128, est: float64, kase: BlasInt, isave: BlasInt) """
def zlacn2(n: ScalarOrArrayInt, v: ScalarOrArrayC128, x: ScalarOrArrayC128, est: ScalarOrArray64, kase: ScalarOrArrayInt, isave: ScalarOrArrayInt) -> None: ...

""" zlacon(n: BlasInt, v: complex128, x: complex128, est: float64, kase: BlasInt) """
def zlacon(n: ScalarOrArrayInt, v: ScalarOrArrayC128, x: ScalarOrArrayC128, est: ScalarOrArray64, kase: ScalarOrArrayInt) -> None: ...

""" zlacp2(uplo: uint8, m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, b: complex128, ldb: BlasInt) """
def zlacp2(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" zlacpy(uplo: uint8, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt) """
def zlacpy(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" zlacrm(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, b: float64, ldb: BlasInt, c: complex128, ldc: BlasInt, rwork: float64) """
def zlacrm(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArray64, ldb: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, rwork: ScalarOrArray64) -> None: ...

""" zlacrt(n: BlasInt, cx: complex128, incx: BlasInt, cy: complex128, incy: BlasInt, c: complex128, s: complex128) """
def zlacrt(n: ScalarOrArrayInt, cx: ScalarOrArrayC128, incx: ScalarOrArrayInt, cy: ScalarOrArrayC128, incy: ScalarOrArrayInt, c: ScalarOrArrayC128, s: ScalarOrArrayC128) -> None: ...

""" zladiv(x: complex128, y: complex128) """
def zladiv(x: ScalarOrArrayC128, y: ScalarOrArrayC128) -> np.complex128: ...

""" zlaed0(qsiz: BlasInt, n: BlasInt, d: float64, e: float64, q: complex128, ldq: BlasInt, qstore: complex128, ldqs: BlasInt, rwork: float64, iwork: BlasInt, info: BlasInt) """
def zlaed0(qsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, qstore: ScalarOrArrayC128, ldqs: ScalarOrArrayInt, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlaed7(n: BlasInt, cutpnt: BlasInt, qsiz: BlasInt, tlvls: BlasInt, curlvl: BlasInt, curpbm: BlasInt, d: float64, q: complex128, ldq: BlasInt, rho: float64, indxq: BlasInt, qstore: float64, qptr: BlasInt, prmptr: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float64, work: complex128, rwork: float64, iwork: BlasInt, info: BlasInt) """
def zlaed7(n: ScalarOrArrayInt, cutpnt: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, tlvls: ScalarOrArrayInt, curlvl: ScalarOrArrayInt, curpbm: ScalarOrArrayInt, d: ScalarOrArray64, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, rho: ScalarOrArray64, indxq: ScalarOrArrayInt, qstore: ScalarOrArray64, qptr: ScalarOrArrayInt, prmptr: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlaed8(k: BlasInt, n: BlasInt, qsiz: BlasInt, q: complex128, ldq: BlasInt, d: float64, rho: float64, cutpnt: BlasInt, z: float64, dlamda: float64, q2: complex128, ldq2: BlasInt, w: float64, indxp: BlasInt, indx: BlasInt, indxq: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, givnum: float64, info: BlasInt) """
def zlaed8(k: ScalarOrArrayInt, n: ScalarOrArrayInt, qsiz: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, d: ScalarOrArray64, rho: ScalarOrArray64, cutpnt: ScalarOrArrayInt, z: ScalarOrArray64, dlamda: ScalarOrArray64, q2: ScalarOrArrayC128, ldq2: ScalarOrArrayInt, w: ScalarOrArray64, indxp: ScalarOrArrayInt, indx: ScalarOrArrayInt, indxq: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, givnum: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zlaein(rightv: bool, noinit: bool, n: BlasInt, h: complex128, ldh: BlasInt, w: complex128, v: complex128, b: complex128, ldb: BlasInt, rwork: float64, eps3: float64, smlnum: float64, info: BlasInt) """
def zlaein(rightv: ScalarOrArrayBool, noinit: ScalarOrArrayBool, n: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, w: ScalarOrArrayC128, v: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, rwork: ScalarOrArray64, eps3: ScalarOrArray64, smlnum: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zlaesy(a: complex128, b: complex128, c: complex128, rt1: complex128, rt2: complex128, evscal: complex128, cs1: complex128, sn1: complex128) """
def zlaesy(a: ScalarOrArrayC128, b: ScalarOrArrayC128, c: ScalarOrArrayC128, rt1: ScalarOrArrayC128, rt2: ScalarOrArrayC128, evscal: ScalarOrArrayC128, cs1: ScalarOrArrayC128, sn1: ScalarOrArrayC128) -> None: ...

""" zlaev2(a: complex128, b: complex128, c: complex128, rt1: float64, rt2: float64, cs1: float64, sn1: complex128) """
def zlaev2(a: ScalarOrArrayC128, b: ScalarOrArrayC128, c: ScalarOrArrayC128, rt1: ScalarOrArray64, rt2: ScalarOrArray64, cs1: ScalarOrArray64, sn1: ScalarOrArrayC128) -> None: ...

""" zlag2c(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, sa: complex64, ldsa: BlasInt, info: BlasInt) """
def zlag2c(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, sa: ScalarOrArrayC64, ldsa: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlags2(upper: bool, a1: float64, a2: complex128, a3: float64, b1: float64, b2: complex128, b3: float64, csu: float64, snu: complex128, csv: float64, snv: complex128, csq: float64, snq: complex128) """
def zlags2(upper: ScalarOrArrayBool, a1: ScalarOrArray64, a2: ScalarOrArrayC128, a3: ScalarOrArray64, b1: ScalarOrArray64, b2: ScalarOrArrayC128, b3: ScalarOrArray64, csu: ScalarOrArray64, snu: ScalarOrArrayC128, csv: ScalarOrArray64, snv: ScalarOrArrayC128, csq: ScalarOrArray64, snq: ScalarOrArrayC128) -> None: ...

""" zlagtm(trans: uint8, n: BlasInt, nrhs: BlasInt, alpha: float64, dl: complex128, d: complex128, du: complex128, x: complex128, ldx: BlasInt, beta: float64, b: complex128, ldb: BlasInt) """
def zlagtm(trans: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, alpha: ScalarOrArray64, dl: ScalarOrArrayC128, d: ScalarOrArrayC128, du: ScalarOrArrayC128, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, beta: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" zlahef(uplo: uint8, n: BlasInt, nb: BlasInt, kb: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, w: complex128, ldw: BlasInt, info: BlasInt) """
def zlahef(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, w: ScalarOrArrayC128, ldw: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlahqr(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex128, ldh: BlasInt, w: complex128, iloz: BlasInt, ihiz: BlasInt, z: complex128, ldz: BlasInt, info: BlasInt) """
def zlahqr(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, w: ScalarOrArrayC128, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlahr2(n: BlasInt, k: BlasInt, nb: BlasInt, a: complex128, lda: BlasInt, tau: complex128, t: complex128, ldt: BlasInt, y: complex128, ldy: BlasInt) """
def zlahr2(n: ScalarOrArrayInt, k: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, y: ScalarOrArrayC128, ldy: ScalarOrArrayInt) -> None: ...

""" zlaic1(job: BlasInt, j: BlasInt, x: complex128, sest: float64, w: complex128, gamma: complex128, sestpr: float64, s: complex128, c: complex128) """
def zlaic1(job: ScalarOrArrayInt, j: ScalarOrArrayInt, x: ScalarOrArrayC128, sest: ScalarOrArray64, w: ScalarOrArrayC128, gamma: ScalarOrArrayC128, sestpr: ScalarOrArray64, s: ScalarOrArrayC128, c: ScalarOrArrayC128) -> None: ...

""" zlals0(icompq: BlasInt, nl: BlasInt, nr: BlasInt, sqre: BlasInt, nrhs: BlasInt, b: complex128, ldb: BlasInt, bx: complex128, ldbx: BlasInt, perm: BlasInt, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, givnum: float64, ldgnum: BlasInt, poles: float64, difl: float64, difr: float64, z: float64, k: BlasInt, c: float64, s: float64, rwork: float64, info: BlasInt) """
def zlals0(icompq: ScalarOrArrayInt, nl: ScalarOrArrayInt, nr: ScalarOrArrayInt, sqre: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, bx: ScalarOrArrayC128, ldbx: ScalarOrArrayInt, perm: ScalarOrArrayInt, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, givnum: ScalarOrArray64, ldgnum: ScalarOrArrayInt, poles: ScalarOrArray64, difl: ScalarOrArray64, difr: ScalarOrArray64, z: ScalarOrArray64, k: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zlalsa(icompq: BlasInt, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, b: complex128, ldb: BlasInt, bx: complex128, ldbx: BlasInt, u: float64, ldu: BlasInt, vt: float64, k: BlasInt, difl: float64, difr: float64, z: float64, poles: float64, givptr: BlasInt, givcol: BlasInt, ldgcol: BlasInt, perm: BlasInt, givnum: float64, c: float64, s: float64, rwork: float64, iwork: BlasInt, info: BlasInt) """
def zlalsa(icompq: ScalarOrArrayInt, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, bx: ScalarOrArrayC128, ldbx: ScalarOrArrayInt, u: ScalarOrArray64, ldu: ScalarOrArrayInt, vt: ScalarOrArray64, k: ScalarOrArrayInt, difl: ScalarOrArray64, difr: ScalarOrArray64, z: ScalarOrArray64, poles: ScalarOrArray64, givptr: ScalarOrArrayInt, givcol: ScalarOrArrayInt, ldgcol: ScalarOrArrayInt, perm: ScalarOrArrayInt, givnum: ScalarOrArray64, c: ScalarOrArray64, s: ScalarOrArray64, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlalsd(uplo: uint8, smlsiz: BlasInt, n: BlasInt, nrhs: BlasInt, d: float64, e: float64, b: complex128, ldb: BlasInt, rcond: float64, rank: BlasInt, work: complex128, rwork: float64, iwork: BlasInt, info: BlasInt) """
def zlalsd(uplo: ScalarOrArrayU8, smlsiz: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, rcond: ScalarOrArray64, rank: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlangb(norm: uint8, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, work: float64) """
def zlangb(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlange(norm: uint8, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, work: float64) """
def zlange(norm: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlangt(norm: uint8, n: BlasInt, dl: complex128, d_: complex128, du: complex128) """
def zlangt(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, dl: ScalarOrArrayC128, d_: ScalarOrArrayC128, du: ScalarOrArrayC128) -> np.float64: ...

""" zlanhb(norm: uint8, uplo: uint8, n: BlasInt, k: BlasInt, ab: complex128, ldab: BlasInt, work: float64) """
def zlanhb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlanhe(norm: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, work: float64) """
def zlanhe(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlanhf(norm: uint8, transr: uint8, uplo: uint8, n: BlasInt, a: complex128, work: float64) """
def zlanhf(norm: ScalarOrArrayU8, transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, work: ScalarOrArray64) -> np.float64: ...

""" zlanhp(norm: uint8, uplo: uint8, n: BlasInt, ap: complex128, work: float64) """
def zlanhp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, work: ScalarOrArray64) -> np.float64: ...

""" zlanhs(norm: uint8, n: BlasInt, a: complex128, lda: BlasInt, work: float64) """
def zlanhs(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlanht(norm: uint8, n: BlasInt, d_: float64, e: complex128) """
def zlanht(norm: ScalarOrArrayU8, n: ScalarOrArrayInt, d_: ScalarOrArray64, e: ScalarOrArrayC128) -> np.float64: ...

""" zlansb(norm: uint8, uplo: uint8, n: BlasInt, k: BlasInt, ab: complex128, ldab: BlasInt, work: float64) """
def zlansb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlansp(norm: uint8, uplo: uint8, n: BlasInt, ap: complex128, work: float64) """
def zlansp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, work: ScalarOrArray64) -> np.float64: ...

""" zlansy(norm: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, work: float64) """
def zlansy(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlantb(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, k: BlasInt, ab: complex128, ldab: BlasInt, work: float64) """
def zlantb(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlantp(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: complex128, work: float64) """
def zlantp(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, work: ScalarOrArray64) -> np.float64: ...

""" zlantr(norm: uint8, uplo: uint8, diag: uint8, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, work: float64) """
def zlantr(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, work: ScalarOrArray64) -> np.float64: ...

""" zlapll(n: BlasInt, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, ssmin: float64) """
def zlapll(n: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, ssmin: ScalarOrArray64) -> None: ...

""" zlapmr(forwrd: bool, m: BlasInt, n: BlasInt, x: complex128, ldx: BlasInt, k: BlasInt) """
def zlapmr(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" zlapmt(forwrd: bool, m: BlasInt, n: BlasInt, x: complex128, ldx: BlasInt, k: BlasInt) """
def zlapmt(forwrd: ScalarOrArrayBool, m: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, k: ScalarOrArrayInt) -> None: ...

""" zlaqgb(m: BlasInt, n: BlasInt, kl: BlasInt, ku: BlasInt, ab: complex128, ldab: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, equed: uint8) """
def zlaqgb(m: ScalarOrArrayInt, n: ScalarOrArrayInt, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqge(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, r: float64, c: float64, rowcnd: float64, colcnd: float64, amax: float64, equed: uint8) """
def zlaqge(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, r: ScalarOrArray64, c: ScalarOrArray64, rowcnd: ScalarOrArray64, colcnd: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqhb(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, s: float64, scond: float64, amax: float64, equed: uint8) """
def zlaqhb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqhe(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, s: float64, scond: float64, amax: float64, equed: uint8) """
def zlaqhe(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqhp(uplo: uint8, n: BlasInt, ap: complex128, s: float64, scond: float64, amax: float64, equed: uint8) """
def zlaqhp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqp2(m: BlasInt, n: BlasInt, offset: BlasInt, a: complex128, lda: BlasInt, jpvt: BlasInt, tau: complex128, vn1: float64, vn2: float64, work: complex128) """
def zlaqp2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArrayC128, vn1: ScalarOrArray64, vn2: ScalarOrArray64, work: ScalarOrArrayC128) -> None: ...

""" zlaqps(m: BlasInt, n: BlasInt, offset: BlasInt, nb: BlasInt, kb: BlasInt, a: complex128, lda: BlasInt, jpvt: BlasInt, tau: complex128, vn1: float64, vn2: float64, auxv: complex128, f: complex128, ldf: BlasInt) """
def zlaqps(m: ScalarOrArrayInt, n: ScalarOrArrayInt, offset: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, jpvt: ScalarOrArrayInt, tau: ScalarOrArrayC128, vn1: ScalarOrArray64, vn2: ScalarOrArray64, auxv: ScalarOrArrayC128, f: ScalarOrArrayC128, ldf: ScalarOrArrayInt) -> None: ...

""" zlaqr0(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex128, ldh: BlasInt, w: complex128, iloz: BlasInt, ihiz: BlasInt, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zlaqr0(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, w: ScalarOrArrayC128, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlaqr1(n: BlasInt, h: complex128, ldh: BlasInt, s1: complex128, s2: complex128, v: complex128) """
def zlaqr1(n: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, s1: ScalarOrArrayC128, s2: ScalarOrArrayC128, v: ScalarOrArrayC128) -> None: ...

""" zlaqr2(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: complex128, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: complex128, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sh: complex128, v: complex128, ldv: BlasInt, nh: BlasInt, t: complex128, ldt: BlasInt, nv: BlasInt, wv: complex128, ldwv: BlasInt, work: complex128, lwork: BlasInt) """
def zlaqr2(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sh: ScalarOrArrayC128, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArrayC128, ldwv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt) -> None: ...

""" zlaqr3(wantt: bool, wantz: bool, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nw: BlasInt, h: complex128, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: complex128, ldz: BlasInt, ns: BlasInt, nd: BlasInt, sh: complex128, v: complex128, ldv: BlasInt, nh: BlasInt, t: complex128, ldt: BlasInt, nv: BlasInt, wv: complex128, ldwv: BlasInt, work: complex128, lwork: BlasInt) """
def zlaqr3(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nw: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, ns: ScalarOrArrayInt, nd: ScalarOrArrayInt, sh: ScalarOrArrayC128, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, nh: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArrayC128, ldwv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt) -> None: ...

""" zlaqr4(wantt: bool, wantz: bool, n: BlasInt, ilo: BlasInt, ihi: BlasInt, h: complex128, ldh: BlasInt, w: complex128, iloz: BlasInt, ihiz: BlasInt, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zlaqr4(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, w: ScalarOrArrayC128, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlaqr5(wantt: bool, wantz: bool, kacc22: BlasInt, n: BlasInt, ktop: BlasInt, kbot: BlasInt, nshfts: BlasInt, s: complex128, h: complex128, ldh: BlasInt, iloz: BlasInt, ihiz: BlasInt, z: complex128, ldz: BlasInt, v: complex128, ldv: BlasInt, u: complex128, ldu: BlasInt, nv: BlasInt, wv: complex128, ldwv: BlasInt, nh: BlasInt, wh: complex128, ldwh: BlasInt) """
def zlaqr5(wantt: ScalarOrArrayBool, wantz: ScalarOrArrayBool, kacc22: ScalarOrArrayInt, n: ScalarOrArrayInt, ktop: ScalarOrArrayInt, kbot: ScalarOrArrayInt, nshfts: ScalarOrArrayInt, s: ScalarOrArrayC128, h: ScalarOrArrayC128, ldh: ScalarOrArrayInt, iloz: ScalarOrArrayInt, ihiz: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, u: ScalarOrArrayC128, ldu: ScalarOrArrayInt, nv: ScalarOrArrayInt, wv: ScalarOrArrayC128, ldwv: ScalarOrArrayInt, nh: ScalarOrArrayInt, wh: ScalarOrArrayC128, ldwh: ScalarOrArrayInt) -> None: ...

""" zlaqsb(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, s: float64, scond: float64, amax: float64, equed: uint8) """
def zlaqsb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqsp(uplo: uint8, n: BlasInt, ap: complex128, s: float64, scond: float64, amax: float64, equed: uint8) """
def zlaqsp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlaqsy(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, s: float64, scond: float64, amax: float64, equed: uint8) """
def zlaqsy(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, equed: ScalarOrArrayU8) -> None: ...

""" zlar1v(n: BlasInt, b1: BlasInt, bn: BlasInt, lambda_: float64, d: float64, l: float64, ld: float64, lld: float64, pivmin: float64, gaptol: float64, z: complex128, wantnc: bool, negcnt: BlasInt, ztz: float64, mingma: float64, r: BlasInt, isuppz: BlasInt, nrminv: float64, resid: float64, rqcorr: float64, work: float64) """
def zlar1v(n: ScalarOrArrayInt, b1: ScalarOrArrayInt, bn: ScalarOrArrayInt, lambda_: ScalarOrArray64, d: ScalarOrArray64, l: ScalarOrArray64, ld: ScalarOrArray64, lld: ScalarOrArray64, pivmin: ScalarOrArray64, gaptol: ScalarOrArray64, z: ScalarOrArrayC128, wantnc: ScalarOrArrayBool, negcnt: ScalarOrArrayInt, ztz: ScalarOrArray64, mingma: ScalarOrArray64, r: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, nrminv: ScalarOrArray64, resid: ScalarOrArray64, rqcorr: ScalarOrArray64, work: ScalarOrArray64) -> None: ...

""" zlar2v(n: BlasInt, x: complex128, y: complex128, z: complex128, incx: BlasInt, c: float64, s: complex128, incc: BlasInt) """
def zlar2v(n: ScalarOrArrayInt, x: ScalarOrArrayC128, y: ScalarOrArrayC128, z: ScalarOrArrayC128, incx: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArrayC128, incc: ScalarOrArrayInt) -> None: ...

""" zlarcm(m: BlasInt, n: BlasInt, a: float64, lda: BlasInt, b: complex128, ldb: BlasInt, c: complex128, ldc: BlasInt, rwork: float64) """
def zlarcm(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArray64, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, rwork: ScalarOrArray64) -> None: ...

""" zlarf(side: uint8, m: BlasInt, n: BlasInt, v: complex128, incv: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128) """
def zlarf(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArrayC128, incv: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128) -> None: ...

""" zlarfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, v: complex128, ldv: BlasInt, t: complex128, ldt: BlasInt, c: complex128, ldc: BlasInt, work: complex128, ldwork: BlasInt) """
def zlarfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, ldwork: ScalarOrArrayInt) -> None: ...

""" zlarfg(n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, tau: complex128) """
def zlarfg(n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, tau: ScalarOrArrayC128) -> None: ...

""" zlarfgp(n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, tau: complex128) """
def zlarfgp(n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, tau: ScalarOrArrayC128) -> None: ...

""" zlarft(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: complex128, ldv: BlasInt, tau: complex128, t: complex128, ldt: BlasInt) """
def zlarft(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, tau: ScalarOrArrayC128, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt) -> None: ...

""" zlarfx(side: uint8, m: BlasInt, n: BlasInt, v: complex128, tau: complex128, c: complex128, ldc: BlasInt, work: complex128) """
def zlarfx(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, v: ScalarOrArrayC128, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128) -> None: ...

""" zlargv(n: BlasInt, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, c: float64, incc: BlasInt) """
def zlargv(n: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, c: ScalarOrArray64, incc: ScalarOrArrayInt) -> None: ...

""" zlarnv(idist: BlasInt, iseed: BlasInt, n: BlasInt, x: complex128) """
def zlarnv(idist: ScalarOrArrayInt, iseed: ScalarOrArrayInt, n: ScalarOrArrayInt, x: ScalarOrArrayC128) -> None: ...

""" zlarrv(n: BlasInt, vl: float64, vu: float64, d: float64, l: float64, pivmin: float64, isplit: BlasInt, m: BlasInt, dol: BlasInt, dou: BlasInt, minrgp: float64, rtol1: float64, rtol2: float64, w: float64, werr: float64, wgap: float64, iblock: BlasInt, indexw: BlasInt, gers: float64, z: complex128, ldz: BlasInt, isuppz: BlasInt, work: float64, iwork: BlasInt, info: BlasInt) """
def zlarrv(n: ScalarOrArrayInt, vl: ScalarOrArray64, vu: ScalarOrArray64, d: ScalarOrArray64, l: ScalarOrArray64, pivmin: ScalarOrArray64, isplit: ScalarOrArrayInt, m: ScalarOrArrayInt, dol: ScalarOrArrayInt, dou: ScalarOrArrayInt, minrgp: ScalarOrArray64, rtol1: ScalarOrArray64, rtol2: ScalarOrArray64, w: ScalarOrArray64, werr: ScalarOrArray64, wgap: ScalarOrArray64, iblock: ScalarOrArrayInt, indexw: ScalarOrArrayInt, gers: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlartg(f: complex128, g: complex128, cs: float64, sn: complex128, r: complex128) """
def zlartg(f: ScalarOrArrayC128, g: ScalarOrArrayC128, cs: ScalarOrArray64, sn: ScalarOrArrayC128, r: ScalarOrArrayC128) -> None: ...

""" zlartv(n: BlasInt, x: complex128, incx: BlasInt, y: complex128, incy: BlasInt, c: float64, s: complex128, incc: BlasInt) """
def zlartv(n: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, y: ScalarOrArrayC128, incy: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArrayC128, incc: ScalarOrArrayInt) -> None: ...

""" zlarz(side: uint8, m: BlasInt, n: BlasInt, l: BlasInt, v: complex128, incv: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128) """
def zlarz(side: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArrayC128, incv: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128) -> None: ...

""" zlarzb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: complex128, ldv: BlasInt, t: complex128, ldt: BlasInt, c: complex128, ldc: BlasInt, work: complex128, ldwork: BlasInt) """
def zlarzb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, ldwork: ScalarOrArrayInt) -> None: ...

""" zlarzt(direct: uint8, storev: uint8, n: BlasInt, k: BlasInt, v: complex128, ldv: BlasInt, tau: complex128, t: complex128, ldt: BlasInt) """
def zlarzt(direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, tau: ScalarOrArrayC128, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt) -> None: ...

""" zlascl(type_bn: uint8, kl: BlasInt, ku: BlasInt, cfrom: float64, cto: float64, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def zlascl(type_bn: ScalarOrArrayU8, kl: ScalarOrArrayInt, ku: ScalarOrArrayInt, cfrom: ScalarOrArray64, cto: ScalarOrArray64, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlaset(uplo: uint8, m: BlasInt, n: BlasInt, alpha: complex128, beta: complex128, a: complex128, lda: BlasInt) """
def zlaset(uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, beta: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zlasr(side: uint8, pivot: uint8, direct: uint8, m: BlasInt, n: BlasInt, c: float64, s: float64, a: complex128, lda: BlasInt) """
def zlasr(side: ScalarOrArrayU8, pivot: ScalarOrArrayU8, direct: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArray64, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zlassq(n: BlasInt, x: complex128, incx: BlasInt, scale: float64, sumsq: float64) """
def zlassq(n: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, scale: ScalarOrArray64, sumsq: ScalarOrArray64) -> None: ...

""" zlaswp(n: BlasInt, a: complex128, lda: BlasInt, k1: BlasInt, k2: BlasInt, ipiv: BlasInt, incx: BlasInt) """
def zlaswp(n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, k1: ScalarOrArrayInt, k2: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, incx: ScalarOrArrayInt) -> None: ...

""" zlasyf(uplo: uint8, n: BlasInt, nb: BlasInt, kb: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, w: complex128, ldw: BlasInt, info: BlasInt) """
def zlasyf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, kb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, w: ScalarOrArrayC128, ldw: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlat2c(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, sa: complex64, ldsa: BlasInt, info: BlasInt) """
def zlat2c(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, sa: ScalarOrArrayC64, ldsa: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlatbs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, x: complex128, scale: float64, cnorm: float64, info: BlasInt) """
def zlatbs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, x: ScalarOrArrayC128, scale: ScalarOrArray64, cnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zlatdf(ijob: BlasInt, n: BlasInt, z: complex128, ldz: BlasInt, rhs: complex128, rdsum: float64, rdscal: float64, ipiv: BlasInt, jpiv: BlasInt) """
def zlatdf(ijob: ScalarOrArrayInt, n: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, rhs: ScalarOrArrayC128, rdsum: ScalarOrArray64, rdscal: ScalarOrArray64, ipiv: ScalarOrArrayInt, jpiv: ScalarOrArrayInt) -> None: ...

""" zlatps(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, ap: complex128, x: complex128, scale: float64, cnorm: float64, info: BlasInt) """
def zlatps(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, x: ScalarOrArrayC128, scale: ScalarOrArray64, cnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zlatrd(uplo: uint8, n: BlasInt, nb: BlasInt, a: complex128, lda: BlasInt, e: float64, tau: complex128, w: complex128, ldw: BlasInt) """
def zlatrd(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, e: ScalarOrArray64, tau: ScalarOrArrayC128, w: ScalarOrArrayC128, ldw: ScalarOrArrayInt) -> None: ...

""" zlatrs(uplo: uint8, trans: uint8, diag: uint8, normin: uint8, n: BlasInt, a: complex128, lda: BlasInt, x: complex128, scale: float64, cnorm: float64, info: BlasInt) """
def zlatrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, normin: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, scale: ScalarOrArray64, cnorm: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zlatrz(m: BlasInt, n: BlasInt, l: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128) """
def zlatrz(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128) -> None: ...

""" zlauu2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def zlauu2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zlauum(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def zlauum(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpbcon(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, anorm: float64, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def zpbcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpbequ(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, s: float64, scond: float64, amax: float64, info: BlasInt) """
def zpbequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpbrfs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, afb: complex128, ldafb: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zpbrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC128, ldafb: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpbstf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, info: BlasInt) """
def zpbstf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpbsv(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zpbsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpbsvx(fact: uint8, uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, afb: complex128, ldafb: BlasInt, equed: uint8, s: float64, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zpbsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, afb: ScalarOrArrayC128, ldafb: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpbtf2(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, info: BlasInt) """
def zpbtf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpbtrf(uplo: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, info: BlasInt) """
def zpbtrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpbtrs(uplo: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zpbtrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpftrf(transr: uint8, uplo: uint8, n: BlasInt, a: complex128, info: BlasInt) """
def zpftrf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zpftri(transr: uint8, uplo: uint8, n: BlasInt, a: complex128, info: BlasInt) """
def zpftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zpftrs(transr: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def zpftrs(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpocon(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, anorm: float64, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def zpocon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpoequ(n: BlasInt, a: complex128, lda: BlasInt, s: float64, scond: float64, amax: float64, info: BlasInt) """
def zpoequ(n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpoequb(n: BlasInt, a: complex128, lda: BlasInt, s: float64, scond: float64, amax: float64, info: BlasInt) """
def zpoequb(n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zporfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zporfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zposv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zposv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zposvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, equed: uint8, s: float64, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zposvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, equed: ScalarOrArrayU8, s: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpotf2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def zpotf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpotrf(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def zpotrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpotri(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def zpotri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpotrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zpotrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zppcon(uplo: uint8, n: BlasInt, ap: complex128, anorm: float64, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def zppcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zppequ(uplo: uint8, n: BlasInt, ap: complex128, s: float64, scond: float64, amax: float64, info: BlasInt) """
def zppequ(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, afp: complex128, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zpprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, afp: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zppsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def zppsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zppsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, afp: complex128, equed: uint8, s: float64, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zppsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, afp: ScalarOrArrayC128, equed: ScalarOrArrayU8, s: ScalarOrArray64, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpptrf(uplo: uint8, n: BlasInt, ap: complex128, info: BlasInt) """
def zpptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zpptri(uplo: uint8, n: BlasInt, ap: complex128, info: BlasInt) """
def zpptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zpptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def zpptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zpstf2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float64, work: float64, info: BlasInt) """
def zpstf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpstrf(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, piv: BlasInt, rank: BlasInt, tol: float64, work: float64, info: BlasInt) """
def zpstrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, piv: ScalarOrArrayInt, rank: ScalarOrArrayInt, tol: ScalarOrArray64, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zptcon(n: BlasInt, d: float64, e: complex128, anorm: float64, rcond: float64, rwork: float64, info: BlasInt) """
def zptcon(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, anorm: ScalarOrArray64, rcond: ScalarOrArray64, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpteqr(compz: uint8, n: BlasInt, d: float64, e: float64, z: complex128, ldz: BlasInt, work: float64, info: BlasInt) """
def zpteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zptrfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, d: float64, e: complex128, df: float64, ef: complex128, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zptrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, df: ScalarOrArray64, ef: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zptsv(n: BlasInt, nrhs: BlasInt, d: float64, e: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def zptsv(n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zptsvx(fact: uint8, n: BlasInt, nrhs: BlasInt, d: float64, e: complex128, df: float64, ef: complex128, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zptsvx(fact: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, df: ScalarOrArray64, ef: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zpttrf(n: BlasInt, d: float64, e: complex128, info: BlasInt) """
def zpttrf(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zpttrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, d: float64, e: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def zpttrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zptts2(iuplo: BlasInt, n: BlasInt, nrhs: BlasInt, d: float64, e: complex128, b: complex128, ldb: BlasInt) """
def zptts2(iuplo: ScalarOrArrayInt, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" zrot(n: BlasInt, cx: complex128, incx: BlasInt, cy: complex128, incy: BlasInt, c: float64, s: complex128) """
def zrot(n: ScalarOrArrayInt, cx: ScalarOrArrayC128, incx: ScalarOrArrayInt, cy: ScalarOrArrayC128, incy: ScalarOrArrayInt, c: ScalarOrArray64, s: ScalarOrArrayC128) -> None: ...

""" zrotg(ca: complex128, cb: complex128, c: float64, s: complex128) """
def zrotg(ca: ScalarOrArrayC128, cb: ScalarOrArrayC128, c: ScalarOrArray64, s: ScalarOrArrayC128) -> None: ...

""" zscal(n: BlasInt, za: complex128, zx: complex128, incx: BlasInt) """
def zscal(n: ScalarOrArrayInt, za: ScalarOrArrayC128, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" zspcon(uplo: uint8, n: BlasInt, ap: complex128, ipiv: BlasInt, anorm: float64, rcond: float64, work: complex128, info: BlasInt) """
def zspcon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zspmv(uplo: uint8, n: BlasInt, alpha: complex128, ap: complex128, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zspmv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, ap: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zspr(uplo: uint8, n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, ap: complex128) """
def zspr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, ap: ScalarOrArrayC128) -> None: ...

""" zsprfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, afp: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zsprfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, afp: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zspsv(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zspsv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zspsvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, afp: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zspsvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, afp: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zsptrf(uplo: uint8, n: BlasInt, ap: complex128, ipiv: BlasInt, info: BlasInt) """
def zsptrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsptri(uplo: uint8, n: BlasInt, ap: complex128, ipiv: BlasInt, work: complex128, info: BlasInt) """
def zsptri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zsptrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zsptrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zstedc(compz: uint8, n: BlasInt, d: float64, e: float64, z: complex128, ldz: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zstedc(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zstegr(jobz: uint8, range: uint8, n: BlasInt, d: float64, e: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, abstol: float64, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, isuppz: BlasInt, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zstegr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, abstol: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zstein(n: BlasInt, d: float64, e: float64, m: BlasInt, w: float64, iblock: BlasInt, isplit: BlasInt, z: complex128, ldz: BlasInt, work: float64, iwork: BlasInt, ifail: BlasInt, info: BlasInt) """
def zstein(n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, m: ScalarOrArrayInt, w: ScalarOrArray64, iblock: ScalarOrArrayInt, isplit: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArray64, iwork: ScalarOrArrayInt, ifail: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zstemr(jobz: uint8, range: uint8, n: BlasInt, d: float64, e: float64, vl: float64, vu: float64, il: BlasInt, iu: BlasInt, m: BlasInt, w: float64, z: complex128, ldz: BlasInt, nzc: BlasInt, isuppz: BlasInt, tryrac: bool, work: float64, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def zstemr(jobz: ScalarOrArrayU8, range: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, vl: ScalarOrArray64, vu: ScalarOrArray64, il: ScalarOrArrayInt, iu: ScalarOrArrayInt, m: ScalarOrArrayInt, w: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, nzc: ScalarOrArrayInt, isuppz: ScalarOrArrayInt, tryrac: ScalarOrArrayBool, work: ScalarOrArray64, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsteqr(compz: uint8, n: BlasInt, d: float64, e: float64, z: complex128, ldz: BlasInt, work: float64, info: BlasInt) """
def zsteqr(compz: ScalarOrArrayU8, n: ScalarOrArrayInt, d: ScalarOrArray64, e: ScalarOrArray64, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, work: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zswap(n: BlasInt, zx: complex128, incx: BlasInt, zy: complex128, incy: BlasInt) """
def zswap(n: ScalarOrArrayInt, zx: ScalarOrArrayC128, incx: ScalarOrArrayInt, zy: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zsycon(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, anorm: float64, rcond: float64, work: complex128, info: BlasInt) """
def zsycon(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, anorm: ScalarOrArray64, rcond: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zsyconv(uplo: uint8, way: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, info: BlasInt) """
def zsyconv(uplo: ScalarOrArrayU8, way: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zsyequb(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, s: float64, scond: float64, amax: float64, work: complex128, info: BlasInt) """
def zsyequb(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, s: ScalarOrArray64, scond: ScalarOrArray64, amax: ScalarOrArray64, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zsymm(side: uint8, uplo: uint8, m: BlasInt, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, beta: complex128, c: complex128, ldc: BlasInt) """
def zsymm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zsymv(uplo: uint8, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt, beta: complex128, y: complex128, incy: BlasInt) """
def zsymv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, beta: ScalarOrArrayC128, y: ScalarOrArrayC128, incy: ScalarOrArrayInt) -> None: ...

""" zsyr(uplo: uint8, n: BlasInt, alpha: complex128, x: complex128, incx: BlasInt, a: complex128, lda: BlasInt) """
def zsyr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt) -> None: ...

""" zsyr2k(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, beta: complex128, c: complex128, ldc: BlasInt) """
def zsyr2k(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, beta: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zsyrfs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def zsyrfs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zsyrk(uplo: uint8, trans: uint8, n: BlasInt, k: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, beta: complex128, c: complex128, ldc: BlasInt) """
def zsyrk(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, beta: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt) -> None: ...

""" zsysv(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zsysv(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsysvx(fact: uint8, uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, af: complex128, ldaf: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, rcond: float64, ferr: float64, berr: float64, work: complex128, lwork: BlasInt, rwork: float64, info: BlasInt) """
def zsysvx(fact: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, af: ScalarOrArrayC128, ldaf: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, rcond: ScalarOrArray64, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" zsyswapr(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, i1: BlasInt, i2: BlasInt) """
def zsyswapr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, i1: ScalarOrArrayInt, i2: ScalarOrArrayInt) -> None: ...

""" zsytf2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, info: BlasInt) """
def zsytf2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsytrf(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zsytrf(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsytri(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, info: BlasInt) """
def zsytri(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zsytri2(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zsytri2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsytri2x(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, work: complex128, nb: BlasInt, info: BlasInt) """
def zsytri2x(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, work: ScalarOrArrayC128, nb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsytrs(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def zsytrs(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zsytrs2(uplo: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, ipiv: BlasInt, b: complex128, ldb: BlasInt, work: complex128, info: BlasInt) """
def zsytrs2(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ipiv: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztbcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, kd: BlasInt, ab: complex128, ldab: BlasInt, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def ztbcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztbmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt) """
def ztbmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" ztbrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def ztbrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztbsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt) """
def ztbsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" ztbtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, kd: BlasInt, nrhs: BlasInt, ab: complex128, ldab: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def ztbtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, kd: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ab: ScalarOrArrayC128, ldab: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztfsm(transr: uint8, side: uint8, uplo: uint8, trans: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: complex128, a: complex128, b: complex128, ldb: BlasInt) """
def ztfsm(transr: ScalarOrArrayU8, side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" ztftri(transr: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: complex128, info: BlasInt) """
def ztftri(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztfttp(transr: uint8, uplo: uint8, n: BlasInt, arf: complex128, ap: complex128, info: BlasInt) """
def ztfttp(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArrayC128, ap: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztfttr(transr: uint8, uplo: uint8, n: BlasInt, arf: complex128, a: complex128, lda: BlasInt, info: BlasInt) """
def ztfttr(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, arf: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztgevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, s: complex128, lds: BlasInt, p: complex128, ldp: BlasInt, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def ztgevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, s: ScalarOrArrayC128, lds: ScalarOrArrayInt, p: ScalarOrArrayC128, ldp: ScalarOrArrayInt, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztgex2(wantq: bool, wantz: bool, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, q: complex128, ldq: BlasInt, z: complex128, ldz: BlasInt, j1: BlasInt, info: BlasInt) """
def ztgex2(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, j1: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztgexc(wantq: bool, wantz: bool, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, q: complex128, ldq: BlasInt, z: complex128, ldz: BlasInt, ifst: BlasInt, ilst: BlasInt, info: BlasInt) """
def ztgexc(wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztgsen(ijob: BlasInt, wantq: bool, wantz: bool, select: bool, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, alpha: complex128, beta: complex128, q: complex128, ldq: BlasInt, z: complex128, ldz: BlasInt, m: BlasInt, pl: float64, pr: float64, dif: float64, work: complex128, lwork: BlasInt, iwork: BlasInt, liwork: BlasInt, info: BlasInt) """
def ztgsen(ijob: ScalarOrArrayInt, wantq: ScalarOrArrayBool, wantz: ScalarOrArrayBool, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, alpha: ScalarOrArrayC128, beta: ScalarOrArrayC128, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, z: ScalarOrArrayC128, ldz: ScalarOrArrayInt, m: ScalarOrArrayInt, pl: ScalarOrArray64, pr: ScalarOrArray64, dif: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, liwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztgsja(jobu: uint8, jobv: uint8, jobq: uint8, m: BlasInt, p: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, tola: float64, tolb: float64, alpha: float64, beta: float64, u: complex128, ldu: BlasInt, v: complex128, ldv: BlasInt, q: complex128, ldq: BlasInt, work: complex128, ncycle: BlasInt, info: BlasInt) """
def ztgsja(jobu: ScalarOrArrayU8, jobv: ScalarOrArrayU8, jobq: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, tola: ScalarOrArray64, tolb: ScalarOrArray64, alpha: ScalarOrArray64, beta: ScalarOrArray64, u: ScalarOrArrayC128, ldu: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, work: ScalarOrArrayC128, ncycle: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztgsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, s: float64, dif: float64, mm: BlasInt, m: BlasInt, work: complex128, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def ztgsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, s: ScalarOrArray64, dif: ScalarOrArray64, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztgsy2(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, c: complex128, ldc: BlasInt, d: complex128, ldd: BlasInt, e: complex128, lde: BlasInt, f: complex128, ldf: BlasInt, scale: float64, rdsum: float64, rdscal: float64, info: BlasInt) """
def ztgsy2(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, d: ScalarOrArrayC128, ldd: ScalarOrArrayInt, e: ScalarOrArrayC128, lde: ScalarOrArrayInt, f: ScalarOrArrayC128, ldf: ScalarOrArrayInt, scale: ScalarOrArray64, rdsum: ScalarOrArray64, rdscal: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztgsyl(trans: uint8, ijob: BlasInt, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, c: complex128, ldc: BlasInt, d: complex128, ldd: BlasInt, e: complex128, lde: BlasInt, f: complex128, ldf: BlasInt, scale: float64, dif: float64, work: complex128, lwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def ztgsyl(trans: ScalarOrArrayU8, ijob: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, d: ScalarOrArrayC128, ldd: ScalarOrArrayInt, e: ScalarOrArrayC128, lde: ScalarOrArrayInt, f: ScalarOrArrayC128, ldf: ScalarOrArrayInt, scale: ScalarOrArray64, dif: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztpcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, ap: complex128, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def ztpcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztpmqrt(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, nb: BlasInt, v: complex128, ldv: BlasInt, t: complex128, ldt: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, work: complex128, info: BlasInt) """
def ztpmqrt(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztpmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: complex128, x: complex128, incx: BlasInt) """
def ztpmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" ztpqrt(m: BlasInt, n: BlasInt, l: BlasInt, nb: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, t: complex128, ldt: BlasInt, work: complex128, info: BlasInt) """
def ztpqrt(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, nb: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztpqrt2(m: BlasInt, n: BlasInt, l: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, t: complex128, ldt: BlasInt, info: BlasInt) """
def ztpqrt2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztprfb(side: uint8, trans: uint8, direct: uint8, storev: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, v: complex128, ldv: BlasInt, t: complex128, ldt: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, work: complex128, ldwork: BlasInt) """
def ztprfb(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, direct: ScalarOrArrayU8, storev: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, v: ScalarOrArrayC128, ldv: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, work: ScalarOrArrayC128, ldwork: ScalarOrArrayInt) -> None: ...

""" ztprfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def ztprfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztpsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, ap: complex128, x: complex128, incx: BlasInt) """
def ztpsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" ztptri(uplo: uint8, diag: uint8, n: BlasInt, ap: complex128, info: BlasInt) """
def ztptri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztptrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, ap: complex128, b: complex128, ldb: BlasInt, info: BlasInt) """
def ztptrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, ap: ScalarOrArrayC128, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztpttf(transr: uint8, uplo: uint8, n: BlasInt, ap: complex128, arf: complex128, info: BlasInt) """
def ztpttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, arf: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztpttr(uplo: uint8, n: BlasInt, ap: complex128, a: complex128, lda: BlasInt, info: BlasInt) """
def ztpttr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztrcon(norm: uint8, uplo: uint8, diag: uint8, n: BlasInt, a: complex128, lda: BlasInt, rcond: float64, work: complex128, rwork: float64, info: BlasInt) """
def ztrcon(norm: ScalarOrArrayU8, uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, rcond: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztrevc(side: uint8, howmny: uint8, select: bool, n: BlasInt, t: complex128, ldt: BlasInt, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, mm: BlasInt, m: BlasInt, work: complex128, rwork: float64, info: BlasInt) """
def ztrevc(side: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztrexc(compq: uint8, n: BlasInt, t: complex128, ldt: BlasInt, q: complex128, ldq: BlasInt, ifst: BlasInt, ilst: BlasInt, info: BlasInt) """
def ztrexc(compq: ScalarOrArrayU8, n: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, ifst: ScalarOrArrayInt, ilst: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztrmm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt) """
def ztrmm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" ztrmv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt) """
def ztrmv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" ztrrfs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, x: complex128, ldx: BlasInt, ferr: float64, berr: float64, work: complex128, rwork: float64, info: BlasInt) """
def ztrrfs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, x: ScalarOrArrayC128, ldx: ScalarOrArrayInt, ferr: ScalarOrArray64, berr: ScalarOrArray64, work: ScalarOrArrayC128, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztrsen(job: uint8, compq: uint8, select: bool, n: BlasInt, t: complex128, ldt: BlasInt, q: complex128, ldq: BlasInt, w: complex128, m: BlasInt, s: float64, sep: float64, work: complex128, lwork: BlasInt, info: BlasInt) """
def ztrsen(job: ScalarOrArrayU8, compq: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, w: ScalarOrArrayC128, m: ScalarOrArrayInt, s: ScalarOrArray64, sep: ScalarOrArray64, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztrsm(side: uint8, uplo: uint8, transa: uint8, diag: uint8, m: BlasInt, n: BlasInt, alpha: complex128, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt) """
def ztrsm(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, transa: ScalarOrArrayU8, diag: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, alpha: ScalarOrArrayC128, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt) -> None: ...

""" ztrsna(job: uint8, howmny: uint8, select: bool, n: BlasInt, t: complex128, ldt: BlasInt, vl: complex128, ldvl: BlasInt, vr: complex128, ldvr: BlasInt, s: float64, sep: float64, mm: BlasInt, m: BlasInt, work: complex128, ldwork: BlasInt, rwork: float64, info: BlasInt) """
def ztrsna(job: ScalarOrArrayU8, howmny: ScalarOrArrayU8, select: ScalarOrArrayBool, n: ScalarOrArrayInt, t: ScalarOrArrayC128, ldt: ScalarOrArrayInt, vl: ScalarOrArrayC128, ldvl: ScalarOrArrayInt, vr: ScalarOrArrayC128, ldvr: ScalarOrArrayInt, s: ScalarOrArray64, sep: ScalarOrArray64, mm: ScalarOrArrayInt, m: ScalarOrArrayInt, work: ScalarOrArrayC128, ldwork: ScalarOrArrayInt, rwork: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztrsv(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, a: complex128, lda: BlasInt, x: complex128, incx: BlasInt) """
def ztrsv(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, x: ScalarOrArrayC128, incx: ScalarOrArrayInt) -> None: ...

""" ztrsyl(trana: uint8, tranb: uint8, isgn: BlasInt, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, c: complex128, ldc: BlasInt, scale: float64, info: BlasInt) """
def ztrsyl(trana: ScalarOrArrayU8, tranb: ScalarOrArrayU8, isgn: ScalarOrArrayInt, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, scale: ScalarOrArray64, info: ScalarOrArrayInt) -> None: ...

""" ztrti2(uplo: uint8, diag: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def ztrti2(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztrtri(uplo: uint8, diag: uint8, n: BlasInt, a: complex128, lda: BlasInt, info: BlasInt) """
def ztrtri(uplo: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztrtrs(uplo: uint8, trans: uint8, diag: uint8, n: BlasInt, nrhs: BlasInt, a: complex128, lda: BlasInt, b: complex128, ldb: BlasInt, info: BlasInt) """
def ztrtrs(uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, diag: ScalarOrArrayU8, n: ScalarOrArrayInt, nrhs: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, b: ScalarOrArrayC128, ldb: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" ztrttf(transr: uint8, uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, arf: complex128, info: BlasInt) """
def ztrttf(transr: ScalarOrArrayU8, uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, arf: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztrttp(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, ap: complex128, info: BlasInt) """
def ztrttp(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, ap: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" ztzrzf(m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def ztzrzf(m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunbdb(trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: complex128, ldx11: BlasInt, x12: complex128, ldx12: BlasInt, x21: complex128, ldx21: BlasInt, x22: complex128, ldx22: BlasInt, theta: float64, phi: float64, taup1: complex128, taup2: complex128, tauq1: complex128, tauq2: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunbdb(trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArrayC128, ldx11: ScalarOrArrayInt, x12: ScalarOrArrayC128, ldx12: ScalarOrArrayInt, x21: ScalarOrArrayC128, ldx21: ScalarOrArrayInt, x22: ScalarOrArrayC128, ldx22: ScalarOrArrayInt, theta: ScalarOrArray64, phi: ScalarOrArray64, taup1: ScalarOrArrayC128, taup2: ScalarOrArrayC128, tauq1: ScalarOrArrayC128, tauq2: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zuncsd(jobu1: uint8, jobu2: uint8, jobv1t: uint8, jobv2t: uint8, trans: uint8, signs: uint8, m: BlasInt, p: BlasInt, q: BlasInt, x11: complex128, ldx11: BlasInt, x12: complex128, ldx12: BlasInt, x21: complex128, ldx21: BlasInt, x22: complex128, ldx22: BlasInt, theta: float64, u1: complex128, ldu1: BlasInt, u2: complex128, ldu2: BlasInt, v1t: complex128, ldv1t: BlasInt, v2t: complex128, ldv2t: BlasInt, work: complex128, lwork: BlasInt, rwork: float64, lrwork: BlasInt, iwork: BlasInt, info: BlasInt) """
def zuncsd(jobu1: ScalarOrArrayU8, jobu2: ScalarOrArrayU8, jobv1t: ScalarOrArrayU8, jobv2t: ScalarOrArrayU8, trans: ScalarOrArrayU8, signs: ScalarOrArrayU8, m: ScalarOrArrayInt, p: ScalarOrArrayInt, q: ScalarOrArrayInt, x11: ScalarOrArrayC128, ldx11: ScalarOrArrayInt, x12: ScalarOrArrayC128, ldx12: ScalarOrArrayInt, x21: ScalarOrArrayC128, ldx21: ScalarOrArrayInt, x22: ScalarOrArrayC128, ldx22: ScalarOrArrayInt, theta: ScalarOrArray64, u1: ScalarOrArrayC128, ldu1: ScalarOrArrayInt, u2: ScalarOrArrayC128, ldu2: ScalarOrArrayInt, v1t: ScalarOrArrayC128, ldv1t: ScalarOrArrayInt, v2t: ScalarOrArrayC128, ldv2t: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, rwork: ScalarOrArray64, lrwork: ScalarOrArrayInt, iwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zung2l(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zung2l(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zung2r(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zung2r(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zungbr(vect: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zungbr(vect: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunghr(n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunghr(n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zungl2(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zungl2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zunglq(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunglq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zungql(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zungql(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zungqr(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zungqr(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zungr2(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, info: BlasInt) """
def zungr2(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zungrq(m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zungrq(m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zungtr(uplo: uint8, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, work: complex128, lwork: BlasInt, info: BlasInt) """
def zungtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunm2l(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zunm2l(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zunm2r(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zunm2r(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zunmbr(vect: uint8, side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmbr(vect: ScalarOrArrayU8, side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunmhr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, ilo: BlasInt, ihi: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmhr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ilo: ScalarOrArrayInt, ihi: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunml2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zunml2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zunmlq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmlq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunmql(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmql(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunmqr(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmqr(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunmr2(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zunmr2(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zunmr3(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zunmr3(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zunmrq(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmrq(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunmrz(side: uint8, trans: uint8, m: BlasInt, n: BlasInt, k: BlasInt, l: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmrz(side: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, k: ScalarOrArrayInt, l: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zunmtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, a: complex128, lda: BlasInt, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, lwork: BlasInt, info: BlasInt) """
def zunmtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, a: ScalarOrArrayC128, lda: ScalarOrArrayInt, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, lwork: ScalarOrArrayInt, info: ScalarOrArrayInt) -> None: ...

""" zupgtr(uplo: uint8, n: BlasInt, ap: complex128, tau: complex128, q: complex128, ldq: BlasInt, work: complex128, info: BlasInt) """
def zupgtr(uplo: ScalarOrArrayU8, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, tau: ScalarOrArrayC128, q: ScalarOrArrayC128, ldq: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

""" zupmtr(side: uint8, uplo: uint8, trans: uint8, m: BlasInt, n: BlasInt, ap: complex128, tau: complex128, c: complex128, ldc: BlasInt, work: complex128, info: BlasInt) """
def zupmtr(side: ScalarOrArrayU8, uplo: ScalarOrArrayU8, trans: ScalarOrArrayU8, m: ScalarOrArrayInt, n: ScalarOrArrayInt, ap: ScalarOrArrayC128, tau: ScalarOrArrayC128, c: ScalarOrArrayC128, ldc: ScalarOrArrayInt, work: ScalarOrArrayC128, info: ScalarOrArrayInt) -> None: ...

__all__ = ('byref', 'caxpy', 'cbbcsd', 'cbdsqr', 'ccopy', 'cdotc', 'cdotu', 'cgbbrd', 'cgbcon', 'cgbequ', 'cgbequb', 'cgbmv', 'cgbrfs', 'cgbsv', 'cgbsvx', 'cgbtf2', 'cgbtrf', 'cgbtrs', 'cgebak', 'cgebal', 'cgebd2', 'cgebrd', 'cgecon', 'cgeequ', 'cgeequb', 'cgeev', 'cgeevx', 'cgehd2', 'cgehrd', 'cgelq2', 'cgelqf', 'cgels', 'cgelsd', 'cgelss', 'cgelsy', 'cgemm', 'cgemqrt', 'cgemv', 'cgeql2', 'cgeqlf', 'cgeqp3', 'cgeqr2', 'cgeqr2p', 'cgeqrf', 'cgeqrfp', 'cgeqrt', 'cgeqrt2', 'cgeqrt3', 'cgerc', 'cgerfs', 'cgerq2', 'cgerqf', 'cgeru', 'cgesc2', 'cgesdd', 'cgesv', 'cgesvd', 'cgesvx', 'cgetc2', 'cgetf2', 'cgetrf', 'cgetri', 'cgetrs', 'cggbak', 'cggbal', 'cggev', 'cggevx', 'cggglm', 'cgghrd', 'cgglse', 'cggqrf', 'cggrqf', 'cgtcon', 'cgtrfs', 'cgtsv', 'cgtsvx', 'cgttrf', 'cgttrs', 'cgtts2', 'chbev', 'chbevd', 'chbevx', 'chbgst', 'chbgv', 'chbgvd', 'chbgvx', 'chbmv', 'chbtrd', 'checon', 'cheequb', 'cheev', 'cheevd', 'cheevr', 'cheevx', 'chegs2', 'chegst', 'chegv', 'chegvd', 'chegvx', 'chemm', 'chemv', 'cher', 'cher2', 'cher2k', 'cherfs', 'cherk', 'chesv', 'chesvx', 'cheswapr', 'chetd2', 'chetf2', 'chetrd', 'chetrf', 'chetri', 'chetri2', 'chetri2x', 'chetrs', 'chetrs2', 'chfrk', 'chgeqz', 'chla_transtype', 'chpcon', 'chpev', 'chpevd', 'chpevx', 'chpgst', 'chpgv', 'chpgvd', 'chpgvx', 'chpmv', 'chpr', 'chpr2', 'chprfs', 'chpsv', 'chpsvx', 'chptrd', 'chptrf', 'chptri', 'chptrs', 'chsein', 'chseqr', 'clabrd', 'clacgv', 'clacn2', 'clacon', 'clacp2', 'clacpy', 'clacrm', 'clacrt', 'cladiv', 'claed0', 'claed7', 'claed8', 'claein', 'claesy', 'claev2', 'clag2z', 'clags2', 'clagtm', 'clahef', 'clahqr', 'clahr2', 'claic1', 'clals0', 'clalsa', 'clalsd', 'clangb', 'clange', 'clangt', 'clanhb', 'clanhe', 'clanhf', 'clanhp', 'clanhs', 'clanht', 'clansb', 'clansp', 'clansy', 'clantb', 'clantp', 'clantr', 'clapll', 'clapmr', 'clapmt', 'claqgb', 'claqge', 'claqhb', 'claqhe', 'claqhp', 'claqp2', 'claqps', 'claqr0', 'claqr1', 'claqr2', 'claqr3', 'claqr4', 'claqr5', 'claqsb', 'claqsp', 'claqsy', 'clar1v', 'clar2v', 'clarcm', 'clarf', 'clarfb', 'clarfg', 'clarfgp', 'clarft', 'clarfx', 'clargv', 'clarnv', 'clarrv', 'clartg', 'clartv', 'clarz', 'clarzb', 'clarzt', 'clascl', 'claset', 'clasr', 'classq', 'claswp', 'clasyf', 'clatbs', 'clatdf', 'clatps', 'clatrd', 'clatrs', 'clatrz', 'clauu2', 'clauum', 'cpbcon', 'cpbequ', 'cpbrfs', 'cpbstf', 'cpbsv', 'cpbsvx', 'cpbtf2', 'cpbtrf', 'cpbtrs', 'cpftrf', 'cpftri', 'cpftrs', 'cpocon', 'cpoequ', 'cpoequb', 'cporfs', 'cposv', 'cposvx', 'cpotf2', 'cpotrf', 'cpotri', 'cpotrs', 'cppcon', 'cppequ', 'cpprfs', 'cppsv', 'cppsvx', 'cpptrf', 'cpptri', 'cpptrs', 'cpstf2', 'cpstrf', 'cptcon', 'cpteqr', 'cptrfs', 'cptsv', 'cptsvx', 'cpttrf', 'cpttrs', 'cptts2', 'crot', 'crotg', 'cscal', 'cspcon', 'cspmv', 'cspr', 'csprfs', 'cspsv', 'cspsvx', 'csptrf', 'csptri', 'csptrs', 'csrot', 'csrscl', 'csscal', 'cstedc', 'cstegr', 'cstein', 'cstemr', 'csteqr', 'cswap', 'csycon', 'csyconv', 'csyequb', 'csymm', 'csymv', 'csyr', 'csyr2k', 'csyrfs', 'csyrk', 'csysv', 'csysvx', 'csyswapr', 'csytf2', 'csytrf', 'csytri', 'csytri2', 'csytri2x', 'csytrs', 'csytrs2', 'ctbcon', 'ctbmv', 'ctbrfs', 'ctbsv', 'ctbtrs', 'ctfsm', 'ctftri', 'ctfttp', 'ctfttr', 'ctgevc', 'ctgex2', 'ctgexc', 'ctgsen', 'ctgsja', 'ctgsna', 'ctgsy2', 'ctgsyl', 'ctpcon', 'ctpmqrt', 'ctpmv', 'ctpqrt', 'ctpqrt2', 'ctprfb', 'ctprfs', 'ctpsv', 'ctptri', 'ctptrs', 'ctpttf', 'ctpttr', 'ctrcon', 'ctrevc', 'ctrexc', 'ctrmm', 'ctrmv', 'ctrrfs', 'ctrsen', 'ctrsm', 'ctrsna', 'ctrsv', 'ctrsyl', 'ctrti2', 'ctrtri', 'ctrtrs', 'ctrttf', 'ctrttp', 'ctzrzf', 'cunbdb', 'cuncsd', 'cung2l', 'cung2r', 'cungbr', 'cunghr', 'cungl2', 'cunglq', 'cungql', 'cungqr', 'cungr2', 'cungrq', 'cungtr', 'cunm2l', 'cunm2r', 'cunmbr', 'cunmhr', 'cunml2', 'cunmlq', 'cunmql', 'cunmqr', 'cunmr2', 'cunmr3', 'cunmrq', 'cunmrz', 'cunmtr', 'cupgtr', 'cupmtr', 'dasum', 'data_ptr', 'daxpy', 'dbbcsd', 'dbdsdc', 'dbdsqr', 'dcabs1', 'dcopy', 'ddisna', 'ddot', 'dgbbrd', 'dgbcon', 'dgbequ', 'dgbequb', 'dgbmv', 'dgbrfs', 'dgbsv', 'dgbsvx', 'dgbtf2', 'dgbtrf', 'dgbtrs', 'dgebak', 'dgebal', 'dgebd2', 'dgebrd', 'dgecon', 'dgeequ', 'dgeequb', 'dgeev', 'dgeevx', 'dgehd2', 'dgehrd', 'dgejsv', 'dgelq2', 'dgelqf', 'dgels', 'dgelsd', 'dgelss', 'dgelsy', 'dgemm', 'dgemqrt', 'dgemv', 'dgeql2', 'dgeqlf', 'dgeqp3', 'dgeqr2', 'dgeqr2p', 'dgeqrf', 'dgeqrfp', 'dgeqrt', 'dgeqrt2', 'dgeqrt3', 'dger', 'dgerfs', 'dgerq2', 'dgerqf', 'dgesc2', 'dgesdd', 'dgesv', 'dgesvd', 'dgesvj', 'dgesvx', 'dgetc2', 'dgetf2', 'dgetrf', 'dgetri', 'dgetrs', 'dggbak', 'dggbal', 'dggev', 'dggevx', 'dggglm', 'dgghrd', 'dgglse', 'dggqrf', 'dggrqf', 'dgsvj0', 'dgsvj1', 'dgtcon', 'dgtrfs', 'dgtsv', 'dgtsvx', 'dgttrf', 'dgttrs', 'dgtts2', 'dhgeqz', 'dhsein', 'dhseqr', 'disnan', 'dlabad', 'dlabrd', 'dlacn2', 'dlacon', 'dlacpy', 'dladiv', 'dlae2', 'dlaebz', 'dlaed0', 'dlaed1', 'dlaed2', 'dlaed3', 'dlaed4', 'dlaed5', 'dlaed6', 'dlaed7', 'dlaed8', 'dlaed9', 'dlaeda', 'dlaein', 'dlaev2', 'dlaexc', 'dlag2', 'dlag2s', 'dlags2', 'dlagtf', 'dlagtm', 'dlagts', 'dlagv2', 'dlahqr', 'dlahr2', 'dlaic1', 'dlaln2', 'dlals0', 'dlalsa', 'dlalsd', 'dlamch', 'dlamrg', 'dlaneg', 'dlangb', 'dlange', 'dlangt', 'dlanhs', 'dlansb', 'dlansf', 'dlansp', 'dlanst', 'dlansy', 'dlantb', 'dlantp', 'dlantr', 'dlanv2', 'dlapll', 'dlapmr', 'dlapmt', 'dlapy2', 'dlapy3', 'dlaqgb', 'dlaqge', 'dlaqp2', 'dlaqps', 'dlaqr0', 'dlaqr1', 'dlaqr2', 'dlaqr3', 'dlaqr4', 'dlaqr5', 'dlaqsb', 'dlaqsp', 'dlaqsy', 'dlaqtr', 'dlar1v', 'dlar2v', 'dlarf', 'dlarfb', 'dlarfg', 'dlarfgp', 'dlarft', 'dlarfx', 'dlargv', 'dlarnv', 'dlarra', 'dlarrb', 'dlarrc', 'dlarrd', 'dlarre', 'dlarrf', 'dlarrj', 'dlarrk', 'dlarrr', 'dlarrv', 'dlartg', 'dlartgp', 'dlartgs', 'dlartv', 'dlaruv', 'dlarz', 'dlarzb', 'dlarzt', 'dlas2', 'dlascl', 'dlasd0', 'dlasd1', 'dlasd2', 'dlasd3', 'dlasd4', 'dlasd5', 'dlasd6', 'dlasd7', 'dlasd8', 'dlasda', 'dlasdq', 'dlasdt', 'dlaset', 'dlasq1', 'dlasq2', 'dlasq3', 'dlasq4', 'dlasq6', 'dlasr', 'dlasrt', 'dlassq', 'dlasv2', 'dlaswp', 'dlasy2', 'dlasyf', 'dlat2s', 'dlatbs', 'dlatdf', 'dlatps', 'dlatrd', 'dlatrs', 'dlatrz', 'dlauu2', 'dlauum', 'dnrm2', 'dopgtr', 'dopmtr', 'dorbdb', 'dorcsd', 'dorg2l', 'dorg2r', 'dorgbr', 'dorghr', 'dorgl2', 'dorglq', 'dorgql', 'dorgqr', 'dorgr2', 'dorgrq', 'dorgtr', 'dorm2l', 'dorm2r', 'dormbr', 'dormhr', 'dorml2', 'dormlq', 'dormql', 'dormqr', 'dormr2', 'dormr3', 'dormrq', 'dormrz', 'dormtr', 'dpbcon', 'dpbequ', 'dpbrfs', 'dpbstf', 'dpbsv', 'dpbsvx', 'dpbtf2', 'dpbtrf', 'dpbtrs', 'dpftrf', 'dpftri', 'dpftrs', 'dpocon', 'dpoequ', 'dpoequb', 'dporfs', 'dposv', 'dposvx', 'dpotf2', 'dpotrf', 'dpotri', 'dpotrs', 'dppcon', 'dppequ', 'dpprfs', 'dppsv', 'dppsvx', 'dpptrf', 'dpptri', 'dpptrs', 'dpstf2', 'dpstrf', 'dptcon', 'dpteqr', 'dptrfs', 'dptsv', 'dptsvx', 'dpttrf', 'dpttrs', 'dptts2', 'drot', 'drotg', 'drotm', 'drotmg', 'drscl', 'dsbev', 'dsbevd', 'dsbevx', 'dsbgst', 'dsbgv', 'dsbgvd', 'dsbgvx', 'dsbmv', 'dsbtrd', 'dscal', 'dsdot', 'dsfrk', 'dsgesv', 'dspcon', 'dspev', 'dspevd', 'dspevx', 'dspgst', 'dspgv', 'dspgvd', 'dspgvx', 'dspmv', 'dsposv', 'dspr', 'dspr2', 'dsprfs', 'dspsv', 'dspsvx', 'dsptrd', 'dsptrf', 'dsptri', 'dsptrs', 'dstebz', 'dstedc', 'dstegr', 'dstein', 'dstemr', 'dsteqr', 'dsterf', 'dstev', 'dstevd', 'dstevr', 'dstevx', 'dswap', 'dsycon', 'dsyconv', 'dsyequb', 'dsyev', 'dsyevd', 'dsyevr', 'dsyevx', 'dsygs2', 'dsygst', 'dsygv', 'dsygvd', 'dsygvx', 'dsymm', 'dsymv', 'dsyr', 'dsyr2', 'dsyr2k', 'dsyrfs', 'dsyrk', 'dsysv', 'dsysvx', 'dsyswapr', 'dsytd2', 'dsytf2', 'dsytrd', 'dsytrf', 'dsytri', 'dsytri2', 'dsytri2x', 'dsytrs', 'dsytrs2', 'dtbcon', 'dtbmv', 'dtbrfs', 'dtbsv', 'dtbtrs', 'dtfsm', 'dtftri', 'dtfttp', 'dtfttr', 'dtgevc', 'dtgex2', 'dtgexc', 'dtgsen', 'dtgsja', 'dtgsna', 'dtgsy2', 'dtgsyl', 'dtpcon', 'dtpmqrt', 'dtpmv', 'dtpqrt', 'dtpqrt2', 'dtprfb', 'dtprfs', 'dtpsv', 'dtptri', 'dtptrs', 'dtpttf', 'dtpttr', 'dtrcon', 'dtrevc', 'dtrexc', 'dtrmm', 'dtrmv', 'dtrrfs', 'dtrsen', 'dtrsm', 'dtrsna', 'dtrsv', 'dtrsyl', 'dtrti2', 'dtrtri', 'dtrtrs', 'dtrttf', 'dtrttp', 'dtzrzf', 'dzasum', 'dznrm2', 'dzsum1', 'icamax', 'icmax1', 'idamax', 'ieeeck', 'ilaclc', 'ilaclr', 'iladiag', 'iladlc', 'iladlr', 'ilaprec', 'ilaslc', 'ilaslr', 'ilatrans', 'ilauplo', 'ilaver', 'ilazlc', 'ilazlr', 'isamax', 'izamax', 'izmax1', 'lsame', 'sasum', 'saxpy', 'sbbcsd', 'sbdsdc', 'sbdsqr', 'scasum', 'scnrm2', 'scopy', 'scsum1', 'sdisna', 'sdot', 'sdsdot', 'sgbbrd', 'sgbcon', 'sgbequ', 'sgbequb', 'sgbmv', 'sgbrfs', 'sgbsv', 'sgbsvx', 'sgbtf2', 'sgbtrf', 'sgbtrs', 'sgebak', 'sgebal', 'sgebd2', 'sgebrd', 'sgecon', 'sgeequ', 'sgeequb', 'sgeev', 'sgeevx', 'sgehd2', 'sgehrd', 'sgejsv', 'sgelq2', 'sgelqf', 'sgels', 'sgelsd', 'sgelss', 'sgelsy', 'sgemm', 'sgemqrt', 'sgemv', 'sgeql2', 'sgeqlf', 'sgeqp3', 'sgeqr2', 'sgeqr2p', 'sgeqrf', 'sgeqrfp', 'sgeqrt', 'sgeqrt2', 'sgeqrt3', 'sger', 'sgerfs', 'sgerq2', 'sgerqf', 'sgesc2', 'sgesdd', 'sgesv', 'sgesvd', 'sgesvj', 'sgesvx', 'sgetc2', 'sgetf2', 'sgetrf', 'sgetri', 'sgetrs', 'sggbak', 'sggbal', 'sggev', 'sggevx', 'sggglm', 'sgghrd', 'sgglse', 'sggqrf', 'sggrqf', 'sgsvj0', 'sgsvj1', 'sgtcon', 'sgtrfs', 'sgtsv', 'sgtsvx', 'sgttrf', 'sgttrs', 'sgtts2', 'shgeqz', 'shsein', 'shseqr', 'slabad', 'slabrd', 'slacn2', 'slacon', 'slacpy', 'sladiv', 'slae2', 'slaebz', 'slaed0', 'slaed1', 'slaed2', 'slaed3', 'slaed4', 'slaed5', 'slaed6', 'slaed7', 'slaed8', 'slaed9', 'slaeda', 'slaein', 'slaev2', 'slaexc', 'slag2', 'slag2d', 'slags2', 'slagtf', 'slagtm', 'slagts', 'slagv2', 'slahqr', 'slahr2', 'slaic1', 'slaln2', 'slals0', 'slalsa', 'slalsd', 'slamch', 'slamrg', 'slangb', 'slange', 'slangt', 'slanhs', 'slansb', 'slansf', 'slansp', 'slanst', 'slansy', 'slantb', 'slantp', 'slantr', 'slanv2', 'slapll', 'slapmr', 'slapmt', 'slapy2', 'slapy3', 'slaqgb', 'slaqge', 'slaqp2', 'slaqps', 'slaqr0', 'slaqr1', 'slaqr2', 'slaqr3', 'slaqr4', 'slaqr5', 'slaqsb', 'slaqsp', 'slaqsy', 'slaqtr', 'slar1v', 'slar2v', 'slarf', 'slarfb', 'slarfg', 'slarfgp', 'slarft', 'slarfx', 'slargv', 'slarnv', 'slarra', 'slarrb', 'slarrc', 'slarrd', 'slarre', 'slarrf', 'slarrj', 'slarrk', 'slarrr', 'slarrv', 'slartg', 'slartgp', 'slartgs', 'slartv', 'slaruv', 'slarz', 'slarzb', 'slarzt', 'slas2', 'slascl', 'slasd0', 'slasd1', 'slasd2', 'slasd3', 'slasd4', 'slasd5', 'slasd6', 'slasd7', 'slasd8', 'slasda', 'slasdq', 'slasdt', 'slaset', 'slasq1', 'slasq2', 'slasq3', 'slasq4', 'slasq6', 'slasr', 'slasrt', 'slassq', 'slasv2', 'slaswp', 'slasy2', 'slasyf', 'slatbs', 'slatdf', 'slatps', 'slatrd', 'slatrs', 'slatrz', 'slauu2', 'slauum', 'snrm2', 'sopgtr', 'sopmtr', 'sorbdb', 'sorcsd', 'sorg2l', 'sorg2r', 'sorgbr', 'sorghr', 'sorgl2', 'sorglq', 'sorgql', 'sorgqr', 'sorgr2', 'sorgrq', 'sorgtr', 'sorm2l', 'sorm2r', 'sormbr', 'sormhr', 'sorml2', 'sormlq', 'sormql', 'sormqr', 'sormr2', 'sormr3', 'sormrq', 'sormrz', 'sormtr', 'spbcon', 'spbequ', 'spbrfs', 'spbstf', 'spbsv', 'spbsvx', 'spbtf2', 'spbtrf', 'spbtrs', 'spftrf', 'spftri', 'spftrs', 'spocon', 'spoequ', 'spoequb', 'sporfs', 'sposv', 'sposvx', 'spotf2', 'spotrf', 'spotri', 'spotrs', 'sppcon', 'sppequ', 'spprfs', 'sppsv', 'sppsvx', 'spptrf', 'spptri', 'spptrs', 'spstf2', 'spstrf', 'sptcon', 'spteqr', 'sptrfs', 'sptsv', 'sptsvx', 'spttrf', 'spttrs', 'sptts2', 'srot', 'srotg', 'srotm', 'srotmg', 'srscl', 'ssbev', 'ssbevd', 'ssbevx', 'ssbgst', 'ssbgv', 'ssbgvd', 'ssbgvx', 'ssbmv', 'ssbtrd', 'sscal', 'ssfrk', 'sspcon', 'sspev', 'sspevd', 'sspevx', 'sspgst', 'sspgv', 'sspgvd', 'sspgvx', 'sspmv', 'sspr', 'sspr2', 'ssprfs', 'sspsv', 'sspsvx', 'ssptrd', 'ssptrf', 'ssptri', 'ssptrs', 'sstebz', 'sstedc', 'sstegr', 'sstein', 'sstemr', 'ssteqr', 'ssterf', 'sstev', 'sstevd', 'sstevr', 'sstevx', 'sswap', 'ssycon', 'ssyconv', 'ssyequb', 'ssyev', 'ssyevd', 'ssyevr', 'ssyevx', 'ssygs2', 'ssygst', 'ssygv', 'ssygvd', 'ssygvx', 'ssymm', 'ssymv', 'ssyr', 'ssyr2', 'ssyr2k', 'ssyrfs', 'ssyrk', 'ssysv', 'ssysvx', 'ssyswapr', 'ssytd2', 'ssytf2', 'ssytrd', 'ssytrf', 'ssytri', 'ssytri2', 'ssytri2x', 'ssytrs', 'ssytrs2', 'stbcon', 'stbmv', 'stbrfs', 'stbsv', 'stbtrs', 'stfsm', 'stftri', 'stfttp', 'stfttr', 'stgevc', 'stgex2', 'stgexc', 'stgsen', 'stgsja', 'stgsna', 'stgsy2', 'stgsyl', 'stpcon', 'stpmqrt', 'stpmv', 'stpqrt', 'stpqrt2', 'stprfb', 'stprfs', 'stpsv', 'stptri', 'stptrs', 'stpttf', 'stpttr', 'strcon', 'strevc', 'strexc', 'strmm', 'strmv', 'strrfs', 'strsen', 'strsm', 'strsna', 'strsv', 'strsyl', 'strti2', 'strtri', 'strtrs', 'strttf', 'strttp', 'stzrzf', 'xerbla_array', 'zaxpy', 'zbbcsd', 'zbdsqr', 'zcgesv', 'zcopy', 'zcposv', 'zdotc', 'zdotu', 'zdrot', 'zdrscl', 'zdscal', 'zgbbrd', 'zgbcon', 'zgbequ', 'zgbequb', 'zgbmv', 'zgbrfs', 'zgbsv', 'zgbsvx', 'zgbtf2', 'zgbtrf', 'zgbtrs', 'zgebak', 'zgebal', 'zgebd2', 'zgebrd', 'zgecon', 'zgeequ', 'zgeequb', 'zgeev', 'zgeevx', 'zgehd2', 'zgehrd', 'zgelq2', 'zgelqf', 'zgels', 'zgelsd', 'zgelss', 'zgelsy', 'zgemm', 'zgemqrt', 'zgemv', 'zgeql2', 'zgeqlf', 'zgeqp3', 'zgeqr2', 'zgeqr2p', 'zgeqrf', 'zgeqrfp', 'zgeqrt', 'zgeqrt2', 'zgeqrt3', 'zgerc', 'zgerfs', 'zgerq2', 'zgerqf', 'zgeru', 'zgesc2', 'zgesdd', 'zgesv', 'zgesvd', 'zgesvx', 'zgetc2', 'zgetf2', 'zgetrf', 'zgetri', 'zgetrs', 'zggbak', 'zggbal', 'zggev', 'zggevx', 'zggglm', 'zgghrd', 'zgglse', 'zggqrf', 'zggrqf', 'zgtcon', 'zgtrfs', 'zgtsv', 'zgtsvx', 'zgttrf', 'zgttrs', 'zgtts2', 'zhbev', 'zhbevd', 'zhbevx', 'zhbgst', 'zhbgv', 'zhbgvd', 'zhbgvx', 'zhbmv', 'zhbtrd', 'zhecon', 'zheequb', 'zheev', 'zheevd', 'zheevr', 'zheevx', 'zhegs2', 'zhegst', 'zhegv', 'zhegvd', 'zhegvx', 'zhemm', 'zhemv', 'zher', 'zher2', 'zher2k', 'zherfs', 'zherk', 'zhesv', 'zhesvx', 'zheswapr', 'zhetd2', 'zhetf2', 'zhetrd', 'zhetrf', 'zhetri', 'zhetri2', 'zhetri2x', 'zhetrs', 'zhetrs2', 'zhfrk', 'zhgeqz', 'zhpcon', 'zhpev', 'zhpevd', 'zhpevx', 'zhpgst', 'zhpgv', 'zhpgvd', 'zhpgvx', 'zhpmv', 'zhpr', 'zhpr2', 'zhprfs', 'zhpsv', 'zhpsvx', 'zhptrd', 'zhptrf', 'zhptri', 'zhptrs', 'zhsein', 'zhseqr', 'zlabrd', 'zlacgv', 'zlacn2', 'zlacon', 'zlacp2', 'zlacpy', 'zlacrm', 'zlacrt', 'zladiv', 'zlaed0', 'zlaed7', 'zlaed8', 'zlaein', 'zlaesy', 'zlaev2', 'zlag2c', 'zlags2', 'zlagtm', 'zlahef', 'zlahqr', 'zlahr2', 'zlaic1', 'zlals0', 'zlalsa', 'zlalsd', 'zlangb', 'zlange', 'zlangt', 'zlanhb', 'zlanhe', 'zlanhf', 'zlanhp', 'zlanhs', 'zlanht', 'zlansb', 'zlansp', 'zlansy', 'zlantb', 'zlantp', 'zlantr', 'zlapll', 'zlapmr', 'zlapmt', 'zlaqgb', 'zlaqge', 'zlaqhb', 'zlaqhe', 'zlaqhp', 'zlaqp2', 'zlaqps', 'zlaqr0', 'zlaqr1', 'zlaqr2', 'zlaqr3', 'zlaqr4', 'zlaqr5', 'zlaqsb', 'zlaqsp', 'zlaqsy', 'zlar1v', 'zlar2v', 'zlarcm', 'zlarf', 'zlarfb', 'zlarfg', 'zlarfgp', 'zlarft', 'zlarfx', 'zlargv', 'zlarnv', 'zlarrv', 'zlartg', 'zlartv', 'zlarz', 'zlarzb', 'zlarzt', 'zlascl', 'zlaset', 'zlasr', 'zlassq', 'zlaswp', 'zlasyf', 'zlat2c', 'zlatbs', 'zlatdf', 'zlatps', 'zlatrd', 'zlatrs', 'zlatrz', 'zlauu2', 'zlauum', 'zpbcon', 'zpbequ', 'zpbrfs', 'zpbstf', 'zpbsv', 'zpbsvx', 'zpbtf2', 'zpbtrf', 'zpbtrs', 'zpftrf', 'zpftri', 'zpftrs', 'zpocon', 'zpoequ', 'zpoequb', 'zporfs', 'zposv', 'zposvx', 'zpotf2', 'zpotrf', 'zpotri', 'zpotrs', 'zppcon', 'zppequ', 'zpprfs', 'zppsv', 'zppsvx', 'zpptrf', 'zpptri', 'zpptrs', 'zpstf2', 'zpstrf', 'zptcon', 'zpteqr', 'zptrfs', 'zptsv', 'zptsvx', 'zpttrf', 'zpttrs', 'zptts2', 'zrot', 'zrotg', 'zscal', 'zspcon', 'zspmv', 'zspr', 'zsprfs', 'zspsv', 'zspsvx', 'zsptrf', 'zsptri', 'zsptrs', 'zstedc', 'zstegr', 'zstein', 'zstemr', 'zsteqr', 'zswap', 'zsycon', 'zsyconv', 'zsyequb', 'zsymm', 'zsymv', 'zsyr', 'zsyr2k', 'zsyrfs', 'zsyrk', 'zsysv', 'zsysvx', 'zsyswapr', 'zsytf2', 'zsytrf', 'zsytri', 'zsytri2', 'zsytri2x', 'zsytrs', 'zsytrs2', 'ztbcon', 'ztbmv', 'ztbrfs', 'ztbsv', 'ztbtrs', 'ztfsm', 'ztftri', 'ztfttp', 'ztfttr', 'ztgevc', 'ztgex2', 'ztgexc', 'ztgsen', 'ztgsja', 'ztgsna', 'ztgsy2', 'ztgsyl', 'ztpcon', 'ztpmqrt', 'ztpmv', 'ztpqrt', 'ztpqrt2', 'ztprfb', 'ztprfs', 'ztpsv', 'ztptri', 'ztptrs', 'ztpttf', 'ztpttr', 'ztrcon', 'ztrevc', 'ztrexc', 'ztrmm', 'ztrmv', 'ztrrfs', 'ztrsen', 'ztrsm', 'ztrsna', 'ztrsv', 'ztrsyl', 'ztrti2', 'ztrtri', 'ztrtrs', 'ztrttf', 'ztrttp', 'ztzrzf', 'zunbdb', 'zuncsd', 'zung2l', 'zung2r', 'zungbr', 'zunghr', 'zungl2', 'zunglq', 'zungql', 'zungqr', 'zungr2', 'zungrq', 'zungtr', 'zunm2l', 'zunm2r', 'zunmbr', 'zunmhr', 'zunml2', 'zunmlq', 'zunmql', 'zunmqr', 'zunmr2', 'zunmr3', 'zunmrq', 'zunmrz', 'zunmtr', 'zupgtr', 'zupmtr')